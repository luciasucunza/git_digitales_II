
GPeesy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003968  08003968  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003968  08003968  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000000c  0800397c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800397c  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3b6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c61  00000000  00000000  0002d3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002f050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  0002f818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d317  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086e4  00000000  00000000  0003d217  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004353f  00000000  00000000  000458fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a34  00000000  00000000  00088eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b7c 	.word	0x08002b7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b7c 	.word	0x08002b7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fb2f 	bl	8002898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fee2 	bl	8001018 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e7 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000430 	.word	0x20000430

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000430 	.word	0x20000430

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	230f      	movs	r3, #15
 8000308:	400b      	ands	r3, r1
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0011      	movs	r1, r2
 800031e:	2203      	movs	r2, #3
 8000320:	400a      	ands	r2, r1
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	4091      	lsls	r1, r2
 8000328:	000a      	movs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
 800032e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	019b      	lsls	r3, r3, #6
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	401a      	ands	r2, r3
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	2303      	movs	r3, #3
 8000340:	4003      	ands	r3, r0
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4023      	ands	r3, r4
 8000352:	3b08      	subs	r3, #8
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	3306      	adds	r3, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18c3      	adds	r3, r0, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	33c0      	adds	r3, #192	; 0xc0
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	589b      	ldr	r3, [r3, r2]
 8000374:	1dfa      	adds	r2, r7, #7
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	0011      	movs	r1, r2
 800037a:	2203      	movs	r2, #3
 800037c:	400a      	ands	r2, r1
 800037e:	00d2      	lsls	r2, r2, #3
 8000380:	21ff      	movs	r1, #255	; 0xff
 8000382:	4091      	lsls	r1, r2
 8000384:	000a      	movs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	401a      	ands	r2, r3
 800038a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	019b      	lsls	r3, r3, #6
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	401a      	ands	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	2303      	movs	r3, #3
 800039c:	4003      	ands	r3, r0
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <NVIC_SetPriority+0xd8>)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	501a      	str	r2, [r3, r0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	210f      	movs	r1, #15
 8000418:	187b      	adds	r3, r7, r1
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b25b      	sxtb	r3, r3
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff5d 	bl	80002e8 <NVIC_SetPriority>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffbf 	bl	80003c4 <SysTick_Config>
 8000446:	0003      	movs	r3, r0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	e14f      	b.n	8000708 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	4091      	lsls	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d100      	bne.n	8000480 <HAL_GPIO_Init+0x30>
 800047e:	e140      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d003      	beq.n	8000490 <HAL_GPIO_Init+0x40>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b12      	cmp	r3, #18
 800048e:	d123      	bne.n	80004d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	08da      	lsrs	r2, r3, #3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2207      	movs	r2, #7
 80004a2:	4013      	ands	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	220f      	movs	r2, #15
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	691a      	ldr	r2, [r3, #16]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2107      	movs	r1, #7
 80004bc:	400b      	ands	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	6939      	ldr	r1, [r7, #16]
 80004d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2203      	movs	r2, #3
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2203      	movs	r2, #3
 80004f6:	401a      	ands	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00b      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d007      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	2b11      	cmp	r3, #17
 8000522:	d003      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b12      	cmp	r3, #18
 800052a:	d130      	bne.n	800058e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	43da      	mvns	r2, r3
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000562:	2201      	movs	r2, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
 800056a:	43da      	mvns	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	2201      	movs	r2, #1
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4313      	orrs	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	43da      	mvns	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	4013      	ands	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <HAL_GPIO_Init+0x17c>
 80005ca:	e09a      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005cc:	4b54      	ldr	r3, [pc, #336]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4b53      	ldr	r3, [pc, #332]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	4b51      	ldr	r3, [pc, #324]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e4:	4a4f      	ldr	r2, [pc, #316]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	589b      	ldr	r3, [r3, r2]
 80005f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2203      	movs	r2, #3
 80005f6:	4013      	ands	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	43da      	mvns	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	429a      	cmp	r2, r3
 8000610:	d013      	beq.n	800063a <HAL_GPIO_Init+0x1ea>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <HAL_GPIO_Init+0x2d8>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d00d      	beq.n	8000636 <HAL_GPIO_Init+0x1e6>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a43      	ldr	r2, [pc, #268]	; (800072c <HAL_GPIO_Init+0x2dc>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d007      	beq.n	8000632 <HAL_GPIO_Init+0x1e2>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_GPIO_Init+0x1de>
 800062a:	2303      	movs	r3, #3
 800062c:	e006      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800062e:	2305      	movs	r3, #5
 8000630:	e004      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000632:	2302      	movs	r3, #2
 8000634:	e002      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800063a:	2300      	movs	r3, #0
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	2103      	movs	r1, #3
 8000640:	400a      	ands	r2, r1
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	4093      	lsls	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4313      	orrs	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800064c:	4935      	ldr	r1, [pc, #212]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	3302      	adds	r3, #2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	43da      	mvns	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	4013      	ands	r3, r2
 8000674:	d003      	beq.n	800067e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	43da      	mvns	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	43da      	mvns	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	035b      	lsls	r3, r3, #13
 80006c6:	4013      	ands	r3, r2
 80006c8:	d003      	beq.n	80006d2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	43da      	mvns	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	039b      	lsls	r3, r3, #14
 80006f0:	4013      	ands	r3, r2
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	40da      	lsrs	r2, r3
 8000710:	1e13      	subs	r3, r2, #0
 8000712:	d000      	beq.n	8000716 <HAL_GPIO_Init+0x2c6>
 8000714:	e6a8      	b.n	8000468 <HAL_GPIO_Init+0x18>
  } 
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b006      	add	sp, #24
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800
 8000730:	48000c00 	.word	0x48000c00
 8000734:	40010400 	.word	0x40010400

08000738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	0008      	movs	r0, r1
 8000742:	0011      	movs	r1, r2
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	1c7b      	adds	r3, r7, #1
 800074c:	1c0a      	adds	r2, r1, #0
 800074e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000750:	1c7b      	adds	r3, r7, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000760:	e003      	b.n	800076a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000762:	1cbb      	adds	r3, r7, #2
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	000a      	movs	r2, r1
 800077c:	1cbb      	adds	r3, r7, #2
 800077e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	1cbb      	adds	r3, r7, #2
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	405a      	eors	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	615a      	str	r2, [r3, #20]
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	d100      	bne.n	80007b0 <HAL_RCC_OscConfig+0x18>
 80007ae:	e08d      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b0:	4bc3      	ldr	r3, [pc, #780]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	220c      	movs	r2, #12
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d00e      	beq.n	80007da <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007bc:	4bc0      	ldr	r3, [pc, #768]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	220c      	movs	r2, #12
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d116      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
 80007c8:	4bbd      	ldr	r3, [pc, #756]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	401a      	ands	r2, r3
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	025b      	lsls	r3, r3, #9
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d10d      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007da:	4bb9      	ldr	r3, [pc, #740]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	4013      	ands	r3, r2
 80007e4:	d100      	bne.n	80007e8 <HAL_RCC_OscConfig+0x50>
 80007e6:	e070      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d000      	beq.n	80007f2 <HAL_RCC_OscConfig+0x5a>
 80007f0:	e06b      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e2b6      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d107      	bne.n	800080e <HAL_RCC_OscConfig+0x76>
 80007fe:	4bb0      	ldr	r3, [pc, #704]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4baf      	ldr	r3, [pc, #700]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0249      	lsls	r1, r1, #9
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e02f      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10c      	bne.n	8000830 <HAL_RCC_OscConfig+0x98>
 8000816:	4baa      	ldr	r3, [pc, #680]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4ba9      	ldr	r3, [pc, #676]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800081c:	49a9      	ldr	r1, [pc, #676]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800081e:	400a      	ands	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	4ba7      	ldr	r3, [pc, #668]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4ba6      	ldr	r3, [pc, #664]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000828:	49a7      	ldr	r1, [pc, #668]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800082a:	400a      	ands	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e01e      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d10e      	bne.n	8000856 <HAL_RCC_OscConfig+0xbe>
 8000838:	4ba1      	ldr	r3, [pc, #644]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4ba0      	ldr	r3, [pc, #640]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	02c9      	lsls	r1, r1, #11
 8000842:	430a      	orrs	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b9d      	ldr	r3, [pc, #628]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0249      	lsls	r1, r1, #9
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e00b      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b99      	ldr	r3, [pc, #612]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800085c:	4999      	ldr	r1, [pc, #612]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800085e:	400a      	ands	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000868:	4997      	ldr	r1, [pc, #604]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800086a:	400a      	ands	r2, r1
 800086c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d014      	beq.n	80008a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000876:	f7ff fd0f 	bl	8000298 <HAL_GetTick>
 800087a:	0003      	movs	r3, r0
 800087c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fd0a 	bl	8000298 <HAL_GetTick>
 8000884:	0002      	movs	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e268      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	029b      	lsls	r3, r3, #10
 800089a:	4013      	ands	r3, r2
 800089c:	d0f0      	beq.n	8000880 <HAL_RCC_OscConfig+0xe8>
 800089e:	e015      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcfa 	bl	8000298 <HAL_GetTick>
 80008a4:	0003      	movs	r3, r0
 80008a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a8:	e008      	b.n	80008bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fcf5 	bl	8000298 <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d901      	bls.n	80008bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e253      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008bc:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	029b      	lsls	r3, r3, #10
 80008c4:	4013      	ands	r3, r2
 80008c6:	d1f0      	bne.n	80008aa <HAL_RCC_OscConfig+0x112>
 80008c8:	e000      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	4013      	ands	r3, r2
 80008d4:	d100      	bne.n	80008d8 <HAL_RCC_OscConfig+0x140>
 80008d6:	e069      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008d8:	4b79      	ldr	r3, [pc, #484]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	220c      	movs	r2, #12
 80008de:	4013      	ands	r3, r2
 80008e0:	d00b      	beq.n	80008fa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	220c      	movs	r2, #12
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d11c      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	4013      	ands	r3, r2
 80008f8:	d116      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	d005      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d001      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e229      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000910:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	22f8      	movs	r2, #248	; 0xf8
 8000916:	4393      	bics	r3, r2
 8000918:	0019      	movs	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000926:	e041      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d024      	beq.n	800097a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093c:	f7ff fcac 	bl	8000298 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	e008      	b.n	8000958 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000946:	f7ff fca7 	bl	8000298 <HAL_GetTick>
 800094a:	0002      	movs	r2, r0
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d901      	bls.n	8000958 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e205      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2202      	movs	r2, #2
 800095e:	4013      	ands	r3, r2
 8000960:	d0f1      	beq.n	8000946 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	22f8      	movs	r2, #248	; 0xf8
 8000968:	4393      	bics	r3, r2
 800096a:	0019      	movs	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	00da      	lsls	r2, r3, #3
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e018      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000980:	2101      	movs	r1, #1
 8000982:	438a      	bics	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000986:	f7ff fc87 	bl	8000298 <HAL_GetTick>
 800098a:	0003      	movs	r3, r0
 800098c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc82 	bl	8000298 <HAL_GetTick>
 8000994:	0002      	movs	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e1e0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	d1f1      	bne.n	8000990 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2208      	movs	r2, #8
 80009b2:	4013      	ands	r3, r2
 80009b4:	d036      	beq.n	8000a24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ca:	f7ff fc65 	bl	8000298 <HAL_GetTick>
 80009ce:	0003      	movs	r3, r0
 80009d0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d2:	e008      	b.n	80009e6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d4:	f7ff fc60 	bl	8000298 <HAL_GetTick>
 80009d8:	0002      	movs	r2, r0
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d901      	bls.n	80009e6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e1be      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	d0f1      	beq.n	80009d4 <HAL_RCC_OscConfig+0x23c>
 80009f0:	e018      	b.n	8000a24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	438a      	bics	r2, r1
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fc4b 	bl	8000298 <HAL_GetTick>
 8000a02:	0003      	movs	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fc46 	bl	8000298 <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e1a4      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	d1f1      	bne.n	8000a08 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0x298>
 8000a2e:	e0b5      	b.n	8000b9c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a30:	2317      	movs	r3, #23
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	d111      	bne.n	8000a68 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0549      	lsls	r1, r1, #21
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	d11a      	bne.n	8000aaa <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0049      	lsls	r1, r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fc09 	bl	8000298 <HAL_GetTick>
 8000a86:	0003      	movs	r3, r0
 8000a88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	e008      	b.n	8000a9e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8c:	f7ff fc04 	bl	8000298 <HAL_GetTick>
 8000a90:	0002      	movs	r2, r0
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b64      	cmp	r3, #100	; 0x64
 8000a98:	d901      	bls.n	8000a9e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e162      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d0f0      	beq.n	8000a8c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10e      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x338>
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab4:	6a1a      	ldr	r2, [r3, #32]
 8000ab6:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	e035      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	fffeffff 	.word	0xfffeffff
 8000ac8:	fffbffff 	.word	0xfffbffff
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10c      	bne.n	8000af2 <HAL_RCC_OscConfig+0x35a>
 8000ad8:	4ba4      	ldr	r3, [pc, #656]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	4ba3      	ldr	r3, [pc, #652]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	438a      	bics	r2, r1
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ae6:	6a1a      	ldr	r2, [r3, #32]
 8000ae8:	4ba0      	ldr	r3, [pc, #640]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000aea:	2104      	movs	r1, #4
 8000aec:	438a      	bics	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	e01c      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d10c      	bne.n	8000b14 <HAL_RCC_OscConfig+0x37c>
 8000afa:	4b9c      	ldr	r3, [pc, #624]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4b99      	ldr	r3, [pc, #612]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b08:	6a1a      	ldr	r2, [r3, #32]
 8000b0a:	4b98      	ldr	r3, [pc, #608]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	621a      	str	r2, [r3, #32]
 8000b12:	e00b      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000b14:	4b95      	ldr	r3, [pc, #596]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b16:	6a1a      	ldr	r2, [r3, #32]
 8000b18:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b22:	6a1a      	ldr	r2, [r3, #32]
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b26:	2104      	movs	r1, #4
 8000b28:	438a      	bics	r2, r1
 8000b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b34:	f7ff fbb0 	bl	8000298 <HAL_GetTick>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	e009      	b.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbab 	bl	8000298 <HAL_GetTick>
 8000b42:	0002      	movs	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	4a89      	ldr	r2, [pc, #548]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e108      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	2202      	movs	r2, #2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d0f0      	beq.n	8000b3e <HAL_RCC_OscConfig+0x3a6>
 8000b5c:	e013      	b.n	8000b86 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fb9b 	bl	8000298 <HAL_GetTick>
 8000b62:	0003      	movs	r3, r0
 8000b64:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b66:	e009      	b.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4a7f      	ldr	r2, [pc, #508]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e0f3      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7c:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	2202      	movs	r2, #2
 8000b82:	4013      	ands	r3, r2
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b96:	4977      	ldr	r1, [pc, #476]	; (8000d74 <HAL_RCC_OscConfig+0x5dc>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d063      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12a      	bne.n	8000c04 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb2:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbe:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bd0:	f7ff fb62 	bl	8000298 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e0c0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000be2:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0f1      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	22f8      	movs	r2, #248	; 0xf8
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	e034      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	d111      	bne.n	8000c30 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c12:	2104      	movs	r1, #4
 8000c14:	438a      	bics	r2, r1
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c18:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	22f8      	movs	r2, #248	; 0xf8
 8000c1e:	4393      	bics	r3, r2
 8000c20:	0019      	movs	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	00da      	lsls	r2, r3, #3
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2e:	e01e      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c36:	2104      	movs	r1, #4
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	438a      	bics	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c48:	f7ff fb26 	bl	8000298 <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c52:	f7ff fb21 	bl	8000298 <HAL_GetTick>
 8000c56:	0002      	movs	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e07f      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d1f1      	bne.n	8000c52 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4e0>
 8000c76:	e074      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x4ee>
 8000c84:	e06b      	b.n	8000d5e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d14c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c94:	4938      	ldr	r1, [pc, #224]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fafd 	bl	8000298 <HAL_GetTick>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca4:	f7ff faf8 	bl	8000298 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e056      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	049b      	lsls	r3, r3, #18
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	4393      	bics	r3, r2
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_RCC_OscConfig+0x5e4>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cec:	430a      	orrs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0449      	lsls	r1, r1, #17
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff facb 	bl	8000298 <HAL_GetTick>
 8000d02:	0003      	movs	r3, r0
 8000d04:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d08:	f7ff fac6 	bl	8000298 <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e024      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	049b      	lsls	r3, r3, #18
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x570>
 8000d26:	e01c      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2e:	4912      	ldr	r1, [pc, #72]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fab0 	bl	8000298 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d3e:	f7ff faab 	bl	8000298 <HAL_GetTick>
 8000d42:	0002      	movs	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e009      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	049b      	lsls	r3, r3, #18
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5a6>
 8000d5c:	e001      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	00001388 	.word	0x00001388
 8000d74:	efffffff 	.word	0xefffffff
 8000d78:	feffffff 	.word	0xfeffffff
 8000d7c:	ffc2ffff 	.word	0xffc2ffff

08000d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d8e:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d911      	bls.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9c:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4393      	bics	r3, r2
 8000da4:	0019      	movs	r1, r3
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dae:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0b6      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d009      	beq.n	8000dde <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dca:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	22f0      	movs	r2, #240	; 0xf0
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_ClockConfig+0x6a>
 8000de8:	e067      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d114      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e095      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d107      	bne.n	8000e1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	049b      	lsls	r3, r3, #18
 8000e12:	4013      	ands	r3, r2
 8000e14:	d108      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e089      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1a:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e082      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e3c:	f7ff fa2c 	bl	8000298 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d111      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	e009      	b.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff fa23 	bl	8000298 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4a39      	ldr	r2, [pc, #228]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e065      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	220c      	movs	r2, #12
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d1ef      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xce>
 8000e6e:	e024      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d11b      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e78:	e009      	b.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f7ff fa0d 	bl	8000298 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e04f      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d1ef      	bne.n	8000e7a <HAL_RCC_ClockConfig+0xfa>
 8000e9a:	e00e      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9c:	f7ff f9fc 	bl	8000298 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e03e      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d211      	bcs.n	8000eec <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4393      	bics	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d001      	beq.n	8000eec <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d009      	beq.n	8000f0a <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_RCC_ClockConfig+0x1c4>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f0a:	f000 f821 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8000f0e:	0001      	movs	r1, r0
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	220f      	movs	r2, #15
 8000f18:	4013      	ands	r3, r2
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_RCC_ClockConfig+0x1c8>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	000a      	movs	r2, r1
 8000f20:	40da      	lsrs	r2, r3
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_ClockConfig+0x1cc>)
 8000f24:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff f98e 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00001388 	.word	0x00001388
 8000f44:	fffff8ff 	.word	0xfffff8ff
 8000f48:	08003950 	.word	0x08003950
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08f      	sub	sp, #60	; 0x3c
 8000f54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f56:	2314      	movs	r3, #20
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f5e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d002      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0x4a>
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d003      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x50>
 8000f98:	e02d      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f9e:	e02d      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2214      	movs	r2, #20
 8000faa:	18ba      	adds	r2, r7, r2
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d009      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fcc:	f7ff f89c 	bl	8000108 <__udivsi3>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4353      	muls	r3, r2
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fda:	e009      	b.n	8000ff0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fde:	000a      	movs	r2, r1
 8000fe0:	0152      	lsls	r2, r2, #5
 8000fe2:	1a52      	subs	r2, r2, r1
 8000fe4:	0193      	lsls	r3, r2, #6
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	185b      	adds	r3, r3, r1
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ff4:	e002      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ffa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b00f      	add	sp, #60	; 0x3c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	08002b94 	.word	0x08002b94
 800100c:	08002ba4 	.word	0x08002ba4
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200

08001018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_RCC_GetHCLKFreq+0x10>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001030:	f7ff fff2 	bl	8001018 <HAL_RCC_GetHCLKFreq>
 8001034:	0001      	movs	r1, r0
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	2207      	movs	r2, #7
 800103e:	4013      	ands	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	40d9      	lsrs	r1, r3
 8001046:	000b      	movs	r3, r1
}    
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40021000 	.word	0x40021000
 8001054:	08003960 	.word	0x08003960

08001058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	4013      	ands	r3, r2
 8001072:	d100      	bne.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001074:	e08f      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2317      	movs	r3, #23
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107e:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	055b      	lsls	r3, r3, #21
 8001086:	4013      	ands	r3, r2
 8001088:	d111      	bne.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b54      	ldr	r3, [pc, #336]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800108c:	69da      	ldr	r2, [r3, #28]
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0549      	lsls	r1, r1, #21
 8001094:	430a      	orrs	r2, r1
 8001096:	61da      	str	r2, [r3, #28]
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	055b      	lsls	r3, r3, #21
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a6:	2317      	movs	r3, #23
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	d11a      	bne.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0049      	lsls	r1, r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c8:	f7ff f8e6 	bl	8000298 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	e008      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d2:	f7ff f8e1 	bl	8000298 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	; 0x64
 80010de:	d901      	bls.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e077      	b.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d034      	beq.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4013      	ands	r3, r2
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d02c      	beq.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800111e:	6a1a      	ldr	r2, [r3, #32]
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	0249      	lsls	r1, r1, #9
 8001126:	430a      	orrs	r2, r1
 8001128:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800112c:	6a1a      	ldr	r2, [r3, #32]
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001130:	492d      	ldr	r1, [pc, #180]	; (80011e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001132:	400a      	ands	r2, r1
 8001134:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff f8a8 	bl	8000298 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	e009      	b.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff f8a3 	bl	8000298 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e038      	b.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0f0      	beq.n	800114e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001172:	4013      	ands	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800117c:	430a      	orrs	r2, r1
 800117e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001180:	2317      	movs	r3, #23
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d105      	bne.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800118c:	69da      	ldr	r2, [r3, #28]
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001190:	4917      	ldr	r1, [pc, #92]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001192:	400a      	ands	r2, r1
 8001194:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	d009      	beq.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	2203      	movs	r2, #3
 80011a6:	4393      	bics	r3, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	4013      	ands	r3, r2
 80011bc:	d009      	beq.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	2210      	movs	r2, #16
 80011c4:	4393      	bics	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b006      	add	sp, #24
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	fffffcff 	.word	0xfffffcff
 80011e8:	fffeffff 	.word	0xfffeffff
 80011ec:	00001388 	.word	0x00001388
 80011f0:	efffffff 	.word	0xefffffff

080011f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e08a      	b.n	800131c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	225d      	movs	r2, #93	; 0x5d
 8001210:	5c9b      	ldrb	r3, [r3, r2]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	225c      	movs	r2, #92	; 0x5c
 800121c:	2100      	movs	r1, #0
 800121e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	0018      	movs	r0, r3
 8001224:	f001 fb5c 	bl	80028e0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	225d      	movs	r2, #93	; 0x5d
 800122c:	2102      	movs	r1, #2
 800122e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	438a      	bics	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	23e0      	movs	r3, #224	; 0xe0
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	429a      	cmp	r2, r3
 800124a:	d902      	bls.n	8001252 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e002      	b.n	8001258 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	23f0      	movs	r3, #240	; 0xf0
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	429a      	cmp	r2, r3
 8001262:	d008      	beq.n	8001276 <HAL_SPI_Init+0x82>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	23e0      	movs	r3, #224	; 0xe0
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	429a      	cmp	r2, r3
 800126e:	d002      	beq.n	8001276 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	23e0      	movs	r3, #224	; 0xe0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	429a      	cmp	r2, r3
 8001288:	d903      	bls.n	8001292 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	e002      	b.n	8001298 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6999      	ldr	r1, [r3, #24]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	400b      	ands	r3, r1
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	0011      	movs	r1, r2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	2204      	movs	r2, #4
 80012dc:	401a      	ands	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	0011      	movs	r1, r2
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4907      	ldr	r1, [pc, #28]	; (8001324 <HAL_SPI_Init+0x130>)
 8001308:	400a      	ands	r2, r1
 800130a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	225d      	movs	r2, #93	; 0x5d
 8001316:	2101      	movs	r1, #1
 8001318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}
 8001324:	fffff7ff 	.word	0xfffff7ff

08001328 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	1dbb      	adds	r3, r7, #6
 8001336:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800133c:	231f      	movs	r3, #31
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	225c      	movs	r2, #92	; 0x5c
 8001348:	5c9b      	ldrb	r3, [r3, r2]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_SPI_Transmit+0x2a>
 800134e:	2302      	movs	r3, #2
 8001350:	e14f      	b.n	80015f2 <HAL_SPI_Transmit+0x2ca>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	225c      	movs	r2, #92	; 0x5c
 8001356:	2101      	movs	r1, #1
 8001358:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800135a:	f7fe ff9d 	bl	8000298 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	225d      	movs	r2, #93	; 0x5d
 8001366:	5c9b      	ldrb	r3, [r3, r2]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d004      	beq.n	8001378 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 800136e:	231f      	movs	r3, #31
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
    goto error;
 8001376:	e131      	b.n	80015dc <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_SPI_Transmit+0x5e>
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d104      	bne.n	8001390 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8001386:	231f      	movs	r3, #31
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
    goto error;
 800138e:	e125      	b.n	80015dc <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	225d      	movs	r2, #93	; 0x5d
 8001394:	2103      	movs	r1, #3
 8001396:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1dba      	adds	r2, r7, #6
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1dba      	adds	r2, r7, #6
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2244      	movs	r2, #68	; 0x44
 80013be:	2100      	movs	r1, #0
 80013c0:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2246      	movs	r2, #70	; 0x46
 80013c6:	2100      	movs	r1, #0
 80013c8:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	429a      	cmp	r2, r3
 80013e0:	d108      	bne.n	80013f4 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	01c9      	lsls	r1, r1, #7
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b40      	cmp	r3, #64	; 0x40
 8001400:	d007      	beq.n	8001412 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	23e0      	movs	r3, #224	; 0xe0
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	429a      	cmp	r2, r3
 800141c:	d948      	bls.n	80014b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_SPI_Transmit+0x108>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d139      	bne.n	80014a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3302      	adds	r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800144e:	e029      	b.n	80014a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d10f      	bne.n	800147e <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3302      	adds	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001472:	b29b      	uxth	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800147c:	e012      	b.n	80014a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <HAL_SPI_Transmit+0x172>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	d00c      	beq.n	80014a4 <HAL_SPI_Transmit+0x17c>
 800148a:	f7fe ff05 	bl	8000298 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d804      	bhi.n	80014a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800149a:	231f      	movs	r3, #31
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80014a2:	e09b      	b.n	80015dc <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1d0      	bne.n	8001450 <HAL_SPI_Transmit+0x128>
 80014ae:	e071      	b.n	8001594 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_SPI_Transmit+0x19a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d163      	bne.n	800158a <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d90f      	bls.n	80014ec <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3302      	adds	r3, #2
 80014da:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b02      	subs	r3, #2
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80014ea:	e04e      	b.n	800158a <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	320c      	adds	r2, #12
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800150a:	e03e      	b.n	800158a <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2202      	movs	r2, #2
 8001514:	4013      	ands	r3, r2
 8001516:	2b02      	cmp	r3, #2
 8001518:	d124      	bne.n	8001564 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d90f      	bls.n	8001544 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3302      	adds	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b02      	subs	r3, #2
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001542:	e022      	b.n	800158a <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	320c      	adds	r2, #12
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001562:	e012      	b.n	800158a <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <HAL_SPI_Transmit+0x258>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	d00c      	beq.n	800158a <HAL_SPI_Transmit+0x262>
 8001570:	f7fe fe92 	bl	8000298 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d804      	bhi.n	800158a <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8001580:	231f      	movs	r3, #31
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
          goto error;
 8001588:	e028      	b.n	80015dc <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800158e:	b29b      	uxth	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1bb      	bne.n	800150c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0018      	movs	r0, r3
 800159c:	f000 f916 	bl	80017cc <SPI_EndRxTxTransaction>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d002      	beq.n	80015aa <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10a      	bne.n	80015c8 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 80015d0:	231f      	movs	r3, #31
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e000      	b.n	80015dc <HAL_SPI_Transmit+0x2b4>
  }

error:
 80015da:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	225d      	movs	r2, #93	; 0x5d
 80015e0:	2101      	movs	r1, #1
 80015e2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	225c      	movs	r2, #92	; 0x5c
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80015ec:	231f      	movs	r3, #31
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b008      	add	sp, #32
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800160a:	e050      	b.n	80016ae <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	d04d      	beq.n	80016ae <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8001618:	f7fe fe3e 	bl	8000298 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d842      	bhi.n	80016ae <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	21e0      	movs	r1, #224	; 0xe0
 8001634:	438a      	bics	r2, r1
 8001636:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	2382      	movs	r3, #130	; 0x82
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	429a      	cmp	r2, r3
 8001642:	d113      	bne.n	800166c <SPI_WaitFlagStateUntilTimeout+0x70>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	429a      	cmp	r2, r3
 800164e:	d005      	beq.n	800165c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	438a      	bics	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	019b      	lsls	r3, r3, #6
 8001674:	429a      	cmp	r2, r3
 8001676:	d110      	bne.n	800169a <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4914      	ldr	r1, [pc, #80]	; (80016d4 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8001684:	400a      	ands	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0189      	lsls	r1, r1, #6
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	225d      	movs	r2, #93	; 0x5d
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	225c      	movs	r2, #92	; 0x5c
 80016a6:	2100      	movs	r1, #0
 80016a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e00e      	b.n	80016cc <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4013      	ands	r3, r2
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d101      	bne.n	80016c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80016c2:	2300      	movs	r3, #0
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d1a0      	bne.n	800160c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	ffffdfff 	.word	0xffffdfff

080016d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80016e6:	e062      	b.n	80017ae <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	23c0      	movs	r3, #192	; 0xc0
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d10c      	bne.n	800170c <SPI_WaitFifoStateUntilTimeout+0x34>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	330c      	adds	r3, #12
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	2117      	movs	r1, #23
 8001704:	187b      	adds	r3, r7, r1
 8001706:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001708:	187b      	adds	r3, r7, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	d04d      	beq.n	80017ae <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <SPI_WaitFifoStateUntilTimeout+0x50>
 8001718:	f7fe fdbe 	bl	8000298 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d842      	bhi.n	80017ae <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	21e0      	movs	r1, #224	; 0xe0
 8001734:	438a      	bics	r2, r1
 8001736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	2382      	movs	r3, #130	; 0x82
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	429a      	cmp	r2, r3
 8001742:	d113      	bne.n	800176c <SPI_WaitFifoStateUntilTimeout+0x94>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	429a      	cmp	r2, r3
 800174e:	d005      	beq.n	800175c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	438a      	bics	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	019b      	lsls	r3, r3, #6
 8001774:	429a      	cmp	r2, r3
 8001776:	d110      	bne.n	800179a <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4911      	ldr	r1, [pc, #68]	; (80017c8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0189      	lsls	r1, r1, #6
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	225d      	movs	r2, #93	; 0x5d
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	225c      	movs	r2, #92	; 0x5c
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e008      	b.n	80017c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d194      	bne.n	80016e8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b006      	add	sp, #24
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	ffffdfff 	.word	0xffffdfff

080017cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	23c0      	movs	r3, #192	; 0xc0
 80017dc:	0159      	lsls	r1, r3, #5
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	0013      	movs	r3, r2
 80017e6:	2200      	movs	r2, #0
 80017e8:	f7ff ff76 	bl	80016d8 <SPI_WaitFifoStateUntilTimeout>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d007      	beq.n	8001800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f4:	2220      	movs	r2, #32
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e027      	b.n	8001850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	0013      	movs	r3, r2
 800180a:	2200      	movs	r2, #0
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	f7ff fef5 	bl	80015fc <SPI_WaitFlagStateUntilTimeout>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d007      	beq.n	8001826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	2220      	movs	r2, #32
 800181c:	431a      	orrs	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e014      	b.n	8001850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	23c0      	movs	r3, #192	; 0xc0
 800182a:	00d9      	lsls	r1, r3, #3
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	0013      	movs	r3, r2
 8001834:	2200      	movs	r2, #0
 8001836:	f7ff ff4f 	bl	80016d8 <SPI_WaitFifoStateUntilTimeout>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d007      	beq.n	800184e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	2220      	movs	r2, #32
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e000      	b.n	8001850 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e047      	b.n	80018fa <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2269      	movs	r2, #105	; 0x69
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2268      	movs	r2, #104	; 0x68
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f001 f879 	bl	8002978 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2269      	movs	r2, #105	; 0x69
 800188a:	2124      	movs	r1, #36	; 0x24
 800188c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	438a      	bics	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f8ff 	bl	8001aa4 <UART_SetConfig>
 80018a6:	0003      	movs	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e024      	b.n	80018fa <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 fa50 	bl	8001d60 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	490e      	ldr	r1, [pc, #56]	; (8001904 <HAL_UART_Init+0xac>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2108      	movs	r1, #8
 80018dc:	438a      	bics	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fae8 	bl	8001ec8 <UART_CheckIdleState>
 80018f8:	0003      	movs	r3, r0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	fffff7ff 	.word	0xfffff7ff

08001908 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	226a      	movs	r2, #106	; 0x6a
 8001920:	5c9b      	ldrb	r3, [r3, r2]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b20      	cmp	r3, #32
 8001926:	d000      	beq.n	800192a <HAL_UART_Receive+0x22>
 8001928:	e0b4      	b.n	8001a94 <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_UART_Receive+0x30>
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0ac      	b.n	8001a96 <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	429a      	cmp	r2, r3
 8001946:	d109      	bne.n	800195c <HAL_UART_Receive+0x54>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d001      	beq.n	800195c <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e09c      	b.n	8001a96 <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2268      	movs	r2, #104	; 0x68
 8001960:	5c9b      	ldrb	r3, [r3, r2]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_UART_Receive+0x62>
 8001966:	2302      	movs	r3, #2
 8001968:	e095      	b.n	8001a96 <HAL_UART_Receive+0x18e>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2268      	movs	r2, #104	; 0x68
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	226a      	movs	r2, #106	; 0x6a
 800197c:	2122      	movs	r1, #34	; 0x22
 800197e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001980:	f7fe fc8a 	bl	8000298 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1dba      	adds	r2, r7, #6
 800198c:	2158      	movs	r1, #88	; 0x58
 800198e:	8812      	ldrh	r2, [r2, #0]
 8001990:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1dba      	adds	r2, r7, #6
 8001996:	215a      	movs	r1, #90	; 0x5a
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10d      	bne.n	80019c4 <HAL_UART_Receive+0xbc>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <HAL_UART_Receive+0xb2>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	225c      	movs	r2, #92	; 0x5c
 80019b4:	493a      	ldr	r1, [pc, #232]	; (8001aa0 <HAL_UART_Receive+0x198>)
 80019b6:	5299      	strh	r1, [r3, r2]
 80019b8:	e015      	b.n	80019e6 <HAL_UART_Receive+0xde>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	225c      	movs	r2, #92	; 0x5c
 80019be:	21ff      	movs	r1, #255	; 0xff
 80019c0:	5299      	strh	r1, [r3, r2]
 80019c2:	e010      	b.n	80019e6 <HAL_UART_Receive+0xde>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10c      	bne.n	80019e6 <HAL_UART_Receive+0xde>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <HAL_UART_Receive+0xd6>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	225c      	movs	r2, #92	; 0x5c
 80019d8:	21ff      	movs	r1, #255	; 0xff
 80019da:	5299      	strh	r1, [r3, r2]
 80019dc:	e003      	b.n	80019e6 <HAL_UART_Receive+0xde>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	225c      	movs	r2, #92	; 0x5c
 80019e2:	217f      	movs	r1, #127	; 0x7f
 80019e4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80019e6:	231a      	movs	r3, #26
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	215c      	movs	r1, #92	; 0x5c
 80019ee:	5a52      	ldrh	r2, [r2, r1]
 80019f0:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80019f2:	e03f      	b.n	8001a74 <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	225a      	movs	r2, #90	; 0x5a
 80019f8:	5a9b      	ldrh	r3, [r3, r2]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b299      	uxth	r1, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	225a      	movs	r2, #90	; 0x5a
 8001a04:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	0013      	movs	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	2120      	movs	r1, #32
 8001a14:	f000 fa70 	bl	8001ef8 <UART_WaitOnFlagUntilTimeout>
 8001a18:	1e03      	subs	r3, r0, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e03a      	b.n	8001a96 <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d114      	bne.n	8001a56 <HAL_UART_Receive+0x14e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d110      	bne.n	8001a56 <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	221a      	movs	r2, #26
 8001a42:	18ba      	adds	r2, r7, r2
 8001a44:	8812      	ldrh	r2, [r2, #0]
 8001a46:	4013      	ands	r3, r2
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3302      	adds	r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	e00e      	b.n	8001a74 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	231a      	movs	r3, #26
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b2d9      	uxtb	r1, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c58      	adds	r0, r3, #1
 8001a6c:	60b8      	str	r0, [r7, #8]
 8001a6e:	400a      	ands	r2, r1
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	225a      	movs	r2, #90	; 0x5a
 8001a78:	5a9b      	ldrh	r3, [r3, r2]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1b9      	bne.n	80019f4 <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	226a      	movs	r2, #106	; 0x6a
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2268      	movs	r2, #104	; 0x68
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 8001a94:	2302      	movs	r3, #2
  }
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b008      	add	sp, #32
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000001ff 	.word	0x000001ff

08001aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2200      	movs	r2, #0
 8001abe:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ac8:	2313      	movs	r3, #19
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <UART_SetConfig+0x2a4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a91      	ldr	r2, [pc, #580]	; (8001d4c <UART_SetConfig+0x2a8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a89      	ldr	r2, [pc, #548]	; (8001d50 <UART_SetConfig+0x2ac>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <UART_SetConfig+0x2b0>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d00f      	beq.n	8001b64 <UART_SetConfig+0xc0>
 8001b44:	d304      	bcc.n	8001b50 <UART_SetConfig+0xac>
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d011      	beq.n	8001b6e <UART_SetConfig+0xca>
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d005      	beq.n	8001b5a <UART_SetConfig+0xb6>
 8001b4e:	e013      	b.n	8001b78 <UART_SetConfig+0xd4>
 8001b50:	2317      	movs	r3, #23
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e012      	b.n	8001b80 <UART_SetConfig+0xdc>
 8001b5a:	2317      	movs	r3, #23
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e00d      	b.n	8001b80 <UART_SetConfig+0xdc>
 8001b64:	2317      	movs	r3, #23
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	2204      	movs	r2, #4
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e008      	b.n	8001b80 <UART_SetConfig+0xdc>
 8001b6e:	2317      	movs	r3, #23
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2208      	movs	r2, #8
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e003      	b.n	8001b80 <UART_SetConfig+0xdc>
 8001b78:	2317      	movs	r3, #23
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d000      	beq.n	8001b90 <UART_SetConfig+0xec>
 8001b8e:	e077      	b.n	8001c80 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8001b90:	2317      	movs	r3, #23
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d01c      	beq.n	8001bd4 <UART_SetConfig+0x130>
 8001b9a:	dc02      	bgt.n	8001ba2 <UART_SetConfig+0xfe>
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <UART_SetConfig+0x108>
 8001ba0:	e04f      	b.n	8001c42 <UART_SetConfig+0x19e>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d027      	beq.n	8001bf6 <UART_SetConfig+0x152>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d039      	beq.n	8001c1e <UART_SetConfig+0x17a>
 8001baa:	e04a      	b.n	8001c42 <UART_SetConfig+0x19e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bac:	f7ff fa3e 	bl	800102c <HAL_RCC_GetPCLK1Freq>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	005a      	lsls	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	f7fe faa0 	bl	8000108 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	001a      	movs	r2, r3
 8001bcc:	2314      	movs	r3, #20
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	801a      	strh	r2, [r3, #0]
        break;
 8001bd2:	e03b      	b.n	8001c4c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	4a5f      	ldr	r2, [pc, #380]	; (8001d58 <UART_SetConfig+0x2b4>)
 8001bdc:	189a      	adds	r2, r3, r2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0019      	movs	r1, r3
 8001be4:	0010      	movs	r0, r2
 8001be6:	f7fe fa8f 	bl	8000108 <__udivsi3>
 8001bea:	0003      	movs	r3, r0
 8001bec:	001a      	movs	r2, r3
 8001bee:	2314      	movs	r3, #20
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	801a      	strh	r2, [r3, #0]
        break;
 8001bf4:	e02a      	b.n	8001c4c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bf6:	f7ff f9ab 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	005a      	lsls	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	18d2      	adds	r2, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	0010      	movs	r0, r2
 8001c0e:	f7fe fa7b 	bl	8000108 <__udivsi3>
 8001c12:	0003      	movs	r3, r0
 8001c14:	001a      	movs	r2, r3
 8001c16:	2314      	movs	r3, #20
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	801a      	strh	r2, [r3, #0]
        break;
 8001c1c:	e016      	b.n	8001c4c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0252      	lsls	r2, r2, #9
 8001c28:	189a      	adds	r2, r3, r2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f7fe fa69 	bl	8000108 <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2314      	movs	r3, #20
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	801a      	strh	r2, [r3, #0]
        break;
 8001c40:	e004      	b.n	8001c4c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c42:	2313      	movs	r3, #19
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
        break;
 8001c4a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001c4c:	200a      	movs	r0, #10
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	2414      	movs	r4, #20
 8001c52:	193a      	adds	r2, r7, r4
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	210f      	movs	r1, #15
 8001c58:	438a      	bics	r2, r1
 8001c5a:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	105b      	asrs	r3, r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2207      	movs	r2, #7
 8001c66:	4013      	ands	r3, r2
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	183a      	adds	r2, r7, r0
 8001c6e:	8812      	ldrh	r2, [r2, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	183a      	adds	r2, r7, r0
 8001c7a:	8812      	ldrh	r2, [r2, #0]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e05b      	b.n	8001d38 <UART_SetConfig+0x294>
  }
  else
  {
    switch (clocksource)
 8001c80:	2317      	movs	r3, #23
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d01b      	beq.n	8001cc2 <UART_SetConfig+0x21e>
 8001c8a:	dc02      	bgt.n	8001c92 <UART_SetConfig+0x1ee>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <UART_SetConfig+0x1f8>
 8001c90:	e04d      	b.n	8001d2e <UART_SetConfig+0x28a>
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d026      	beq.n	8001ce4 <UART_SetConfig+0x240>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d037      	beq.n	8001d0a <UART_SetConfig+0x266>
 8001c9a:	e048      	b.n	8001d2e <UART_SetConfig+0x28a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c9c:	f7ff f9c6 	bl	800102c <HAL_RCC_GetPCLK1Freq>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	18d2      	adds	r2, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	f7fe fa29 	bl	8000108 <__udivsi3>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60da      	str	r2, [r3, #12]
        break;
 8001cc0:	e03a      	b.n	8001d38 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <UART_SetConfig+0x2b8>)
 8001cca:	189a      	adds	r2, r3, r2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	f7fe fa18 	bl	8000108 <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60da      	str	r2, [r3, #12]
        break;
 8001ce2:	e029      	b.n	8001d38 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce4:	f7ff f934 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	18d2      	adds	r2, r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	f7fe fa05 	bl	8000108 <__udivsi3>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60da      	str	r2, [r3, #12]
        break;
 8001d08:	e016      	b.n	8001d38 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	0212      	lsls	r2, r2, #8
 8001d14:	189a      	adds	r2, r3, r2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7fe f9f3 	bl	8000108 <__udivsi3>
 8001d22:	0003      	movs	r3, r0
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60da      	str	r2, [r3, #12]
        break;
 8001d2c:	e004      	b.n	8001d38 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d2e:	2313      	movs	r3, #19
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
        break;
 8001d36:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001d38:	2313      	movs	r3, #19
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]

}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b007      	add	sp, #28
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	ffff69f3 	.word	0xffff69f3
 8001d4c:	ffffcfff 	.word	0xffffcfff
 8001d50:	fffff4ff 	.word	0xfffff4ff
 8001d54:	40021000 	.word	0x40021000
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d00b      	beq.n	8001d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <UART_AdvFeatureConfig+0x144>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d00b      	beq.n	8001dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a43      	ldr	r2, [pc, #268]	; (8001ea8 <UART_AdvFeatureConfig+0x148>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2204      	movs	r2, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	d00b      	beq.n	8001dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <UART_AdvFeatureConfig+0x14c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d00b      	beq.n	8001df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <UART_AdvFeatureConfig+0x150>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2210      	movs	r2, #16
 8001df6:	4013      	ands	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <UART_AdvFeatureConfig+0x154>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d00b      	beq.n	8001e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <UART_AdvFeatureConfig+0x158>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d01d      	beq.n	8001e7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <UART_AdvFeatureConfig+0x15c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	035b      	lsls	r3, r3, #13
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10b      	bne.n	8001e7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <UART_AdvFeatureConfig+0x160>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	4013      	ands	r3, r2
 8001e82:	d00b      	beq.n	8001e9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <UART_AdvFeatureConfig+0x164>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
  }
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	fffdffff 	.word	0xfffdffff
 8001ea8:	fffeffff 	.word	0xfffeffff
 8001eac:	fffbffff 	.word	0xfffbffff
 8001eb0:	ffff7fff 	.word	0xffff7fff
 8001eb4:	ffffefff 	.word	0xffffefff
 8001eb8:	ffffdfff 	.word	0xffffdfff
 8001ebc:	ffefffff 	.word	0xffefffff
 8001ec0:	ff9fffff 	.word	0xff9fffff
 8001ec4:	fff7ffff 	.word	0xfff7ffff

08001ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2269      	movs	r2, #105	; 0x69
 8001eda:	2120      	movs	r1, #32
 8001edc:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	226a      	movs	r2, #106	; 0x6a
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2268      	movs	r2, #104	; 0x68
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f08:	e02b      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	d028      	beq.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001f16:	f7fe f9bf 	bl	8000298 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d21d      	bcs.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <UART_WaitOnFlagUntilTimeout+0x94>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	438a      	bics	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2269      	movs	r2, #105	; 0x69
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	226a      	movs	r2, #106	; 0x6a
 8001f52:	2120      	movs	r1, #32
 8001f54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2268      	movs	r2, #104	; 0x68
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e00f      	b.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	425a      	negs	r2, r3
 8001f72:	4153      	adcs	r3, r2
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	001a      	movs	r2, r3
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d0c4      	beq.n	8001f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	fffffe5f 	.word	0xfffffe5f

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	46c6      	mov	lr, r8
 8001f94:	b500      	push	{lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t len_gps = 82;
 8001f9a:	200c      	movs	r0, #12
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	469c      	mov	ip, r3
 8001fa2:	44bc      	add	ip, r7
 8001fa4:	4460      	add	r0, ip
 8001fa6:	2352      	movs	r3, #82	; 0x52
 8001fa8:	469c      	mov	ip, r3
 8001faa:	4663      	mov	r3, ip
 8001fac:	8003      	strh	r3, [r0, #0]
	uint8_t buff_gps[len_gps];
 8001fae:	0020      	movs	r0, r4
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	469c      	mov	ip, r3
 8001fb4:	44bc      	add	ip, r7
 8001fb6:	4460      	add	r0, ip
 8001fb8:	8800      	ldrh	r0, [r0, #0]
 8001fba:	4684      	mov	ip, r0
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	4698      	mov	r8, r3
 8001fc2:	44c4      	add	ip, r8
 8001fc4:	4663      	mov	r3, ip
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	60b8      	str	r0, [r7, #8]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	0f5b      	lsrs	r3, r3, #29
 8001fd2:	469c      	mov	ip, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	00da      	lsls	r2, r3, #3
 8001fd8:	4663      	mov	r3, ip
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	00d9      	lsls	r1, r3, #3
 8001fe0:	0005      	movs	r5, r0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	0016      	movs	r6, r2
 8001fe6:	0f6a      	lsrs	r2, r5, #29
 8001fe8:	00f3      	lsls	r3, r6, #3
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	00eb      	lsls	r3, r5, #3
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	3307      	adds	r3, #7
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	466a      	mov	r2, sp
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	469d      	mov	sp, r3
 8002004:	466b      	mov	r3, sp
 8002006:	3300      	adds	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
	uint16_t i=0;
 800200a:	230e      	movs	r3, #14
 800200c:	2210      	movs	r2, #16
 800200e:	4694      	mov	ip, r2
 8002010:	44bc      	add	ip, r7
 8002012:	4463      	add	r3, ip
 8002014:	2200      	movs	r2, #0
 8002016:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002018:	f7fe f902 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201c:	f000 f89a 	bl	8002154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002020:	f000 f95e 	bl	80022e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002024:	f000 f8ee 	bl	8002204 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002028:	f000 f92a 	bl	8002280 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800202c:	f000 fa32 	bl	8002494 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002030:	2000      	movs	r0, #0
 8002032:	f000 fa9d 	bl	8002570 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8002036:	2100      	movs	r1, #0
 8002038:	2000      	movs	r0, #0
 800203a:	f000 fc13 	bl	8002864 <ssd1306_SetCursor>
  ssd1306_WriteString("Hola Lulu", Font_11x18, White);
 800203e:	4a3e      	ldr	r2, [pc, #248]	; (8002138 <main+0x1a8>)
 8002040:	483e      	ldr	r0, [pc, #248]	; (800213c <main+0x1ac>)
 8002042:	2301      	movs	r3, #1
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	6852      	ldr	r2, [r2, #4]
 8002048:	f000 fbe2 	bl	8002810 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 20);
 800204c:	2114      	movs	r1, #20
 800204e:	2000      	movs	r0, #0
 8002050:	f000 fc08 	bl	8002864 <ssd1306_SetCursor>
  ssd1306_WriteString("OLED 10/10", Font_11x18, White);
 8002054:	4a38      	ldr	r2, [pc, #224]	; (8002138 <main+0x1a8>)
 8002056:	483a      	ldr	r0, [pc, #232]	; (8002140 <main+0x1b0>)
 8002058:	2301      	movs	r3, #1
 800205a:	6811      	ldr	r1, [r2, #0]
 800205c:	6852      	ldr	r2, [r2, #4]
 800205e:	f000 fbd7 	bl	8002810 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 40);
 8002062:	2128      	movs	r1, #40	; 0x28
 8002064:	2000      	movs	r0, #0
 8002066:	f000 fbfd 	bl	8002864 <ssd1306_SetCursor>
  ssd1306_WriteString("Hola Pepe", Font_11x18, White);
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <main+0x1a8>)
 800206c:	4835      	ldr	r0, [pc, #212]	; (8002144 <main+0x1b4>)
 800206e:	2301      	movs	r3, #1
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	6852      	ldr	r2, [r2, #4]
 8002074:	f000 fbcc 	bl	8002810 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002078:	f000 fa9e 	bl	80025b8 <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 800207c:	2390      	movs	r3, #144	; 0x90
 800207e:	05db      	lsls	r3, r3, #23
 8002080:	2101      	movs	r1, #1
 8002082:	0018      	movs	r0, r3
 8002084:	f7fe fb75 	bl	8000772 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 8002088:	23fa      	movs	r3, #250	; 0xfa
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	0018      	movs	r0, r3
 800208e:	f7fe f90d 	bl	80002ac <HAL_Delay>

  	  HAL_UART_Receive(&huart1, buff_gps, len_gps, 500);
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	23fa      	movs	r3, #250	; 0xfa
 8002096:	005c      	lsls	r4, r3, #1
 8002098:	230c      	movs	r3, #12
 800209a:	2210      	movs	r2, #16
 800209c:	4694      	mov	ip, r2
 800209e:	44bc      	add	ip, r7
 80020a0:	4463      	add	r3, ip
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	4828      	ldr	r0, [pc, #160]	; (8002148 <main+0x1b8>)
 80020a6:	0023      	movs	r3, r4
 80020a8:	f7ff fc2e 	bl	8001908 <HAL_UART_Receive>

  	  //buff_gps[0] = 'A';
  	  //buff_gps[3] = (uint8_t)'\n';

  	  ssd1306_Fill(Black);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 fa5f 	bl	8002570 <ssd1306_Fill>
  	  ssd1306_SetCursor(0, 0);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 fbd5 	bl	8002864 <ssd1306_SetCursor>
  	  ssd1306_WriteString("GPS: Test1", Font_11x18, White);
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <main+0x1a8>)
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <main+0x1bc>)
 80020be:	2301      	movs	r3, #1
 80020c0:	6811      	ldr	r1, [r2, #0]
 80020c2:	6852      	ldr	r2, [r2, #4]
 80020c4:	f000 fba4 	bl	8002810 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 20);
 80020c8:	2114      	movs	r1, #20
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 fbca 	bl	8002864 <ssd1306_SetCursor>
  	  ssd1306_WriteString("Juan gediento", Font_11x18, White);
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <main+0x1a8>)
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <main+0x1c0>)
 80020d4:	2301      	movs	r3, #1
 80020d6:	6811      	ldr	r1, [r2, #0]
 80020d8:	6852      	ldr	r2, [r2, #4]
 80020da:	f000 fb99 	bl	8002810 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 40);
 80020de:	2128      	movs	r1, #40	; 0x28
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 fbbf 	bl	8002864 <ssd1306_SetCursor>
  	  ssd1306_WriteChar(buff_gps[i], Font_11x18, White);
 80020e6:	210e      	movs	r1, #14
 80020e8:	000c      	movs	r4, r1
 80020ea:	2310      	movs	r3, #16
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	185b      	adds	r3, r3, r1
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	5cd0      	ldrb	r0, [r2, r3]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <main+0x1a8>)
 80020f8:	2301      	movs	r3, #1
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	6852      	ldr	r2, [r2, #4]
 80020fe:	f000 faf7 	bl	80026f0 <ssd1306_WriteChar>
  	  ssd1306_UpdateScreen();
 8002102:	f000 fa59 	bl	80025b8 <ssd1306_UpdateScreen>
  	  i++;
 8002106:	0021      	movs	r1, r4
 8002108:	2310      	movs	r3, #16
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	185b      	adds	r3, r3, r1
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	2310      	movs	r3, #16
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	185b      	adds	r3, r3, r1
 8002116:	3201      	adds	r2, #1
 8002118:	801a      	strh	r2, [r3, #0]
  	  if(i == 82)
 800211a:	2310      	movs	r3, #16
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	185b      	adds	r3, r3, r1
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2b52      	cmp	r3, #82	; 0x52
 8002124:	d1aa      	bne.n	800207c <main+0xec>
  		  i = 0;
 8002126:	230e      	movs	r3, #14
 8002128:	2210      	movs	r2, #16
 800212a:	4694      	mov	ip, r2
 800212c:	44bc      	add	ip, r7
 800212e:	4463      	add	r3, ip
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
  	  HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 8002134:	e7a2      	b.n	800207c <main+0xec>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000000 	.word	0x20000000
 800213c:	08002bb4 	.word	0x08002bb4
 8002140:	08002bc0 	.word	0x08002bc0
 8002144:	08002bcc 	.word	0x08002bcc
 8002148:	20000434 	.word	0x20000434
 800214c:	08002bd8 	.word	0x08002bd8
 8002150:	08002be4 	.word	0x08002be4

08002154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b095      	sub	sp, #84	; 0x54
 8002158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800215a:	2420      	movs	r4, #32
 800215c:	193b      	adds	r3, r7, r4
 800215e:	0018      	movs	r0, r3
 8002160:	2330      	movs	r3, #48	; 0x30
 8002162:	001a      	movs	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	f000 fd01 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800216a:	2310      	movs	r3, #16
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	0018      	movs	r0, r3
 8002170:	2310      	movs	r3, #16
 8002172:	001a      	movs	r2, r3
 8002174:	2100      	movs	r1, #0
 8002176:	f000 fcf9 	bl	8002b6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217a:	003b      	movs	r3, r7
 800217c:	0018      	movs	r0, r3
 800217e:	2310      	movs	r3, #16
 8002180:	001a      	movs	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	f000 fcf2 	bl	8002b6c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002188:	0021      	movs	r1, r4
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002190:	187b      	adds	r3, r7, r1
 8002192:	2201      	movs	r2, #1
 8002194:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2210      	movs	r2, #16
 800219a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe faf7 	bl	8000798 <HAL_RCC_OscConfig>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80021ae:	f000 f8f9 	bl	80023a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	2110      	movs	r1, #16
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	2207      	movs	r2, #7
 80021b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2100      	movs	r1, #0
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fdd5 	bl	8000d80 <HAL_RCC_ClockConfig>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80021da:	f000 f8e3 	bl	80023a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021de:	003b      	movs	r3, r7
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021e4:	003b      	movs	r3, r7
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ea:	003b      	movs	r3, r7
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe ff33 	bl	8001058 <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021f6:	f000 f8d5 	bl	80023a4 <Error_Handler>
  }
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b015      	add	sp, #84	; 0x54
 8002200:	bd90      	pop	{r4, r7, pc}
	...

08002204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <MX_SPI1_Init+0x74>)
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <MX_SPI1_Init+0x78>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_SPI1_Init+0x74>)
 8002210:	2282      	movs	r2, #130	; 0x82
 8002212:	0052      	lsls	r2, r2, #1
 8002214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <MX_SPI1_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI1_Init+0x74>)
 800221e:	22e0      	movs	r2, #224	; 0xe0
 8002220:	00d2      	lsls	r2, r2, #3
 8002222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI1_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_SPI1_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI1_Init+0x74>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI1_Init+0x74>)
 800223a:	2218      	movs	r2, #24
 800223c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI1_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_SPI1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI1_Init+0x74>)
 8002252:	2207      	movs	r2, #7
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_SPI1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI1_Init+0x74>)
 800225e:	2208      	movs	r2, #8
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <MX_SPI1_Init+0x74>)
 8002264:	0018      	movs	r0, r3
 8002266:	f7fe ffc5 	bl	80011f4 <HAL_SPI_Init>
 800226a:	1e03      	subs	r3, r0, #0
 800226c:	d001      	beq.n	8002272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800226e:	f000 f899 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004a4 	.word	0x200004a4
 800227c:	40013000 	.word	0x40013000

08002280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <MX_USART1_UART_Init+0x5c>)
 8002288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 800228c:	2296      	movs	r2, #150	; 0x96
 800228e:	0192      	lsls	r2, r2, #6
 8002290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <MX_USART1_UART_Init+0x58>)
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fac7 	bl	8001858 <HAL_UART_Init>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022ce:	f000 f869 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000434 	.word	0x20000434
 80022dc:	40013800 	.word	0x40013800

080022e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	240c      	movs	r4, #12
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	0018      	movs	r0, r3
 80022ec:	2314      	movs	r3, #20
 80022ee:	001a      	movs	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	f000 fc3b 	bl	8002b6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <MX_GPIO_Init+0xbc>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <MX_GPIO_Init+0xbc>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0289      	lsls	r1, r1, #10
 8002300:	430a      	orrs	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <MX_GPIO_Init+0xbc>)
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <MX_GPIO_Init+0xbc>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <MX_GPIO_Init+0xbc>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	02c9      	lsls	r1, r1, #11
 800231c:	430a      	orrs	r2, r1
 800231e:	615a      	str	r2, [r3, #20]
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <MX_GPIO_Init+0xbc>)
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	02db      	lsls	r3, r3, #11
 8002328:	4013      	ands	r3, r2
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin, GPIO_PIN_RESET);
 800232e:	2390      	movs	r3, #144	; 0x90
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	2200      	movs	r2, #0
 8002334:	2119      	movs	r1, #25
 8002336:	0018      	movs	r0, r3
 8002338:	f7fe f9fe 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_OLED_CS_GPIO_Port, O_OLED_CS_Pin, GPIO_PIN_RESET);
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_GPIO_Init+0xc0>)
 800233e:	2200      	movs	r2, #0
 8002340:	2102      	movs	r1, #2
 8002342:	0018      	movs	r0, r3
 8002344:	f7fe f9f8 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : O_Blinky_Pin O_OLED_DC_Pin O_OLED_RES_Pin */
  GPIO_InitStruct.Pin = O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	2219      	movs	r2, #25
 800234c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	193b      	adds	r3, r7, r4
 8002350:	2201      	movs	r2, #1
 8002352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	193b      	adds	r3, r7, r4
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	193a      	adds	r2, r7, r4
 8002362:	2390      	movs	r3, #144	; 0x90
 8002364:	05db      	lsls	r3, r3, #23
 8002366:	0011      	movs	r1, r2
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe f871 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : O_OLED_CS_Pin */
  GPIO_InitStruct.Pin = O_OLED_CS_Pin;
 800236e:	0021      	movs	r1, r4
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2201      	movs	r2, #1
 800237a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(O_OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8002388:	187b      	adds	r3, r7, r1
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <MX_GPIO_Init+0xc0>)
 800238c:	0019      	movs	r1, r3
 800238e:	0010      	movs	r0, r2
 8002390:	f7fe f85e 	bl	8000450 <HAL_GPIO_Init>

}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b009      	add	sp, #36	; 0x24
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	48000400 	.word	0x48000400

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ssd1306_Reset>:
#include "ssd1306.h"


void ssd1306_Reset(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <ssd1306_Reset+0x40>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	2102      	movs	r1, #2
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7fe f9bc 	bl	8000738 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80023c0:	2390      	movs	r3, #144	; 0x90
 80023c2:	05db      	lsls	r3, r3, #23
 80023c4:	2200      	movs	r2, #0
 80023c6:	2110      	movs	r1, #16
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe f9b5 	bl	8000738 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80023ce:	200a      	movs	r0, #10
 80023d0:	f7fd ff6c 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80023d4:	2390      	movs	r3, #144	; 0x90
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	2201      	movs	r2, #1
 80023da:	2110      	movs	r1, #16
 80023dc:	0018      	movs	r0, r3
 80023de:	f7fe f9ab 	bl	8000738 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80023e2:	200a      	movs	r0, #10
 80023e4:	f7fd ff62 	bl	80002ac <HAL_Delay>
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	48000400 	.word	0x48000400

080023f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <ssd1306_WriteCommand+0x48>)
 8002402:	2200      	movs	r2, #0
 8002404:	2102      	movs	r1, #2
 8002406:	0018      	movs	r0, r3
 8002408:	f7fe f996 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800240c:	2390      	movs	r3, #144	; 0x90
 800240e:	05db      	lsls	r3, r3, #23
 8002410:	2200      	movs	r2, #0
 8002412:	2108      	movs	r1, #8
 8002414:	0018      	movs	r0, r3
 8002416:	f7fe f98f 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800241a:	2301      	movs	r3, #1
 800241c:	425b      	negs	r3, r3
 800241e:	1df9      	adds	r1, r7, #7
 8002420:	4807      	ldr	r0, [pc, #28]	; (8002440 <ssd1306_WriteCommand+0x4c>)
 8002422:	2201      	movs	r2, #1
 8002424:	f7fe ff80 	bl	8001328 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <ssd1306_WriteCommand+0x48>)
 800242a:	2201      	movs	r2, #1
 800242c:	2102      	movs	r1, #2
 800242e:	0018      	movs	r0, r3
 8002430:	f7fe f982 	bl	8000738 <HAL_GPIO_WritePin>
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}
 800243c:	48000400 	.word	0x48000400
 8002440:	200004a4 	.word	0x200004a4

08002444 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <ssd1306_WriteData+0x48>)
 8002450:	2200      	movs	r2, #0
 8002452:	2102      	movs	r1, #2
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe f96f 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800245a:	2390      	movs	r3, #144	; 0x90
 800245c:	05db      	lsls	r3, r3, #23
 800245e:	2201      	movs	r2, #1
 8002460:	2108      	movs	r1, #8
 8002462:	0018      	movs	r0, r3
 8002464:	f7fe f968 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b29a      	uxth	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	425b      	negs	r3, r3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <ssd1306_WriteData+0x4c>)
 8002474:	f7fe ff58 	bl	8001328 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <ssd1306_WriteData+0x48>)
 800247a:	2201      	movs	r2, #1
 800247c:	2102      	movs	r1, #2
 800247e:	0018      	movs	r0, r3
 8002480:	f7fe f95a 	bl	8000738 <HAL_GPIO_WritePin>
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	48000400 	.word	0x48000400
 8002490:	200004a4 	.word	0x200004a4

08002494 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002498:	f7ff ff8a 	bl	80023b0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f7fd ff05 	bl	80002ac <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80024a2:	20ae      	movs	r0, #174	; 0xae
 80024a4:	f7ff ffa6 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80024a8:	2020      	movs	r0, #32
 80024aa:	f7ff ffa3 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80024ae:	2010      	movs	r0, #16
 80024b0:	f7ff ffa0 	bl	80023f4 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024b4:	20b0      	movs	r0, #176	; 0xb0
 80024b6:	f7ff ff9d 	bl	80023f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80024ba:	20c8      	movs	r0, #200	; 0xc8
 80024bc:	f7ff ff9a 	bl	80023f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff ff97 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80024c6:	2010      	movs	r0, #16
 80024c8:	f7ff ff94 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80024cc:	2040      	movs	r0, #64	; 0x40
 80024ce:	f7ff ff91 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80024d2:	2081      	movs	r0, #129	; 0x81
 80024d4:	f7ff ff8e 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80024d8:	20ff      	movs	r0, #255	; 0xff
 80024da:	f7ff ff8b 	bl	80023f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80024de:	20a1      	movs	r0, #161	; 0xa1
 80024e0:	f7ff ff88 	bl	80023f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80024e4:	20a6      	movs	r0, #166	; 0xa6
 80024e6:	f7ff ff85 	bl	80023f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80024ea:	20a8      	movs	r0, #168	; 0xa8
 80024ec:	f7ff ff82 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80024f0:	203f      	movs	r0, #63	; 0x3f
 80024f2:	f7ff ff7f 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024f6:	20a4      	movs	r0, #164	; 0xa4
 80024f8:	f7ff ff7c 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80024fc:	20d3      	movs	r0, #211	; 0xd3
 80024fe:	f7ff ff79 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff ff76 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002508:	20d5      	movs	r0, #213	; 0xd5
 800250a:	f7ff ff73 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800250e:	20f0      	movs	r0, #240	; 0xf0
 8002510:	f7ff ff70 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002514:	20d9      	movs	r0, #217	; 0xd9
 8002516:	f7ff ff6d 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800251a:	2022      	movs	r0, #34	; 0x22
 800251c:	f7ff ff6a 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002520:	20da      	movs	r0, #218	; 0xda
 8002522:	f7ff ff67 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002526:	2012      	movs	r0, #18
 8002528:	f7ff ff64 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800252c:	20db      	movs	r0, #219	; 0xdb
 800252e:	f7ff ff61 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002532:	2020      	movs	r0, #32
 8002534:	f7ff ff5e 	bl	80023f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002538:	208d      	movs	r0, #141	; 0x8d
 800253a:	f7ff ff5b 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800253e:	2014      	movs	r0, #20
 8002540:	f7ff ff58 	bl	80023f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002544:	20af      	movs	r0, #175	; 0xaf
 8002546:	f7ff ff55 	bl	80023f4 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f810 	bl	8002570 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002550:	f000 f832 	bl	80025b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <ssd1306_Init+0xd8>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <ssd1306_Init+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <ssd1306_Init+0xd8>)
 8002562:	2201      	movs	r2, #1
 8002564:	715a      	strb	r2, [r3, #5]
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000428 	.word	0x20000428

08002570 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	0002      	movs	r2, r0
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e00e      	b.n	80025a0 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <ssd1306_Fill+0x1e>
 800258a:	2100      	movs	r1, #0
 800258c:	e000      	b.n	8002590 <ssd1306_Fill+0x20>
 800258e:	21ff      	movs	r1, #255	; 0xff
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <ssd1306_Fill+0x40>)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	1c0a      	adds	r2, r1, #0
 8002598:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <ssd1306_Fill+0x44>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d9ec      	bls.n	8002582 <ssd1306_Fill+0x12>
    }
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b004      	add	sp, #16
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000028 	.word	0x20000028
 80025b4:	000003ff 	.word	0x000003ff

080025b8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e01a      	b.n	80025fc <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3b50      	subs	r3, #80	; 0x50
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff ff10 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff ff0d 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80025da:	2010      	movs	r0, #16
 80025dc:	f7ff ff0a 	bl	80023f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	01da      	lsls	r2, r3, #7
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <ssd1306_UpdateScreen+0x54>)
 80025e8:	18d3      	adds	r3, r2, r3
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff ff29 	bl	8002444 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	3201      	adds	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b07      	cmp	r3, #7
 8002602:	d9e0      	bls.n	80025c6 <ssd1306_UpdateScreen+0xe>
    }
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000028 	.word	0x20000028

08002610 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	0004      	movs	r4, r0
 8002618:	0008      	movs	r0, r1
 800261a:	0011      	movs	r1, r2
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	1c22      	adds	r2, r4, #0
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	1c02      	adds	r2, r0, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	1d7b      	adds	r3, r7, #5
 800262a:	1c0a      	adds	r2, r1, #0
 800262c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b25b      	sxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	db52      	blt.n	80026de <ssd1306_DrawPixel+0xce>
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b3f      	cmp	r3, #63	; 0x3f
 800263e:	d84e      	bhi.n	80026de <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <ssd1306_DrawPixel+0xd8>)
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8002648:	1d7b      	adds	r3, r7, #5
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	425a      	negs	r2, r3
 800264e:	4153      	adcs	r3, r2
 8002650:	b2da      	uxtb	r2, r3
 8002652:	1d7b      	adds	r3, r7, #5
 8002654:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8002656:	1d7b      	adds	r3, r7, #5
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11e      	bne.n	800269c <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	b2d8      	uxtb	r0, r3
 800266a:	0003      	movs	r3, r0
 800266c:	01db      	lsls	r3, r3, #7
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <ssd1306_DrawPixel+0xdc>)
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	b25a      	sxtb	r2, r3
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2107      	movs	r1, #7
 800267c:	400b      	ands	r3, r1
 800267e:	2101      	movs	r1, #1
 8002680:	4099      	lsls	r1, r3
 8002682:	000b      	movs	r3, r1
 8002684:	b25b      	sxtb	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	b259      	sxtb	r1, r3
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	0003      	movs	r3, r0
 8002690:	01db      	lsls	r3, r3, #7
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	b2c9      	uxtb	r1, r1
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <ssd1306_DrawPixel+0xdc>)
 8002698:	54d1      	strb	r1, [r2, r3]
 800269a:	e021      	b.n	80026e0 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800269c:	1dfb      	adds	r3, r7, #7
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	0003      	movs	r3, r0
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	18d3      	adds	r3, r2, r3
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <ssd1306_DrawPixel+0xdc>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	b25b      	sxtb	r3, r3
 80026b4:	1dba      	adds	r2, r7, #6
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	2107      	movs	r1, #7
 80026ba:	400a      	ands	r2, r1
 80026bc:	2101      	movs	r1, #1
 80026be:	4091      	lsls	r1, r2
 80026c0:	000a      	movs	r2, r1
 80026c2:	b252      	sxtb	r2, r2
 80026c4:	43d2      	mvns	r2, r2
 80026c6:	b252      	sxtb	r2, r2
 80026c8:	4013      	ands	r3, r2
 80026ca:	b259      	sxtb	r1, r3
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	0003      	movs	r3, r0
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	18d3      	adds	r3, r2, r3
 80026d6:	b2c9      	uxtb	r1, r1
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <ssd1306_DrawPixel+0xdc>)
 80026da:	54d1      	strb	r1, [r2, r3]
 80026dc:	e000      	b.n	80026e0 <ssd1306_DrawPixel+0xd0>
        return;
 80026de:	46c0      	nop			; (mov r8, r8)
    }
}
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b003      	add	sp, #12
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000428 	.word	0x20000428
 80026ec:	20000028 	.word	0x20000028

080026f0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	0004      	movs	r4, r0
 80026f8:	1d38      	adds	r0, r7, #4
 80026fa:	6001      	str	r1, [r0, #0]
 80026fc:	6042      	str	r2, [r0, #4]
 80026fe:	0019      	movs	r1, r3
 8002700:	230f      	movs	r3, #15
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	1c22      	adds	r2, r4, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	230e      	movs	r3, #14
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	1c0a      	adds	r2, r1, #0
 800270e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <ssd1306_WriteChar+0x11c>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	001a      	movs	r2, r3
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	18d3      	adds	r3, r2, r3
 800271c:	2b7f      	cmp	r3, #127	; 0x7f
 800271e:	dc07      	bgt.n	8002730 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <ssd1306_WriteChar+0x11c>)
 8002722:	885b      	ldrh	r3, [r3, #2]
 8002724:	001a      	movs	r2, r3
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800272c:	2b3f      	cmp	r3, #63	; 0x3f
 800272e:	dd01      	ble.n	8002734 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 8002730:	2300      	movs	r3, #0
 8002732:	e066      	b.n	8002802 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	e051      	b.n	80027de <ssd1306_WriteChar+0xee>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	230f      	movs	r3, #15
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3b20      	subs	r3, #32
 8002746:	1d39      	adds	r1, r7, #4
 8002748:	7849      	ldrb	r1, [r1, #1]
 800274a:	434b      	muls	r3, r1
 800274c:	0019      	movs	r1, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	18cb      	adds	r3, r1, r3
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e035      	b.n	80027cc <ssd1306_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	409a      	lsls	r2, r3
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	4013      	ands	r3, r2
 800276c:	d014      	beq.n	8002798 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <ssd1306_WriteChar+0x11c>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	18d3      	adds	r3, r2, r3
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <ssd1306_WriteChar+0x11c>)
 800277e:	885b      	ldrh	r3, [r3, #2]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	b2d9      	uxtb	r1, r3
 800278a:	230e      	movs	r3, #14
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	001a      	movs	r2, r3
 8002792:	f7ff ff3d 	bl	8002610 <ssd1306_DrawPixel>
 8002796:	e016      	b.n	80027c6 <ssd1306_WriteChar+0xd6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <ssd1306_WriteChar+0x11c>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	18d3      	adds	r3, r2, r3
 80027a4:	b2d8      	uxtb	r0, r3
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <ssd1306_WriteChar+0x11c>)
 80027a8:	885b      	ldrh	r3, [r3, #2]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	b2d9      	uxtb	r1, r3
 80027b4:	230e      	movs	r3, #14
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	425a      	negs	r2, r3
 80027bc:	4153      	adcs	r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	001a      	movs	r2, r3
 80027c2:	f7ff ff25 	bl	8002610 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	001a      	movs	r2, r3
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d3c3      	bcc.n	8002760 <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	3301      	adds	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	001a      	movs	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d3a7      	bcc.n	800273a <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <ssd1306_WriteChar+0x11c>)
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <ssd1306_WriteChar+0x11c>)
 80027fa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b009      	add	sp, #36	; 0x24
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000428 	.word	0x20000428

08002810 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	1d38      	adds	r0, r7, #4
 800281a:	6001      	str	r1, [r0, #0]
 800281c:	6042      	str	r2, [r0, #4]
 800281e:	001a      	movs	r2, r3
 8002820:	1cfb      	adds	r3, r7, #3
 8002822:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8002824:	e014      	b.n	8002850 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	7818      	ldrb	r0, [r3, #0]
 800282a:	1cfb      	adds	r3, r7, #3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	1d3a      	adds	r2, r7, #4
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	6852      	ldr	r2, [r2, #4]
 8002834:	f7ff ff5c 	bl	80026f0 <ssd1306_WriteChar>
 8002838:	0003      	movs	r3, r0
 800283a:	001a      	movs	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d002      	beq.n	800284a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	e008      	b.n	800285c <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e6      	bne.n	8002826 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bd80      	pop	{r7, pc}

08002864 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	0002      	movs	r2, r0
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	1c0a      	adds	r2, r1, #0
 8002874:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <ssd1306_SetCursor+0x30>)
 800287e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b03      	ldr	r3, [pc, #12]	; (8002894 <ssd1306_SetCursor+0x30>)
 8002888:	805a      	strh	r2, [r3, #2]
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	20000428 	.word	0x20000428

08002898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_MspInit+0x44>)
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_MspInit+0x44>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	619a      	str	r2, [r3, #24]
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_MspInit+0x44>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_MspInit+0x44>)
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_MspInit+0x44>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0549      	lsls	r1, r1, #21
 80028c0:	430a      	orrs	r2, r1
 80028c2:	61da      	str	r2, [r3, #28]
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_MspInit+0x44>)
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	055b      	lsls	r3, r3, #21
 80028cc:	4013      	ands	r3, r2
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	2314      	movs	r3, #20
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	0018      	movs	r0, r3
 80028ee:	2314      	movs	r3, #20
 80028f0:	001a      	movs	r2, r3
 80028f2:	2100      	movs	r1, #0
 80028f4:	f000 f93a 	bl	8002b6c <memset>
  if(hspi->Instance==SPI1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_SPI_MspInit+0x90>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d132      	bne.n	8002968 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_SPI_MspInit+0x94>)
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_SPI_MspInit+0x94>)
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0149      	lsls	r1, r1, #5
 800290c:	430a      	orrs	r2, r1
 800290e:	619a      	str	r2, [r3, #24]
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_SPI_MspInit+0x94>)
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_SPI_MspInit+0x94>)
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_SPI_MspInit+0x94>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0289      	lsls	r1, r1, #10
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_SPI_MspInit+0x94>)
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = O_SCK_SCL_Pin|O_MOSI_SDA_Pin;
 800293a:	2114      	movs	r1, #20
 800293c:	187b      	adds	r3, r7, r1
 800293e:	22a0      	movs	r2, #160	; 0xa0
 8002940:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2202      	movs	r2, #2
 8002946:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2203      	movs	r2, #3
 8002952:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	187a      	adds	r2, r7, r1
 800295c:	2390      	movs	r3, #144	; 0x90
 800295e:	05db      	lsls	r3, r3, #23
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f7fd fd74 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b00a      	add	sp, #40	; 0x28
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013000 	.word	0x40013000
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	2314      	movs	r3, #20
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	0018      	movs	r0, r3
 8002986:	2314      	movs	r3, #20
 8002988:	001a      	movs	r2, r3
 800298a:	2100      	movs	r1, #0
 800298c:	f000 f8ee 	bl	8002b6c <memset>
  if(huart->Instance==USART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <HAL_UART_MspInit+0x90>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d132      	bne.n	8002a00 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_UART_MspInit+0x94>)
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	01c9      	lsls	r1, r1, #7
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0289      	lsls	r1, r1, #10
 80029c0:	430a      	orrs	r2, r1
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_UART_MspInit+0x94>)
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80029d2:	2114      	movs	r1, #20
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_UART_MspInit+0x98>)
 80029d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2202      	movs	r2, #2
 80029de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2203      	movs	r2, #3
 80029ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2201      	movs	r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	187a      	adds	r2, r7, r1
 80029f4:	2390      	movs	r3, #144	; 0x90
 80029f6:	05db      	lsls	r3, r3, #23
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7fd fd28 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b00a      	add	sp, #40	; 0x28
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	00000404 	.word	0x00000404

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <HardFault_Handler+0x4>

08002a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f7fd fc20 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <SystemInit+0x70>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <SystemInit+0x70>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <SystemInit+0x70>)
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <SystemInit+0x70>)
 8002a5e:	4917      	ldr	r1, [pc, #92]	; (8002abc <SystemInit+0x74>)
 8002a60:	400a      	ands	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <SystemInit+0x70>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <SystemInit+0x70>)
 8002a6a:	4915      	ldr	r1, [pc, #84]	; (8002ac0 <SystemInit+0x78>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <SystemInit+0x70>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <SystemInit+0x70>)
 8002a76:	4913      	ldr	r1, [pc, #76]	; (8002ac4 <SystemInit+0x7c>)
 8002a78:	400a      	ands	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <SystemInit+0x70>)
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <SystemInit+0x70>)
 8002a82:	4911      	ldr	r1, [pc, #68]	; (8002ac8 <SystemInit+0x80>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <SystemInit+0x70>)
 8002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <SystemInit+0x70>)
 8002a8e:	210f      	movs	r1, #15
 8002a90:	438a      	bics	r2, r1
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <SystemInit+0x70>)
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <SystemInit+0x70>)
 8002a9a:	490c      	ldr	r1, [pc, #48]	; (8002acc <SystemInit+0x84>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SystemInit+0x70>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SystemInit+0x70>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002aac:	4b02      	ldr	r3, [pc, #8]	; (8002ab8 <SystemInit+0x70>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]

}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08ffb80c 	.word	0x08ffb80c
 8002ac0:	fef6ffff 	.word	0xfef6ffff
 8002ac4:	fffbffff 	.word	0xfffbffff
 8002ac8:	ffc0ffff 	.word	0xffc0ffff
 8002acc:	fffffeec 	.word	0xfffffeec

08002ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ad0:	480d      	ldr	r0, [pc, #52]	; (8002b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ad2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad4:	480d      	ldr	r0, [pc, #52]	; (8002b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ad6:	490e      	ldr	r1, [pc, #56]	; (8002b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <LoopForever+0xe>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aec:	4c0b      	ldr	r4, [pc, #44]	; (8002b1c <LoopForever+0x16>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002afa:	f7ff ffa5 	bl	8002a48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002afe:	f000 f811 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b02:	f7ff fa45 	bl	8001f90 <main>

08002b06 <LoopForever>:

LoopForever:
    b LoopForever
 8002b06:	e7fe      	b.n	8002b06 <LoopForever>
  ldr   r0, =_estack
 8002b08:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b14:	08003970 	.word	0x08003970
  ldr r2, =_sbss
 8002b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b1c:	20000508 	.word	0x20000508

08002b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC1_IRQHandler>
	...

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	2600      	movs	r6, #0
 8002b28:	4d0c      	ldr	r5, [pc, #48]	; (8002b5c <__libc_init_array+0x38>)
 8002b2a:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2c:	1b64      	subs	r4, r4, r5
 8002b2e:	10a4      	asrs	r4, r4, #2
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	2600      	movs	r6, #0
 8002b36:	f000 f821 	bl	8002b7c <_init>
 8002b3a:	4d0a      	ldr	r5, [pc, #40]	; (8002b64 <__libc_init_array+0x40>)
 8002b3c:	4c0a      	ldr	r4, [pc, #40]	; (8002b68 <__libc_init_array+0x44>)
 8002b3e:	1b64      	subs	r4, r4, r5
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	00b3      	lsls	r3, r6, #2
 8002b4a:	58eb      	ldr	r3, [r5, r3]
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	00b3      	lsls	r3, r6, #2
 8002b54:	58eb      	ldr	r3, [r5, r3]
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08003968 	.word	0x08003968
 8002b60:	08003968 	.word	0x08003968
 8002b64:	08003968 	.word	0x08003968
 8002b68:	0800396c 	.word	0x0800396c

08002b6c <memset>:
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	1812      	adds	r2, r2, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	7019      	strb	r1, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <_init>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr

08002b88 <_fini>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr
