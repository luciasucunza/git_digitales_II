
GPeesy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003a88  08003a88  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a88  08003a88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000014  08003aa4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08003aa4  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008166  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fe  00000000  00000000  000281a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c394  00000000  00000000  0002a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000758d  00000000  00000000  00036b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00044a24  00000000  00000000  0003e0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082b15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  00082b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cb8 	.word	0x08002cb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002cb8 	.word	0x08002cb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fbcd 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <HAL_InitTick+0x5c>)
 8000252:	681c      	ldr	r4, [r3, #0]
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <HAL_InitTick+0x60>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	0019      	movs	r1, r3
 800025a:	23fa      	movs	r3, #250	; 0xfa
 800025c:	0098      	lsls	r0, r3, #2
 800025e:	f7ff ff53 	bl	8000108 <__udivsi3>
 8000262:	0003      	movs	r3, r0
 8000264:	0019      	movs	r1, r3
 8000266:	0020      	movs	r0, r4
 8000268:	f7ff ff4e 	bl	8000108 <__udivsi3>
 800026c:	0003      	movs	r3, r0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 f903 	bl	800047a <HAL_SYSTICK_Config>
 8000274:	1e03      	subs	r3, r0, #0
 8000276:	d001      	beq.n	800027c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000278:	2301      	movs	r3, #1
 800027a:	e00f      	b.n	800029c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	d80b      	bhi.n	800029a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	2301      	movs	r3, #1
 8000286:	425b      	negs	r3, r3
 8000288:	2200      	movs	r2, #0
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f8e0 	bl	8000450 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_InitTick+0x64>)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b003      	add	sp, #12
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	20000010 	.word	0x20000010
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	001a      	movs	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	18d2      	adds	r2, r2, r3
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000438 	.word	0x20000438

080002d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000438 	.word	0x20000438

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	0003      	movs	r3, r0
 80002f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3301      	adds	r3, #1
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001a      	movs	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	189b      	adds	r3, r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b004      	add	sp, #16
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	0002      	movs	r2, r0
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b7f      	cmp	r3, #127	; 0x7f
 8000340:	d828      	bhi.n	8000394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000342:	4a2f      	ldr	r2, [pc, #188]	; (8000400 <__NVIC_SetPriority+0xd4>)
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b25b      	sxtb	r3, r3
 800034a:	089b      	lsrs	r3, r3, #2
 800034c:	33c0      	adds	r3, #192	; 0xc0
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	589b      	ldr	r3, [r3, r2]
 8000352:	1dfa      	adds	r2, r7, #7
 8000354:	7812      	ldrb	r2, [r2, #0]
 8000356:	0011      	movs	r1, r2
 8000358:	2203      	movs	r2, #3
 800035a:	400a      	ands	r2, r1
 800035c:	00d2      	lsls	r2, r2, #3
 800035e:	21ff      	movs	r1, #255	; 0xff
 8000360:	4091      	lsls	r1, r2
 8000362:	000a      	movs	r2, r1
 8000364:	43d2      	mvns	r2, r2
 8000366:	401a      	ands	r2, r3
 8000368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	019b      	lsls	r3, r3, #6
 800036e:	22ff      	movs	r2, #255	; 0xff
 8000370:	401a      	ands	r2, r3
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	0018      	movs	r0, r3
 8000378:	2303      	movs	r3, #3
 800037a:	4003      	ands	r3, r0
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000380:	481f      	ldr	r0, [pc, #124]	; (8000400 <__NVIC_SetPriority+0xd4>)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b25b      	sxtb	r3, r3
 8000388:	089b      	lsrs	r3, r3, #2
 800038a:	430a      	orrs	r2, r1
 800038c:	33c0      	adds	r3, #192	; 0xc0
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000392:	e031      	b.n	80003f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000394:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <__NVIC_SetPriority+0xd8>)
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	0019      	movs	r1, r3
 800039c:	230f      	movs	r3, #15
 800039e:	400b      	ands	r3, r1
 80003a0:	3b08      	subs	r3, #8
 80003a2:	089b      	lsrs	r3, r3, #2
 80003a4:	3306      	adds	r3, #6
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	18d3      	adds	r3, r2, r3
 80003aa:	3304      	adds	r3, #4
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	1dfa      	adds	r2, r7, #7
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	0011      	movs	r1, r2
 80003b4:	2203      	movs	r2, #3
 80003b6:	400a      	ands	r2, r1
 80003b8:	00d2      	lsls	r2, r2, #3
 80003ba:	21ff      	movs	r1, #255	; 0xff
 80003bc:	4091      	lsls	r1, r2
 80003be:	000a      	movs	r2, r1
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	401a      	ands	r2, r3
 80003c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	019b      	lsls	r3, r3, #6
 80003ca:	22ff      	movs	r2, #255	; 0xff
 80003cc:	401a      	ands	r2, r3
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	0018      	movs	r0, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	4003      	ands	r3, r0
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <__NVIC_SetPriority+0xd8>)
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	001c      	movs	r4, r3
 80003e4:	230f      	movs	r3, #15
 80003e6:	4023      	ands	r3, r4
 80003e8:	3b08      	subs	r3, #8
 80003ea:	089b      	lsrs	r3, r3, #2
 80003ec:	430a      	orrs	r2, r1
 80003ee:	3306      	adds	r3, #6
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	18c3      	adds	r3, r0, r3
 80003f4:	3304      	adds	r3, #4
 80003f6:	601a      	str	r2, [r3, #0]
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b003      	add	sp, #12
 80003fe:	bd90      	pop	{r4, r7, pc}
 8000400:	e000e100 	.word	0xe000e100
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <SysTick_Config+0x40>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d901      	bls.n	800041e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041a:	2301      	movs	r3, #1
 800041c:	e010      	b.n	8000440 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <SysTick_Config+0x44>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	3a01      	subs	r2, #1
 8000424:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000426:	2301      	movs	r3, #1
 8000428:	425b      	negs	r3, r3
 800042a:	2103      	movs	r1, #3
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff7d 	bl	800032c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <SysTick_Config+0x44>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Config+0x44>)
 800043a:	2207      	movs	r2, #7
 800043c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800043e:	2300      	movs	r3, #0
}
 8000440:	0018      	movs	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}
 8000448:	00ffffff 	.word	0x00ffffff
 800044c:	e000e010 	.word	0xe000e010

08000450 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60b9      	str	r1, [r7, #8]
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	210f      	movs	r1, #15
 800045c:	187b      	adds	r3, r7, r1
 800045e:	1c02      	adds	r2, r0, #0
 8000460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	187b      	adds	r3, r7, r1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b25b      	sxtb	r3, r3
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ff5d 	bl	800032c <__NVIC_SetPriority>
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b004      	add	sp, #16
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ffbf 	bl	8000408 <SysTick_Config>
 800048a:	0003      	movs	r3, r0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004a2:	e14f      	b.n	8000744 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2101      	movs	r1, #1
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	4091      	lsls	r1, r2
 80004ae:	000a      	movs	r2, r1
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d100      	bne.n	80004bc <HAL_GPIO_Init+0x28>
 80004ba:	e140      	b.n	800073e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d003      	beq.n	80004cc <HAL_GPIO_Init+0x38>
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b12      	cmp	r3, #18
 80004ca:	d123      	bne.n	8000514 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	08da      	lsrs	r2, r3, #3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3208      	adds	r2, #8
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	58d3      	ldr	r3, [r2, r3]
 80004d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	2207      	movs	r2, #7
 80004de:	4013      	ands	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	220f      	movs	r2, #15
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	691a      	ldr	r2, [r3, #16]
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	2107      	movs	r1, #7
 80004f8:	400b      	ands	r3, r1
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	08da      	lsrs	r2, r3, #3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3208      	adds	r2, #8
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	6939      	ldr	r1, [r7, #16]
 8000512:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2203      	movs	r2, #3
 8000520:	409a      	lsls	r2, r3
 8000522:	0013      	movs	r3, r2
 8000524:	43da      	mvns	r2, r3
 8000526:	693b      	ldr	r3, [r7, #16]
 8000528:	4013      	ands	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	401a      	ands	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	4313      	orrs	r3, r2
 8000540:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d00b      	beq.n	8000568 <HAL_GPIO_Init+0xd4>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d007      	beq.n	8000568 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055c:	2b11      	cmp	r3, #17
 800055e:	d003      	beq.n	8000568 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b12      	cmp	r3, #18
 8000566:	d130      	bne.n	80005ca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2203      	movs	r2, #3
 8000574:	409a      	lsls	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	43da      	mvns	r2, r3
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	4013      	ands	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	4313      	orrs	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800059e:	2201      	movs	r2, #1
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	409a      	lsls	r2, r3
 80005a4:	0013      	movs	r3, r2
 80005a6:	43da      	mvns	r2, r3
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	4013      	ands	r3, r2
 80005ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	091b      	lsrs	r3, r3, #4
 80005b4:	2201      	movs	r2, #1
 80005b6:	401a      	ands	r2, r3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	409a      	lsls	r2, r3
 80005bc:	0013      	movs	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	2203      	movs	r2, #3
 80005d6:	409a      	lsls	r2, r3
 80005d8:	0013      	movs	r3, r2
 80005da:	43da      	mvns	r2, r3
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	4013      	ands	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	055b      	lsls	r3, r3, #21
 8000602:	4013      	ands	r3, r2
 8000604:	d100      	bne.n	8000608 <HAL_GPIO_Init+0x174>
 8000606:	e09a      	b.n	800073e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000608:	4b54      	ldr	r3, [pc, #336]	; (800075c <HAL_GPIO_Init+0x2c8>)
 800060a:	699a      	ldr	r2, [r3, #24]
 800060c:	4b53      	ldr	r3, [pc, #332]	; (800075c <HAL_GPIO_Init+0x2c8>)
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	4b51      	ldr	r3, [pc, #324]	; (800075c <HAL_GPIO_Init+0x2c8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	2201      	movs	r2, #1
 800061a:	4013      	ands	r3, r2
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000620:	4a4f      	ldr	r2, [pc, #316]	; (8000760 <HAL_GPIO_Init+0x2cc>)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	589b      	ldr	r3, [r3, r2]
 800062c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2203      	movs	r2, #3
 8000632:	4013      	ands	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	220f      	movs	r2, #15
 8000638:	409a      	lsls	r2, r3
 800063a:	0013      	movs	r3, r2
 800063c:	43da      	mvns	r2, r3
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	4013      	ands	r3, r2
 8000642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	429a      	cmp	r2, r3
 800064c:	d013      	beq.n	8000676 <HAL_GPIO_Init+0x1e2>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a44      	ldr	r2, [pc, #272]	; (8000764 <HAL_GPIO_Init+0x2d0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d00d      	beq.n	8000672 <HAL_GPIO_Init+0x1de>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a43      	ldr	r2, [pc, #268]	; (8000768 <HAL_GPIO_Init+0x2d4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d007      	beq.n	800066e <HAL_GPIO_Init+0x1da>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a42      	ldr	r2, [pc, #264]	; (800076c <HAL_GPIO_Init+0x2d8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d101      	bne.n	800066a <HAL_GPIO_Init+0x1d6>
 8000666:	2303      	movs	r3, #3
 8000668:	e006      	b.n	8000678 <HAL_GPIO_Init+0x1e4>
 800066a:	2305      	movs	r3, #5
 800066c:	e004      	b.n	8000678 <HAL_GPIO_Init+0x1e4>
 800066e:	2302      	movs	r3, #2
 8000670:	e002      	b.n	8000678 <HAL_GPIO_Init+0x1e4>
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <HAL_GPIO_Init+0x1e4>
 8000676:	2300      	movs	r3, #0
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	2103      	movs	r1, #3
 800067c:	400a      	ands	r2, r1
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	4093      	lsls	r3, r2
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000688:	4935      	ldr	r1, [pc, #212]	; (8000760 <HAL_GPIO_Init+0x2cc>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	3302      	adds	r3, #2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000696:	4b36      	ldr	r3, [pc, #216]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	43da      	mvns	r2, r3
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	4013      	ands	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	025b      	lsls	r3, r3, #9
 80006ae:	4013      	ands	r3, r2
 80006b0:	d003      	beq.n	80006ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	43da      	mvns	r2, r3
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4013      	ands	r3, r2
 80006da:	d003      	beq.n	80006e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	43da      	mvns	r2, r3
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	4013      	ands	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	035b      	lsls	r3, r3, #13
 8000702:	4013      	ands	r3, r2
 8000704:	d003      	beq.n	800070e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4313      	orrs	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	43da      	mvns	r2, r3
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	4013      	ands	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	039b      	lsls	r3, r3, #14
 800072c:	4013      	ands	r3, r2
 800072e:	d003      	beq.n	8000738 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4313      	orrs	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	40da      	lsrs	r2, r3
 800074c:	1e13      	subs	r3, r2, #0
 800074e:	d000      	beq.n	8000752 <HAL_GPIO_Init+0x2be>
 8000750:	e6a8      	b.n	80004a4 <HAL_GPIO_Init+0x10>
  } 
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b006      	add	sp, #24
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000
 8000764:	48000400 	.word	0x48000400
 8000768:	48000800 	.word	0x48000800
 800076c:	48000c00 	.word	0x48000c00
 8000770:	40010400 	.word	0x40010400

08000774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	0008      	movs	r0, r1
 800077e:	0011      	movs	r1, r2
 8000780:	1cbb      	adds	r3, r7, #2
 8000782:	1c02      	adds	r2, r0, #0
 8000784:	801a      	strh	r2, [r3, #0]
 8000786:	1c7b      	adds	r3, r7, #1
 8000788:	1c0a      	adds	r2, r1, #0
 800078a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800078c:	1c7b      	adds	r3, r7, #1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d004      	beq.n	800079e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000794:	1cbb      	adds	r3, r7, #2
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800079c:	e003      	b.n	80007a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800079e:	1cbb      	adds	r3, r7, #2
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	000a      	movs	r2, r1
 80007b8:	1cbb      	adds	r3, r7, #2
 80007ba:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	1cba      	adds	r2, r7, #2
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	4013      	ands	r3, r2
 80007c6:	d005      	beq.n	80007d4 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	041a      	lsls	r2, r3, #16
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80007d2:	e003      	b.n	80007dc <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007d4:	1cbb      	adds	r3, r7, #2
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	619a      	str	r2, [r3, #24]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e303      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	d100      	bne.n	8000802 <HAL_RCC_OscConfig+0x1e>
 8000800:	e08d      	b.n	800091e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000802:	4bc4      	ldr	r3, [pc, #784]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	220c      	movs	r2, #12
 8000808:	4013      	ands	r3, r2
 800080a:	2b04      	cmp	r3, #4
 800080c:	d00e      	beq.n	800082c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800080e:	4bc1      	ldr	r3, [pc, #772]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	220c      	movs	r2, #12
 8000814:	4013      	ands	r3, r2
 8000816:	2b08      	cmp	r3, #8
 8000818:	d116      	bne.n	8000848 <HAL_RCC_OscConfig+0x64>
 800081a:	4bbe      	ldr	r3, [pc, #760]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	401a      	ands	r2, r3
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	025b      	lsls	r3, r3, #9
 8000828:	429a      	cmp	r2, r3
 800082a:	d10d      	bne.n	8000848 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082c:	4bb9      	ldr	r3, [pc, #740]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4013      	ands	r3, r2
 8000836:	d100      	bne.n	800083a <HAL_RCC_OscConfig+0x56>
 8000838:	e070      	b.n	800091c <HAL_RCC_OscConfig+0x138>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d000      	beq.n	8000844 <HAL_RCC_OscConfig+0x60>
 8000842:	e06b      	b.n	800091c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e2da      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d107      	bne.n	8000860 <HAL_RCC_OscConfig+0x7c>
 8000850:	4bb0      	ldr	r3, [pc, #704]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4baf      	ldr	r3, [pc, #700]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0249      	lsls	r1, r1, #9
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e02f      	b.n	80008c0 <HAL_RCC_OscConfig+0xdc>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10c      	bne.n	8000882 <HAL_RCC_OscConfig+0x9e>
 8000868:	4baa      	ldr	r3, [pc, #680]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4ba9      	ldr	r3, [pc, #676]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800086e:	49aa      	ldr	r1, [pc, #680]	; (8000b18 <HAL_RCC_OscConfig+0x334>)
 8000870:	400a      	ands	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	4ba7      	ldr	r3, [pc, #668]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4ba6      	ldr	r3, [pc, #664]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800087a:	49a8      	ldr	r1, [pc, #672]	; (8000b1c <HAL_RCC_OscConfig+0x338>)
 800087c:	400a      	ands	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e01e      	b.n	80008c0 <HAL_RCC_OscConfig+0xdc>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d10e      	bne.n	80008a8 <HAL_RCC_OscConfig+0xc4>
 800088a:	4ba2      	ldr	r3, [pc, #648]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4ba1      	ldr	r3, [pc, #644]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	02c9      	lsls	r1, r1, #11
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	4b9e      	ldr	r3, [pc, #632]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b9d      	ldr	r3, [pc, #628]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0249      	lsls	r1, r1, #9
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e00b      	b.n	80008c0 <HAL_RCC_OscConfig+0xdc>
 80008a8:	4b9a      	ldr	r3, [pc, #616]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b99      	ldr	r3, [pc, #612]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80008ae:	499a      	ldr	r1, [pc, #616]	; (8000b18 <HAL_RCC_OscConfig+0x334>)
 80008b0:	400a      	ands	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	4b97      	ldr	r3, [pc, #604]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b96      	ldr	r3, [pc, #600]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80008ba:	4998      	ldr	r1, [pc, #608]	; (8000b1c <HAL_RCC_OscConfig+0x338>)
 80008bc:	400a      	ands	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d014      	beq.n	80008f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c8:	f7ff fd04 	bl	80002d4 <HAL_GetTick>
 80008cc:	0003      	movs	r3, r0
 80008ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d0:	e008      	b.n	80008e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d2:	f7ff fcff 	bl	80002d4 <HAL_GetTick>
 80008d6:	0002      	movs	r2, r0
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	2b64      	cmp	r3, #100	; 0x64
 80008de:	d901      	bls.n	80008e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80008e0:	2303      	movs	r3, #3
 80008e2:	e28c      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e4:	4b8b      	ldr	r3, [pc, #556]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	029b      	lsls	r3, r3, #10
 80008ec:	4013      	ands	r3, r2
 80008ee:	d0f0      	beq.n	80008d2 <HAL_RCC_OscConfig+0xee>
 80008f0:	e015      	b.n	800091e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fcef 	bl	80002d4 <HAL_GetTick>
 80008f6:	0003      	movs	r3, r0
 80008f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008fa:	e008      	b.n	800090e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fc:	f7ff fcea 	bl	80002d4 <HAL_GetTick>
 8000900:	0002      	movs	r2, r0
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b64      	cmp	r3, #100	; 0x64
 8000908:	d901      	bls.n	800090e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800090a:	2303      	movs	r3, #3
 800090c:	e277      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800090e:	4b81      	ldr	r3, [pc, #516]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	029b      	lsls	r3, r3, #10
 8000916:	4013      	ands	r3, r2
 8000918:	d1f0      	bne.n	80008fc <HAL_RCC_OscConfig+0x118>
 800091a:	e000      	b.n	800091e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2202      	movs	r2, #2
 8000924:	4013      	ands	r3, r2
 8000926:	d100      	bne.n	800092a <HAL_RCC_OscConfig+0x146>
 8000928:	e069      	b.n	80009fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800092a:	4b7a      	ldr	r3, [pc, #488]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	220c      	movs	r2, #12
 8000930:	4013      	ands	r3, r2
 8000932:	d00b      	beq.n	800094c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000934:	4b77      	ldr	r3, [pc, #476]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	220c      	movs	r2, #12
 800093a:	4013      	ands	r3, r2
 800093c:	2b08      	cmp	r3, #8
 800093e:	d11c      	bne.n	800097a <HAL_RCC_OscConfig+0x196>
 8000940:	4b74      	ldr	r3, [pc, #464]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	025b      	lsls	r3, r3, #9
 8000948:	4013      	ands	r3, r2
 800094a:	d116      	bne.n	800097a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094c:	4b71      	ldr	r3, [pc, #452]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2202      	movs	r2, #2
 8000952:	4013      	ands	r3, r2
 8000954:	d005      	beq.n	8000962 <HAL_RCC_OscConfig+0x17e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d001      	beq.n	8000962 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e24d      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4b6c      	ldr	r3, [pc, #432]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	22f8      	movs	r2, #248	; 0xf8
 8000968:	4393      	bics	r3, r2
 800096a:	0019      	movs	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	00da      	lsls	r2, r3, #3
 8000972:	4b68      	ldr	r3, [pc, #416]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	e041      	b.n	80009fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d024      	beq.n	80009cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000982:	4b64      	ldr	r3, [pc, #400]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fca1 	bl	80002d4 <HAL_GetTick>
 8000992:	0003      	movs	r3, r0
 8000994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fc9c 	bl	80002d4 <HAL_GetTick>
 800099c:	0002      	movs	r2, r0
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e229      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2202      	movs	r2, #2
 80009b0:	4013      	ands	r3, r2
 80009b2:	d0f1      	beq.n	8000998 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b4:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	22f8      	movs	r2, #248	; 0xf8
 80009ba:	4393      	bics	r3, r2
 80009bc:	0019      	movs	r1, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	00da      	lsls	r2, r3, #3
 80009c4:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e018      	b.n	80009fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009cc:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b50      	ldr	r3, [pc, #320]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009d2:	2101      	movs	r1, #1
 80009d4:	438a      	bics	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fc7c 	bl	80002d4 <HAL_GetTick>
 80009dc:	0003      	movs	r3, r0
 80009de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc77 	bl	80002d4 <HAL_GetTick>
 80009e6:	0002      	movs	r2, r0
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e204      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f4:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2202      	movs	r2, #2
 80009fa:	4013      	ands	r3, r2
 80009fc:	d1f1      	bne.n	80009e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2208      	movs	r2, #8
 8000a04:	4013      	ands	r3, r2
 8000a06:	d036      	beq.n	8000a76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d019      	beq.n	8000a44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a10:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fc5a 	bl	80002d4 <HAL_GetTick>
 8000a20:	0003      	movs	r3, r0
 8000a22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a24:	e008      	b.n	8000a38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a26:	f7ff fc55 	bl	80002d4 <HAL_GetTick>
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d901      	bls.n	8000a38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a34:	2303      	movs	r3, #3
 8000a36:	e1e2      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d0f1      	beq.n	8000a26 <HAL_RCC_OscConfig+0x242>
 8000a42:	e018      	b.n	8000a76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	438a      	bics	r2, r1
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a50:	f7ff fc40 	bl	80002d4 <HAL_GetTick>
 8000a54:	0003      	movs	r3, r0
 8000a56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	e008      	b.n	8000a6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fc3b 	bl	80002d4 <HAL_GetTick>
 8000a5e:	0002      	movs	r2, r0
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d901      	bls.n	8000a6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e1c8      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	2202      	movs	r2, #2
 8000a72:	4013      	ands	r3, r2
 8000a74:	d1f1      	bne.n	8000a5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <HAL_RCC_OscConfig+0x29e>
 8000a80:	e0b6      	b.n	8000bf0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a82:	231f      	movs	r3, #31
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a8c:	69da      	ldr	r2, [r3, #28]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	055b      	lsls	r3, r3, #21
 8000a92:	4013      	ands	r3, r2
 8000a94:	d111      	bne.n	8000aba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0549      	lsls	r1, r1, #21
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	61da      	str	r2, [r3, #28]
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000aa6:	69da      	ldr	r2, [r3, #28]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	055b      	lsls	r3, r3, #21
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_RCC_OscConfig+0x33c>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	d11a      	bne.n	8000afc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_RCC_OscConfig+0x33c>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_RCC_OscConfig+0x33c>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fbfe 	bl	80002d4 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000adc:	e008      	b.n	8000af0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ade:	f7ff fbf9 	bl	80002d4 <HAL_GetTick>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b64      	cmp	r3, #100	; 0x64
 8000aea:	d901      	bls.n	8000af0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e186      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_RCC_OscConfig+0x33c>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	d0f0      	beq.n	8000ade <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d10f      	bne.n	8000b24 <HAL_RCC_OscConfig+0x340>
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000b06:	6a1a      	ldr	r2, [r3, #32]
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	621a      	str	r2, [r3, #32]
 8000b10:	e036      	b.n	8000b80 <HAL_RCC_OscConfig+0x39c>
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000
 8000b18:	fffeffff 	.word	0xfffeffff
 8000b1c:	fffbffff 	.word	0xfffbffff
 8000b20:	40007000 	.word	0x40007000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10c      	bne.n	8000b46 <HAL_RCC_OscConfig+0x362>
 8000b2c:	4bb6      	ldr	r3, [pc, #728]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b2e:	6a1a      	ldr	r2, [r3, #32]
 8000b30:	4bb5      	ldr	r3, [pc, #724]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	438a      	bics	r2, r1
 8000b36:	621a      	str	r2, [r3, #32]
 8000b38:	4bb3      	ldr	r3, [pc, #716]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b3a:	6a1a      	ldr	r2, [r3, #32]
 8000b3c:	4bb2      	ldr	r3, [pc, #712]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	438a      	bics	r2, r1
 8000b42:	621a      	str	r2, [r3, #32]
 8000b44:	e01c      	b.n	8000b80 <HAL_RCC_OscConfig+0x39c>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0x384>
 8000b4e:	4bae      	ldr	r3, [pc, #696]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b50:	6a1a      	ldr	r2, [r3, #32]
 8000b52:	4bad      	ldr	r3, [pc, #692]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b54:	2104      	movs	r1, #4
 8000b56:	430a      	orrs	r2, r1
 8000b58:	621a      	str	r2, [r3, #32]
 8000b5a:	4bab      	ldr	r3, [pc, #684]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b5c:	6a1a      	ldr	r2, [r3, #32]
 8000b5e:	4baa      	ldr	r3, [pc, #680]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	621a      	str	r2, [r3, #32]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0x39c>
 8000b68:	4ba7      	ldr	r3, [pc, #668]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b6a:	6a1a      	ldr	r2, [r3, #32]
 8000b6c:	4ba6      	ldr	r3, [pc, #664]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	438a      	bics	r2, r1
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	4ba4      	ldr	r3, [pc, #656]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b76:	6a1a      	ldr	r2, [r3, #32]
 8000b78:	4ba3      	ldr	r3, [pc, #652]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d014      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b88:	f7ff fba4 	bl	80002d4 <HAL_GetTick>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b90:	e009      	b.n	8000ba6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b92:	f7ff fb9f 	bl	80002d4 <HAL_GetTick>
 8000b96:	0002      	movs	r2, r0
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4a9b      	ldr	r2, [pc, #620]	; (8000e0c <HAL_RCC_OscConfig+0x628>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e12b      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba6:	4b98      	ldr	r3, [pc, #608]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0x3ae>
 8000bb0:	e013      	b.n	8000bda <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb2:	f7ff fb8f 	bl	80002d4 <HAL_GetTick>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bba:	e009      	b.n	8000bd0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fb8a 	bl	80002d4 <HAL_GetTick>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	4a91      	ldr	r2, [pc, #580]	; (8000e0c <HAL_RCC_OscConfig+0x628>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e116      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd0:	4b8d      	ldr	r3, [pc, #564]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d1f0      	bne.n	8000bbc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bda:	231f      	movs	r3, #31
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d105      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be4:	4b88      	ldr	r3, [pc, #544]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000be6:	69da      	ldr	r2, [r3, #28]
 8000be8:	4b87      	ldr	r3, [pc, #540]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000bea:	4989      	ldr	r1, [pc, #548]	; (8000e10 <HAL_RCC_OscConfig+0x62c>)
 8000bec:	400a      	ands	r2, r1
 8000bee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d063      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d12a      	bne.n	8000c58 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c02:	4b81      	ldr	r3, [pc, #516]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c06:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c0e:	4b7e      	ldr	r3, [pc, #504]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b7d      	ldr	r3, [pc, #500]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c1a:	f7ff fb5b 	bl	80002d4 <HAL_GetTick>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c24:	f7ff fb56 	bl	80002d4 <HAL_GetTick>
 8000c28:	0002      	movs	r2, r0
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e0e3      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c36:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d0f1      	beq.n	8000c24 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c40:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	22f8      	movs	r2, #248	; 0xf8
 8000c46:	4393      	bics	r3, r2
 8000c48:	0019      	movs	r1, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	00da      	lsls	r2, r3, #3
 8000c50:	4b6d      	ldr	r3, [pc, #436]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
 8000c56:	e034      	b.n	8000cc2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	3305      	adds	r3, #5
 8000c5e:	d111      	bne.n	8000c84 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c60:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c66:	2104      	movs	r1, #4
 8000c68:	438a      	bics	r2, r1
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c6c:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	22f8      	movs	r2, #248	; 0xf8
 8000c72:	4393      	bics	r3, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	00da      	lsls	r2, r3, #3
 8000c7c:	4b62      	ldr	r3, [pc, #392]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
 8000c82:	e01e      	b.n	8000cc2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c84:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c88:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c94:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	438a      	bics	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fb1a 	bl	80002d4 <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ca6:	f7ff fb15 	bl	80002d4 <HAL_GetTick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e0a2      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cb8:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f1      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d100      	bne.n	8000ccc <HAL_RCC_OscConfig+0x4e8>
 8000cca:	e097      	b.n	8000dfc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d100      	bne.n	8000cda <HAL_RCC_OscConfig+0x4f6>
 8000cd8:	e06b      	b.n	8000db2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d14c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000ce8:	494a      	ldr	r1, [pc, #296]	; (8000e14 <HAL_RCC_OscConfig+0x630>)
 8000cea:	400a      	ands	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff faf1 	bl	80002d4 <HAL_GetTick>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff faec 	bl	80002d4 <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e079      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	049b      	lsls	r3, r3, #18
 8000d12:	4013      	ands	r3, r2
 8000d14:	d1f0      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	4393      	bics	r3, r2
 8000d1e:	0019      	movs	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d26:	430a      	orrs	r2, r1
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d2a:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4a3a      	ldr	r2, [pc, #232]	; (8000e18 <HAL_RCC_OscConfig+0x634>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	0019      	movs	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d40:	430a      	orrs	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0449      	lsls	r1, r1, #17
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fabf 	bl	80002d4 <HAL_GetTick>
 8000d56:	0003      	movs	r3, r0
 8000d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5c:	f7ff faba 	bl	80002d4 <HAL_GetTick>
 8000d60:	0002      	movs	r2, r0
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e047      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	049b      	lsls	r3, r3, #18
 8000d76:	4013      	ands	r3, r2
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0x578>
 8000d7a:	e03f      	b.n	8000dfc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000d82:	4924      	ldr	r1, [pc, #144]	; (8000e14 <HAL_RCC_OscConfig+0x630>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff faa4 	bl	80002d4 <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d92:	f7ff fa9f 	bl	80002d4 <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e02c      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	049b      	lsls	r3, r3, #18
 8000dac:	4013      	ands	r3, r2
 8000dae:	d1f0      	bne.n	8000d92 <HAL_RCC_OscConfig+0x5ae>
 8000db0:	e024      	b.n	8000dfc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e01f      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_RCC_OscConfig+0x624>)
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d10e      	bne.n	8000df8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	220f      	movs	r2, #15
 8000dde:	401a      	ands	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d107      	bne.n	8000df8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	23f0      	movs	r3, #240	; 0xf0
 8000dec:	039b      	lsls	r3, r3, #14
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d001      	beq.n	8000dfc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b008      	add	sp, #32
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	00001388 	.word	0x00001388
 8000e10:	efffffff 	.word	0xefffffff
 8000e14:	feffffff 	.word	0xfeffffff
 8000e18:	ffc2ffff 	.word	0xffc2ffff

08000e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0b3      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e30:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d911      	bls.n	8000e62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4393      	bics	r3, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d001      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e09a      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2202      	movs	r2, #2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d015      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2204      	movs	r2, #4
 8000e72:	4013      	ands	r3, r2
 8000e74:	d006      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e76:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000e7c:	21e0      	movs	r1, #224	; 0xe0
 8000e7e:	00c9      	lsls	r1, r1, #3
 8000e80:	430a      	orrs	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e84:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	22f0      	movs	r2, #240	; 0xf0
 8000e8a:	4393      	bics	r3, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000e94:	430a      	orrs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d040      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d114      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e06e      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d107      	bne.n	8000ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	049b      	lsls	r3, r3, #18
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d108      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e062      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e05b      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	4393      	bics	r3, r2
 8000ee8:	0019      	movs	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ef4:	f7ff f9ee 	bl	80002d4 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000efc:	e009      	b.n	8000f12 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efe:	f7ff f9e9 	bl	80002d4 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_RCC_ClockConfig+0x18c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e042      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	220c      	movs	r2, #12
 8000f18:	401a      	ands	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d1ec      	bne.n	8000efe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d211      	bcs.n	8000f56 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2201      	movs	r2, #1
 8000f38:	4393      	bics	r3, r2
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_RCC_ClockConfig+0x184>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d001      	beq.n	8000f56 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e020      	b.n	8000f98 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d009      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_RCC_ClockConfig+0x190>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f74:	f000 f820 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8000f78:	0001      	movs	r1, r0
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_ClockConfig+0x188>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	220f      	movs	r2, #15
 8000f82:	4013      	ands	r3, r2
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_RCC_ClockConfig+0x194>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	000a      	movs	r2, r1
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff f959 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b004      	add	sp, #16
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	00001388 	.word	0x00001388
 8000fac:	fffff8ff 	.word	0xfffff8ff
 8000fb0:	08003a70 	.word	0x08003a70
 8000fb4:	20000010 	.word	0x20000010

08000fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b08f      	sub	sp, #60	; 0x3c
 8000fbc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	; (8001070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fc6:	c313      	stmia	r3!, {r0, r1, r4}
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fd2:	c313      	stmia	r3!, {r0, r1, r4}
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d002      	beq.n	8001002 <HAL_RCC_GetSysClockFreq+0x4a>
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d003      	beq.n	8001008 <HAL_RCC_GetSysClockFreq+0x50>
 8001000:	e02d      	b.n	800105e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001006:	e02d      	b.n	8001064 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	220f      	movs	r2, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2214      	movs	r2, #20
 8001012:	18ba      	adds	r2, r7, r2
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_RCC_GetSysClockFreq+0xc0>)
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	220f      	movs	r2, #15
 800101e:	4013      	ands	r3, r2
 8001020:	1d3a      	adds	r2, r7, #4
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	4013      	ands	r3, r2
 800102e:	d009      	beq.n	8001044 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001032:	4812      	ldr	r0, [pc, #72]	; (800107c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001034:	f7ff f868 	bl	8000108 <__udivsi3>
 8001038:	0003      	movs	r3, r0
 800103a:	001a      	movs	r2, r3
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	4353      	muls	r3, r2
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
 8001042:	e009      	b.n	8001058 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001046:	000a      	movs	r2, r1
 8001048:	0152      	lsls	r2, r2, #5
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	0193      	lsls	r3, r2, #6
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	185b      	adds	r3, r3, r1
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800105c:	e002      	b.n	8001064 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001062:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b00f      	add	sp, #60	; 0x3c
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	08002cd0 	.word	0x08002cd0
 8001074:	08002ce0 	.word	0x08002ce0
 8001078:	40021000 	.word	0x40021000
 800107c:	007a1200 	.word	0x007a1200

08001080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <HAL_RCC_GetHCLKFreq+0x10>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	20000010 	.word	0x20000010

08001094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001098:	f7ff fff2 	bl	8001080 <HAL_RCC_GetHCLKFreq>
 800109c:	0001      	movs	r1, r0
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	2207      	movs	r2, #7
 80010a6:	4013      	ands	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	40d9      	lsrs	r1, r3
 80010ae:	000b      	movs	r3, r1
}    
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08003a80 	.word	0x08003a80

080010c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	4013      	ands	r3, r2
 80010da:	d100      	bne.n	80010de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80010dc:	e08f      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80010de:	2317      	movs	r3, #23
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010e8:	69da      	ldr	r2, [r3, #28]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	4013      	ands	r3, r2
 80010f0:	d111      	bne.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0549      	lsls	r1, r1, #21
 80010fc:	430a      	orrs	r2, r1
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001102:	69da      	ldr	r2, [r3, #28]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	055b      	lsls	r3, r3, #21
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800110e:	2317      	movs	r3, #23
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4013      	ands	r3, r2
 8001120:	d11a      	bne.n	8001158 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0049      	lsls	r1, r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff f8d0 	bl	80002d4 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	e008      	b.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113a:	f7ff f8cb 	bl	80002d4 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d901      	bls.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e077      	b.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4013      	ands	r3, r2
 8001156:	d0f0      	beq.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	23c0      	movs	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d034      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	23c0      	movs	r3, #192	; 0xc0
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4013      	ands	r3, r2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	429a      	cmp	r2, r3
 8001178:	d02c      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	0249      	lsls	r1, r1, #9
 800118e:	430a      	orrs	r2, r1
 8001190:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001198:	492d      	ldr	r1, [pc, #180]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800119a:	400a      	ands	r2, r1
 800119c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff f892 	bl	80002d4 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	e009      	b.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff f88d 	bl	80002d4 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e038      	b.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80011da:	4013      	ands	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011e8:	2317      	movs	r3, #23
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d105      	bne.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011f4:	69da      	ldr	r2, [r3, #28]
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011f8:	4917      	ldr	r1, [pc, #92]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d009      	beq.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	2203      	movs	r2, #3
 800120e:	4393      	bics	r3, r2
 8001210:	0019      	movs	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001218:	430a      	orrs	r2, r1
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2220      	movs	r2, #32
 8001222:	4013      	ands	r3, r2
 8001224:	d009      	beq.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	2210      	movs	r2, #16
 800122c:	4393      	bics	r3, r2
 800122e:	0019      	movs	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001236:	430a      	orrs	r2, r1
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b006      	add	sp, #24
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	fffffcff 	.word	0xfffffcff
 8001250:	fffeffff 	.word	0xfffeffff
 8001254:	00001388 	.word	0x00001388
 8001258:	efffffff 	.word	0xefffffff

0800125c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e08a      	b.n	8001384 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	225d      	movs	r2, #93	; 0x5d
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	225c      	movs	r2, #92	; 0x5c
 8001284:	2100      	movs	r1, #0
 8001286:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0018      	movs	r0, r3
 800128c:	f001 fbc6 	bl	8002a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	225d      	movs	r2, #93	; 0x5d
 8001294:	2102      	movs	r1, #2
 8001296:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	438a      	bics	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	23e0      	movs	r3, #224	; 0xe0
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d902      	bls.n	80012ba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e002      	b.n	80012c0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	015b      	lsls	r3, r3, #5
 80012be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	23f0      	movs	r3, #240	; 0xf0
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d008      	beq.n	80012de <HAL_SPI_Init+0x82>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	23e0      	movs	r3, #224	; 0xe0
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d002      	beq.n	80012de <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	23e0      	movs	r3, #224	; 0xe0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d903      	bls.n	80012fa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2202      	movs	r2, #2
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
 80012f8:	e002      	b.n	8001300 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6999      	ldr	r1, [r3, #24]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	400b      	ands	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	431a      	orrs	r2, r3
 800132e:	0011      	movs	r1, r2
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	2204      	movs	r2, #4
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	0011      	movs	r1, r2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	430a      	orrs	r2, r1
 8001362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4907      	ldr	r1, [pc, #28]	; (800138c <HAL_SPI_Init+0x130>)
 8001370:	400a      	ands	r2, r1
 8001372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	225d      	movs	r2, #93	; 0x5d
 800137e:	2101      	movs	r1, #1
 8001380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	0018      	movs	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	b004      	add	sp, #16
 800138a:	bd80      	pop	{r7, pc}
 800138c:	fffff7ff 	.word	0xfffff7ff

08001390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80013a0:	231f      	movs	r3, #31
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	225c      	movs	r2, #92	; 0x5c
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_SPI_Transmit+0x26>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e169      	b.n	800168a <HAL_SPI_Transmit+0x2fa>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	225c      	movs	r2, #92	; 0x5c
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013be:	f7fe ff89 	bl	80002d4 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80013c6:	2316      	movs	r3, #22
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	1dba      	adds	r2, r7, #6
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	225d      	movs	r2, #93	; 0x5d
 80013d4:	5c9b      	ldrb	r3, [r3, r2]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d004      	beq.n	80013e6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80013dc:	231f      	movs	r3, #31
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	2202      	movs	r2, #2
 80013e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80013e4:	e146      	b.n	8001674 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_SPI_Transmit+0x64>
 80013ec:	1dbb      	adds	r3, r7, #6
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80013f4:	231f      	movs	r3, #31
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80013fc:	e13a      	b.n	8001674 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	225d      	movs	r2, #93	; 0x5d
 8001402:	2103      	movs	r1, #3
 8001404:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1dba      	adds	r2, r7, #6
 8001416:	8812      	ldrh	r2, [r2, #0]
 8001418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1dba      	adds	r2, r7, #6
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2244      	movs	r2, #68	; 0x44
 800142c:	2100      	movs	r1, #0
 800142e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2246      	movs	r2, #70	; 0x46
 8001434:	2100      	movs	r1, #0
 8001436:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	429a      	cmp	r2, r3
 800144e:	d108      	bne.n	8001462 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	01c9      	lsls	r1, r1, #7
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2240      	movs	r2, #64	; 0x40
 800146a:	4013      	ands	r3, r2
 800146c:	2b40      	cmp	r3, #64	; 0x40
 800146e:	d007      	beq.n	8001480 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	23e0      	movs	r3, #224	; 0xe0
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	429a      	cmp	r2, r3
 800148a:	d94e      	bls.n	800152a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_SPI_Transmit+0x10e>
 8001494:	2316      	movs	r3, #22
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d13f      	bne.n	800151e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	1c9a      	adds	r2, r3, #2
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80014c2:	e02c      	b.n	800151e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d112      	bne.n	80014f8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	1c9a      	adds	r2, r3, #2
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80014f6:	e012      	b.n	800151e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014f8:	f7fe feec 	bl	80002d4 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d802      	bhi.n	800150e <HAL_SPI_Transmit+0x17e>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_SPI_Transmit+0x184>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8001514:	231f      	movs	r3, #31
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2203      	movs	r2, #3
 800151a:	701a      	strb	r2, [r3, #0]
          goto error;
 800151c:	e0aa      	b.n	8001674 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1cd      	bne.n	80014c4 <HAL_SPI_Transmit+0x134>
 8001528:	e080      	b.n	800162c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_SPI_Transmit+0x1ae>
 8001532:	2316      	movs	r3, #22
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d000      	beq.n	800153e <HAL_SPI_Transmit+0x1ae>
 800153c:	e071      	b.n	8001622 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d912      	bls.n	800156e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	1c9a      	adds	r2, r3, #2
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b02      	subs	r3, #2
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800156c:	e059      	b.n	8001622 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	330c      	adds	r3, #12
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800158a:	b29b      	uxth	r3, r3
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001594:	e045      	b.n	8001622 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d12b      	bne.n	80015fc <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d912      	bls.n	80015d4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	881a      	ldrh	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	1c9a      	adds	r2, r3, #2
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3b02      	subs	r3, #2
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80015d2:	e026      	b.n	8001622 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	330c      	adds	r3, #12
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80015fa:	e012      	b.n	8001622 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015fc:	f7fe fe6a 	bl	80002d4 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d802      	bhi.n	8001612 <HAL_SPI_Transmit+0x282>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_SPI_Transmit+0x288>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d104      	bne.n	8001622 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8001618:	231f      	movs	r3, #31
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2203      	movs	r2, #3
 800161e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001620:	e028      	b.n	8001674 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001626:	b29b      	uxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1b4      	bne.n	8001596 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	6839      	ldr	r1, [r7, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f912 	bl	800185c <SPI_EndRxTxTransaction>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d002      	beq.n	8001642 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10a      	bne.n	8001660 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8001668:	231f      	movs	r3, #31
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e000      	b.n	8001674 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8001672:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	225d      	movs	r2, #93	; 0x5d
 8001678:	2101      	movs	r1, #1
 800167a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	225c      	movs	r2, #92	; 0x5c
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001684:	231f      	movs	r3, #31
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	781b      	ldrb	r3, [r3, #0]
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b008      	add	sp, #32
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016a4:	e050      	b.n	8001748 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	d04d      	beq.n	8001748 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80016ac:	f7fe fe12 	bl	80002d4 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d902      	bls.n	80016c2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d142      	bne.n	8001748 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	21e0      	movs	r1, #224	; 0xe0
 80016ce:	438a      	bics	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2382      	movs	r3, #130	; 0x82
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	429a      	cmp	r2, r3
 80016dc:	d113      	bne.n	8001706 <SPI_WaitFlagStateUntilTimeout+0x72>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d005      	beq.n	80016f6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d107      	bne.n	8001706 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	438a      	bics	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	429a      	cmp	r2, r3
 8001710:	d110      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4914      	ldr	r1, [pc, #80]	; (8001770 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0189      	lsls	r1, r1, #6
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	225d      	movs	r2, #93	; 0x5d
 8001738:	2101      	movs	r1, #1
 800173a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	225c      	movs	r2, #92	; 0x5c
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e00f      	b.n	8001768 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	425a      	negs	r2, r3
 8001758:	4153      	adcs	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	001a      	movs	r2, r3
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d19f      	bne.n	80016a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	ffffdfff 	.word	0xffffdfff

08001774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001782:	e05c      	b.n	800183e <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	429a      	cmp	r2, r3
 800178c:	d106      	bne.n	800179c <SPI_WaitFifoStateUntilTimeout+0x28>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	330c      	adds	r3, #12
 800179a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	d04d      	beq.n	800183e <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80017a2:	f7fe fd97 	bl	80002d4 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d902      	bls.n	80017b8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d142      	bne.n	800183e <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	21e0      	movs	r1, #224	; 0xe0
 80017c4:	438a      	bics	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2382      	movs	r3, #130	; 0x82
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d113      	bne.n	80017fc <SPI_WaitFifoStateUntilTimeout+0x88>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	429a      	cmp	r2, r3
 80017de:	d005      	beq.n	80017ec <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d107      	bne.n	80017fc <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	438a      	bics	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	019b      	lsls	r3, r3, #6
 8001804:	429a      	cmp	r2, r3
 8001806:	d110      	bne.n	800182a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4911      	ldr	r1, [pc, #68]	; (8001858 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0189      	lsls	r1, r1, #6
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	225d      	movs	r2, #93	; 0x5d
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	225c      	movs	r2, #92	; 0x5c
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e008      	b.n	8001850 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d19a      	bne.n	8001784 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	ffffdfff 	.word	0xffffdfff

0800185c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	23c0      	movs	r3, #192	; 0xc0
 800186c:	0159      	lsls	r1, r3, #5
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	0013      	movs	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	f7ff ff7c 	bl	8001774 <SPI_WaitFifoStateUntilTimeout>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d007      	beq.n	8001890 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	2220      	movs	r2, #32
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e027      	b.n	80018e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	0013      	movs	r3, r2
 800189a:	2200      	movs	r2, #0
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	f7ff fef9 	bl	8001694 <SPI_WaitFlagStateUntilTimeout>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d007      	beq.n	80018b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	2220      	movs	r2, #32
 80018ac:	431a      	orrs	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e014      	b.n	80018e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	00d9      	lsls	r1, r3, #3
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	0013      	movs	r3, r2
 80018c4:	2200      	movs	r2, #0
 80018c6:	f7ff ff55 	bl	8001774 <SPI_WaitFifoStateUntilTimeout>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d007      	beq.n	80018de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	2220      	movs	r2, #32
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e000      	b.n	80018e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e044      	b.n	8001984 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2270      	movs	r2, #112	; 0x70
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f001 f8d1 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2224      	movs	r2, #36	; 0x24
 8001916:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	438a      	bics	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f908 	bl	8001b40 <UART_SetConfig>
 8001930:	0003      	movs	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e024      	b.n	8001984 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 fa69 	bl	8001e1c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	490d      	ldr	r1, [pc, #52]	; (800198c <HAL_UART_Init+0xa4>)
 8001956:	400a      	ands	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2108      	movs	r1, #8
 8001966:	438a      	bics	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f000 fb01 	bl	8001f84 <UART_CheckIdleState>
 8001982:	0003      	movs	r3, r0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	fffff7ff 	.word	0xfffff7ff

08001990 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	1dbb      	adds	r3, r7, #6
 800199e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d000      	beq.n	80019aa <HAL_UART_Receive+0x1a>
 80019a8:	e0c2      	b.n	8001b30 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_UART_Receive+0x28>
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0ba      	b.n	8001b32 <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d109      	bne.n	80019dc <HAL_UART_Receive+0x4c>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d001      	beq.n	80019dc <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0aa      	b.n	8001b32 <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2270      	movs	r2, #112	; 0x70
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Receive+0x5a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0a3      	b.n	8001b32 <HAL_UART_Receive+0x1a2>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2270      	movs	r2, #112	; 0x70
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2222      	movs	r2, #34	; 0x22
 80019fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80019fe:	f7fe fc69 	bl	80002d4 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1dba      	adds	r2, r7, #6
 8001a0a:	2158      	movs	r1, #88	; 0x58
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1dba      	adds	r2, r7, #6
 8001a14:	215a      	movs	r1, #90	; 0x5a
 8001a16:	8812      	ldrh	r2, [r2, #0]
 8001a18:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	015b      	lsls	r3, r3, #5
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10d      	bne.n	8001a42 <HAL_UART_Receive+0xb2>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <HAL_UART_Receive+0xa8>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	225c      	movs	r2, #92	; 0x5c
 8001a32:	4942      	ldr	r1, [pc, #264]	; (8001b3c <HAL_UART_Receive+0x1ac>)
 8001a34:	5299      	strh	r1, [r3, r2]
 8001a36:	e01a      	b.n	8001a6e <HAL_UART_Receive+0xde>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	225c      	movs	r2, #92	; 0x5c
 8001a3c:	21ff      	movs	r1, #255	; 0xff
 8001a3e:	5299      	strh	r1, [r3, r2]
 8001a40:	e015      	b.n	8001a6e <HAL_UART_Receive+0xde>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_UART_Receive+0xd6>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d104      	bne.n	8001a5c <HAL_UART_Receive+0xcc>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	225c      	movs	r2, #92	; 0x5c
 8001a56:	21ff      	movs	r1, #255	; 0xff
 8001a58:	5299      	strh	r1, [r3, r2]
 8001a5a:	e008      	b.n	8001a6e <HAL_UART_Receive+0xde>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	225c      	movs	r2, #92	; 0x5c
 8001a60:	217f      	movs	r1, #127	; 0x7f
 8001a62:	5299      	strh	r1, [r3, r2]
 8001a64:	e003      	b.n	8001a6e <HAL_UART_Receive+0xde>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	225c      	movs	r2, #92	; 0x5c
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001a6e:	2312      	movs	r3, #18
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	215c      	movs	r1, #92	; 0x5c
 8001a76:	5a52      	ldrh	r2, [r2, r1]
 8001a78:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d108      	bne.n	8001a98 <HAL_UART_Receive+0x108>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e003      	b.n	8001aa0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001aa0:	e037      	b.n	8001b12 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	0013      	movs	r3, r2
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	f000 faae 	bl	8002010 <UART_WaitOnFlagUntilTimeout>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e03a      	b.n	8001b32 <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10e      	bne.n	8001ae0 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2212      	movs	r2, #18
 8001acc:	18ba      	adds	r2, r7, r2
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3302      	adds	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e00f      	b.n	8001b00 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2212      	movs	r2, #18
 8001aec:	18ba      	adds	r2, r7, r2
 8001aee:	8812      	ldrh	r2, [r2, #0]
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	4013      	ands	r3, r2
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	225a      	movs	r2, #90	; 0x5a
 8001b04:	5a9b      	ldrh	r3, [r3, r2]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	225a      	movs	r2, #90	; 0x5a
 8001b10:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	225a      	movs	r2, #90	; 0x5a
 8001b16:	5a9b      	ldrh	r3, [r3, r2]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1c1      	bne.n	8001aa2 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2270      	movs	r2, #112	; 0x70
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b008      	add	sp, #32
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	000001ff 	.word	0x000001ff

08001b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4aa3      	ldr	r2, [pc, #652]	; (8001e00 <UART_SetConfig+0x2c0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a9e      	ldr	r2, [pc, #632]	; (8001e04 <UART_SetConfig+0x2c4>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a95      	ldr	r2, [pc, #596]	; (8001e08 <UART_SetConfig+0x2c8>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <UART_SetConfig+0x2cc>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d00f      	beq.n	8001bec <UART_SetConfig+0xac>
 8001bcc:	d304      	bcc.n	8001bd8 <UART_SetConfig+0x98>
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d011      	beq.n	8001bf6 <UART_SetConfig+0xb6>
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d005      	beq.n	8001be2 <UART_SetConfig+0xa2>
 8001bd6:	e013      	b.n	8001c00 <UART_SetConfig+0xc0>
 8001bd8:	231f      	movs	r3, #31
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e012      	b.n	8001c08 <UART_SetConfig+0xc8>
 8001be2:	231f      	movs	r3, #31
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e00d      	b.n	8001c08 <UART_SetConfig+0xc8>
 8001bec:	231f      	movs	r3, #31
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e008      	b.n	8001c08 <UART_SetConfig+0xc8>
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e003      	b.n	8001c08 <UART_SetConfig+0xc8>
 8001c00:	231f      	movs	r3, #31
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2210      	movs	r2, #16
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d000      	beq.n	8001c18 <UART_SetConfig+0xd8>
 8001c16:	e07d      	b.n	8001d14 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8001c18:	231f      	movs	r3, #31
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d01c      	beq.n	8001c5c <UART_SetConfig+0x11c>
 8001c22:	dc02      	bgt.n	8001c2a <UART_SetConfig+0xea>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <UART_SetConfig+0xf4>
 8001c28:	e04b      	b.n	8001cc2 <UART_SetConfig+0x182>
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d025      	beq.n	8001c7a <UART_SetConfig+0x13a>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d037      	beq.n	8001ca2 <UART_SetConfig+0x162>
 8001c32:	e046      	b.n	8001cc2 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c34:	f7ff fa2e 	bl	8001094 <HAL_RCC_GetPCLK1Freq>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	005a      	lsls	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	18d2      	adds	r2, r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7fe fa5a 	bl	8000108 <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	61bb      	str	r3, [r7, #24]
        break;
 8001c5a:	e037      	b.n	8001ccc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <UART_SetConfig+0x2d0>)
 8001c64:	189a      	adds	r2, r3, r2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f7fe fa4b 	bl	8000108 <__udivsi3>
 8001c72:	0003      	movs	r3, r0
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	61bb      	str	r3, [r7, #24]
        break;
 8001c78:	e028      	b.n	8001ccc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c7a:	f7ff f99d 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	005a      	lsls	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	18d2      	adds	r2, r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0019      	movs	r1, r3
 8001c94:	0010      	movs	r0, r2
 8001c96:	f7fe fa37 	bl	8000108 <__udivsi3>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	61bb      	str	r3, [r7, #24]
        break;
 8001ca0:	e014      	b.n	8001ccc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	0252      	lsls	r2, r2, #9
 8001cac:	189a      	adds	r2, r3, r2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	f7fe fa27 	bl	8000108 <__udivsi3>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	61bb      	str	r3, [r7, #24]
        break;
 8001cc0:	e004      	b.n	8001ccc <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8001cc2:	2317      	movs	r3, #23
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
        break;
 8001cca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	d91b      	bls.n	8001d0a <UART_SetConfig+0x1ca>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d817      	bhi.n	8001d0a <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	200a      	movs	r0, #10
 8001ce0:	183b      	adds	r3, r7, r0
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	b299      	uxth	r1, r3
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	183a      	adds	r2, r7, r0
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	183a      	adds	r2, r7, r0
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	e06c      	b.n	8001de4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8001d0a:	2317      	movs	r3, #23
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e067      	b.n	8001de4 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d01b      	beq.n	8001d56 <UART_SetConfig+0x216>
 8001d1e:	dc02      	bgt.n	8001d26 <UART_SetConfig+0x1e6>
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <UART_SetConfig+0x1f0>
 8001d24:	e049      	b.n	8001dba <UART_SetConfig+0x27a>
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d024      	beq.n	8001d74 <UART_SetConfig+0x234>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d035      	beq.n	8001d9a <UART_SetConfig+0x25a>
 8001d2e:	e044      	b.n	8001dba <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d30:	f7ff f9b0 	bl	8001094 <HAL_RCC_GetPCLK1Freq>
 8001d34:	0003      	movs	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	085a      	lsrs	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	18d2      	adds	r2, r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7fe f9dd 	bl	8000108 <__udivsi3>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	61bb      	str	r3, [r7, #24]
        break;
 8001d54:	e036      	b.n	8001dc4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <UART_SetConfig+0x2d8>)
 8001d5e:	189a      	adds	r2, r3, r2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f7fe f9ce 	bl	8000108 <__udivsi3>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	61bb      	str	r3, [r7, #24]
        break;
 8001d72:	e027      	b.n	8001dc4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d74:	f7ff f920 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	085a      	lsrs	r2, r3, #1
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	18d2      	adds	r2, r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	0010      	movs	r0, r2
 8001d8e:	f7fe f9bb 	bl	8000108 <__udivsi3>
 8001d92:	0003      	movs	r3, r0
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	61bb      	str	r3, [r7, #24]
        break;
 8001d98:	e014      	b.n	8001dc4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	0212      	lsls	r2, r2, #8
 8001da4:	189a      	adds	r2, r3, r2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0019      	movs	r1, r3
 8001dac:	0010      	movs	r0, r2
 8001dae:	f7fe f9ab 	bl	8000108 <__udivsi3>
 8001db2:	0003      	movs	r3, r0
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	61bb      	str	r3, [r7, #24]
        break;
 8001db8:	e004      	b.n	8001dc4 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
        break;
 8001dc2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d908      	bls.n	8001ddc <UART_SetConfig+0x29c>
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d804      	bhi.n	8001ddc <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e003      	b.n	8001de4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001df0:	2317      	movs	r3, #23
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b008      	add	sp, #32
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	ffff69f3 	.word	0xffff69f3
 8001e04:	ffffcfff 	.word	0xffffcfff
 8001e08:	fffff4ff 	.word	0xfffff4ff
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	0000ffff 	.word	0x0000ffff
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a4a      	ldr	r2, [pc, #296]	; (8001f60 <UART_AdvFeatureConfig+0x144>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00b      	beq.n	8001e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a43      	ldr	r2, [pc, #268]	; (8001f64 <UART_AdvFeatureConfig+0x148>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <UART_AdvFeatureConfig+0x14c>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4013      	ands	r3, r2
 8001e92:	d00b      	beq.n	8001eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <UART_AdvFeatureConfig+0x150>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a2c      	ldr	r2, [pc, #176]	; (8001f70 <UART_AdvFeatureConfig+0x154>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d00b      	beq.n	8001ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <UART_AdvFeatureConfig+0x158>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <UART_AdvFeatureConfig+0x15c>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	035b      	lsls	r3, r3, #13
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10b      	bne.n	8001f36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <UART_AdvFeatureConfig+0x160>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00b      	beq.n	8001f58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <UART_AdvFeatureConfig+0x164>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	fffdffff 	.word	0xfffdffff
 8001f64:	fffeffff 	.word	0xfffeffff
 8001f68:	fffbffff 	.word	0xfffbffff
 8001f6c:	ffff7fff 	.word	0xffff7fff
 8001f70:	ffffefff 	.word	0xffffefff
 8001f74:	ffffdfff 	.word	0xffffdfff
 8001f78:	ffefffff 	.word	0xffefffff
 8001f7c:	ff9fffff 	.word	0xff9fffff
 8001f80:	fff7ffff 	.word	0xfff7ffff

08001f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f92:	f7fe f99f 	bl	80002d4 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d10d      	bne.n	8001fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	0399      	lsls	r1, r3, #14
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <UART_CheckIdleState+0x88>)
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f000 f82a 	bl	8002010 <UART_WaitOnFlagUntilTimeout>
 8001fbc:	1e03      	subs	r3, r0, #0
 8001fbe:	d001      	beq.n	8001fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e01f      	b.n	8002004 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d10d      	bne.n	8001fee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	03d9      	lsls	r1, r3, #15
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <UART_CheckIdleState+0x88>)
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	0013      	movs	r3, r2
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f000 f815 	bl	8002010 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e00a      	b.n	8002004 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2270      	movs	r2, #112	; 0x70
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b004      	add	sp, #16
 800200a:	bd80      	pop	{r7, pc}
 800200c:	01ffffff 	.word	0x01ffffff

08002010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002020:	e05d      	b.n	80020de <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3301      	adds	r3, #1
 8002026:	d05a      	beq.n	80020de <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002028:	f7fe f954 	bl	80002d4 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	429a      	cmp	r2, r3
 8002036:	d302      	bcc.n	800203e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11b      	bne.n	8002076 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	492f      	ldr	r1, [pc, #188]	; (8002108 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800204a:	400a      	ands	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	438a      	bics	r2, r1
 800205c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2270      	movs	r2, #112	; 0x70
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e043      	b.n	80020fe <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2204      	movs	r2, #4
 800207e:	4013      	ands	r3, r2
 8002080:	d02d      	beq.n	80020de <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	401a      	ands	r2, r3
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	429a      	cmp	r2, r3
 8002094:	d123      	bne.n	80020de <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4917      	ldr	r1, [pc, #92]	; (8002108 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	438a      	bics	r2, r1
 80020be:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2270      	movs	r2, #112	; 0x70
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e00f      	b.n	80020fe <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	425a      	negs	r2, r3
 80020ee:	4153      	adcs	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	001a      	movs	r2, r3
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d092      	beq.n	8002022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	fffffe5f 	.word	0xfffffe5f

0800210c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b096      	sub	sp, #88	; 0x58
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char dato=0;
 8002112:	2353      	movs	r3, #83	; 0x53
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
	char buffer[82];
//	char str[15];
	uint32_t i = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800211e:	f7fe f87f 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002122:	f000 f8b5 	bl	8002290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002126:	f000 f97b 	bl	8002420 <MX_GPIO_Init>
  MX_SPI1_Init();
 800212a:	f000 f909 	bl	8002340 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800212e:	f000 f945 	bl	80023bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 8002132:	f000 fa4d 	bl	80025d0 <ssd1306_Init>
	ssd1306_Fill(Black);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 fab8 	bl	80026ac <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800213c:	2100      	movs	r1, #0
 800213e:	2000      	movs	r0, #0
 8002140:	f000 fc2e 	bl	80029a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Hola Lulu", Font_11x18, White);
 8002144:	4a4d      	ldr	r2, [pc, #308]	; (800227c <main+0x170>)
 8002146:	484e      	ldr	r0, [pc, #312]	; (8002280 <main+0x174>)
 8002148:	2301      	movs	r3, #1
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	6852      	ldr	r2, [r2, #4]
 800214e:	f000 fbfd 	bl	800294c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002152:	2114      	movs	r1, #20
 8002154:	2000      	movs	r0, #0
 8002156:	f000 fc23 	bl	80029a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Hola Pepe", Font_11x18, White);
 800215a:	4a48      	ldr	r2, [pc, #288]	; (800227c <main+0x170>)
 800215c:	4849      	ldr	r0, [pc, #292]	; (8002284 <main+0x178>)
 800215e:	2301      	movs	r3, #1
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	f000 fbf2 	bl	800294c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8002168:	2128      	movs	r1, #40	; 0x28
 800216a:	2000      	movs	r0, #0
 800216c:	f000 fc18 	bl	80029a0 <ssd1306_SetCursor>
	ssd1306_WriteString("OLED -2/10", Font_11x18, White);
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <main+0x170>)
 8002172:	4845      	ldr	r0, [pc, #276]	; (8002288 <main+0x17c>)
 8002174:	2301      	movs	r3, #1
 8002176:	6811      	ldr	r1, [r2, #0]
 8002178:	6852      	ldr	r2, [r2, #4]
 800217a:	f000 fbe7 	bl	800294c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800217e:	f000 fab9 	bl	80026f4 <ssd1306_UpdateScreen>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 8002182:	2390      	movs	r3, #144	; 0x90
 8002184:	05db      	lsls	r3, r3, #23
 8002186:	2101      	movs	r1, #1
 8002188:	0018      	movs	r0, r3
 800218a:	f7fe fb10 	bl	80007ae <HAL_GPIO_TogglePin>
		//				HAL_UART_Receive(&huart1, ((uint8_t*)&dato),1, 20);
		//				buffer[i] = dato;
		//				i++;
		//			}
		//		}
		for(i=0 ; i<33 ; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
 8002192:	e007      	b.n	80021a4 <main+0x98>
			buffer[i] = 'x';
 8002194:	003a      	movs	r2, r7
 8002196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	2278      	movs	r2, #120	; 0x78
 800219c:	701a      	strb	r2, [r3, #0]
		for(i=0 ; i<33 ; i++)
 800219e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a0:	3301      	adds	r3, #1
 80021a2:	657b      	str	r3, [r7, #84]	; 0x54
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d9f4      	bls.n	8002194 <main+0x88>

		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <main+0x180>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	220c      	movs	r2, #12
 80021b0:	621a      	str	r2, [r3, #32]
		if( HAL_UART_Receive(&huart1, ((uint8_t*)&dato),1, 10) == HAL_TIMEOUT)
 80021b2:	2353      	movs	r3, #83	; 0x53
 80021b4:	18f9      	adds	r1, r7, r3
 80021b6:	4835      	ldr	r0, [pc, #212]	; (800228c <main+0x180>)
 80021b8:	230a      	movs	r3, #10
 80021ba:	2201      	movs	r2, #1
 80021bc:	f7ff fbe8 	bl	8001990 <HAL_UART_Receive>
 80021c0:	0003      	movs	r3, r0
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d0dd      	beq.n	8002182 <main+0x76>
//			ssd1306_UpdateScreen();
		}
		else
		{

			if( dato == '$')
 80021c6:	2353      	movs	r3, #83	; 0x53
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b24      	cmp	r3, #36	; 0x24
 80021ce:	d1d8      	bne.n	8002182 <main+0x76>
			{
				HAL_UART_Receive(&huart1, ((uint8_t*)buffer),33, 100);
 80021d0:	0039      	movs	r1, r7
 80021d2:	482e      	ldr	r0, [pc, #184]	; (800228c <main+0x180>)
 80021d4:	2364      	movs	r3, #100	; 0x64
 80021d6:	2221      	movs	r2, #33	; 0x21
 80021d8:	f7ff fbda 	bl	8001990 <HAL_UART_Receive>
				ssd1306_Fill(Black);
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 fa65 	bl	80026ac <ssd1306_Fill>
				ssd1306_SetCursor(0, 0);
 80021e2:	2100      	movs	r1, #0
 80021e4:	2000      	movs	r0, #0
 80021e6:	f000 fbdb 	bl	80029a0 <ssd1306_SetCursor>
				for(i=0 ; i<11 ; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54
 80021ee:	e00c      	b.n	800220a <main+0xfe>
					ssd1306_WriteChar(buffer[i], Font_11x18, White);
 80021f0:	003a      	movs	r2, r7
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	18d3      	adds	r3, r2, r3
 80021f6:	7818      	ldrb	r0, [r3, #0]
 80021f8:	4a20      	ldr	r2, [pc, #128]	; (800227c <main+0x170>)
 80021fa:	2301      	movs	r3, #1
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	6852      	ldr	r2, [r2, #4]
 8002200:	f000 fb14 	bl	800282c <ssd1306_WriteChar>
				for(i=0 ; i<11 ; i++)
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	3301      	adds	r3, #1
 8002208:	657b      	str	r3, [r7, #84]	; 0x54
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	2b0a      	cmp	r3, #10
 800220e:	d9ef      	bls.n	80021f0 <main+0xe4>
				ssd1306_SetCursor(0, 20);
 8002210:	2114      	movs	r1, #20
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fbc4 	bl	80029a0 <ssd1306_SetCursor>
				for(i=11 ; i<22 ; i++)
 8002218:	230b      	movs	r3, #11
 800221a:	657b      	str	r3, [r7, #84]	; 0x54
 800221c:	e00c      	b.n	8002238 <main+0x12c>
					ssd1306_WriteChar(buffer[i], Font_11x18, White);
 800221e:	003a      	movs	r2, r7
 8002220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	7818      	ldrb	r0, [r3, #0]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <main+0x170>)
 8002228:	2301      	movs	r3, #1
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	6852      	ldr	r2, [r2, #4]
 800222e:	f000 fafd 	bl	800282c <ssd1306_WriteChar>
				for(i=11 ; i<22 ; i++)
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	3301      	adds	r3, #1
 8002236:	657b      	str	r3, [r7, #84]	; 0x54
 8002238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223a:	2b15      	cmp	r3, #21
 800223c:	d9ef      	bls.n	800221e <main+0x112>
				ssd1306_SetCursor(0, 40);
 800223e:	2128      	movs	r1, #40	; 0x28
 8002240:	2000      	movs	r0, #0
 8002242:	f000 fbad 	bl	80029a0 <ssd1306_SetCursor>
				for(i=22 ; i<33 ; i++)
 8002246:	2316      	movs	r3, #22
 8002248:	657b      	str	r3, [r7, #84]	; 0x54
 800224a:	e00c      	b.n	8002266 <main+0x15a>
					ssd1306_WriteChar(buffer[i], Font_11x18, White);
 800224c:	003a      	movs	r2, r7
 800224e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002250:	18d3      	adds	r3, r2, r3
 8002252:	7818      	ldrb	r0, [r3, #0]
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <main+0x170>)
 8002256:	2301      	movs	r3, #1
 8002258:	6811      	ldr	r1, [r2, #0]
 800225a:	6852      	ldr	r2, [r2, #4]
 800225c:	f000 fae6 	bl	800282c <ssd1306_WriteChar>
				for(i=22 ; i<33 ; i++)
 8002260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002262:	3301      	adds	r3, #1
 8002264:	657b      	str	r3, [r7, #84]	; 0x54
 8002266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002268:	2b20      	cmp	r3, #32
 800226a:	d9ef      	bls.n	800224c <main+0x140>
				ssd1306_UpdateScreen();
 800226c:	f000 fa42 	bl	80026f4 <ssd1306_UpdateScreen>
				HAL_Delay(1000);
 8002270:	23fa      	movs	r3, #250	; 0xfa
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	0018      	movs	r0, r3
 8002276:	f7fe f837 	bl	80002e8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 800227a:	e782      	b.n	8002182 <main+0x76>
 800227c:	20000008 	.word	0x20000008
 8002280:	08002cf0 	.word	0x08002cf0
 8002284:	08002cfc 	.word	0x08002cfc
 8002288:	08002d08 	.word	0x08002d08
 800228c:	2000043c 	.word	0x2000043c

08002290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b095      	sub	sp, #84	; 0x54
 8002294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002296:	2420      	movs	r4, #32
 8002298:	193b      	adds	r3, r7, r4
 800229a:	0018      	movs	r0, r3
 800229c:	2330      	movs	r3, #48	; 0x30
 800229e:	001a      	movs	r2, r3
 80022a0:	2100      	movs	r1, #0
 80022a2:	f000 fd01 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a6:	2310      	movs	r3, #16
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	0018      	movs	r0, r3
 80022ac:	2310      	movs	r3, #16
 80022ae:	001a      	movs	r2, r3
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fcf9 	bl	8002ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b6:	003b      	movs	r3, r7
 80022b8:	0018      	movs	r0, r3
 80022ba:	2310      	movs	r3, #16
 80022bc:	001a      	movs	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f000 fcf2 	bl	8002ca8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c4:	0021      	movs	r1, r4
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	2201      	movs	r2, #1
 80022d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2210      	movs	r2, #16
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fa7f 	bl	80007e4 <HAL_RCC_OscConfig>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022ea:	f000 f8fb 	bl	80024e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ee:	2110      	movs	r1, #16
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2207      	movs	r2, #7
 80022f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002302:	187b      	adds	r3, r7, r1
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002308:	187b      	adds	r3, r7, r1
 800230a:	2100      	movs	r1, #0
 800230c:	0018      	movs	r0, r3
 800230e:	f7fe fd85 	bl	8000e1c <HAL_RCC_ClockConfig>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002316:	f000 f8e5 	bl	80024e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800231a:	003b      	movs	r3, r7
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002320:	003b      	movs	r3, r7
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002326:	003b      	movs	r3, r7
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe fec9 	bl	80010c0 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002332:	f000 f8d7 	bl	80024e4 <Error_Handler>
  }
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b015      	add	sp, #84	; 0x54
 800233c:	bd90      	pop	{r4, r7, pc}
	...

08002340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MX_SPI1_Init+0x78>)
 8002348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_SPI1_Init+0x74>)
 800234c:	2282      	movs	r2, #130	; 0x82
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <MX_SPI1_Init+0x74>)
 800235a:	22e0      	movs	r2, #224	; 0xe0
 800235c:	00d2      	lsls	r2, r2, #3
 800235e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_SPI1_Init+0x74>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002376:	2218      	movs	r2, #24
 8002378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_SPI1_Init+0x74>)
 800238e:	2207      	movs	r2, #7
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_SPI1_Init+0x74>)
 800239a:	2208      	movs	r2, #8
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <MX_SPI1_Init+0x74>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7fe ff5b 	bl	800125c <HAL_SPI_Init>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d001      	beq.n	80023ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f000 f89b 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200004bc 	.word	0x200004bc
 80023b8:	40013000 	.word	0x40013000

080023bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023c2:	4a16      	ldr	r2, [pc, #88]	; (800241c <MX_USART1_UART_Init+0x60>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023c8:	2296      	movs	r2, #150	; 0x96
 80023ca:	0192      	lsls	r2, r2, #6
 80023cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023e2:	2204      	movs	r2, #4
 80023e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <MX_USART1_UART_Init+0x5c>)
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fa70 	bl	80018e8 <HAL_UART_Init>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800240c:	f000 f86a 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	2000043c 	.word	0x2000043c
 800241c:	40013800 	.word	0x40013800

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	240c      	movs	r4, #12
 8002428:	193b      	adds	r3, r7, r4
 800242a:	0018      	movs	r0, r3
 800242c:	2314      	movs	r3, #20
 800242e:	001a      	movs	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	f000 fc39 	bl	8002ca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <MX_GPIO_Init+0xbc>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <MX_GPIO_Init+0xbc>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0289      	lsls	r1, r1, #10
 8002440:	430a      	orrs	r2, r1
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <MX_GPIO_Init+0xbc>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <MX_GPIO_Init+0xbc>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <MX_GPIO_Init+0xbc>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	02c9      	lsls	r1, r1, #11
 800245c:	430a      	orrs	r2, r1
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <MX_GPIO_Init+0xbc>)
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	02db      	lsls	r3, r3, #11
 8002468:	4013      	ands	r3, r2
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin, GPIO_PIN_RESET);
 800246e:	2390      	movs	r3, #144	; 0x90
 8002470:	05db      	lsls	r3, r3, #23
 8002472:	2200      	movs	r2, #0
 8002474:	2119      	movs	r1, #25
 8002476:	0018      	movs	r0, r3
 8002478:	f7fe f97c 	bl	8000774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_OLED_CS_GPIO_Port, O_OLED_CS_Pin, GPIO_PIN_RESET);
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_GPIO_Init+0xc0>)
 800247e:	2200      	movs	r2, #0
 8002480:	2102      	movs	r1, #2
 8002482:	0018      	movs	r0, r3
 8002484:	f7fe f976 	bl	8000774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : O_Blinky_Pin O_OLED_DC_Pin O_OLED_RES_Pin */
  GPIO_InitStruct.Pin = O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin;
 8002488:	193b      	adds	r3, r7, r4
 800248a:	2219      	movs	r2, #25
 800248c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2201      	movs	r2, #1
 8002492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	193b      	adds	r3, r7, r4
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	193a      	adds	r2, r7, r4
 80024a2:	2390      	movs	r3, #144	; 0x90
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	0011      	movs	r1, r2
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fd fff3 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pin : O_OLED_CS_Pin */
  GPIO_InitStruct.Pin = O_OLED_CS_Pin;
 80024ae:	0021      	movs	r1, r4
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2201      	movs	r2, #1
 80024ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(O_OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <MX_GPIO_Init+0xc0>)
 80024cc:	0019      	movs	r1, r3
 80024ce:	0010      	movs	r0, r2
 80024d0:	f7fd ffe0 	bl	8000494 <HAL_GPIO_Init>

}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b009      	add	sp, #36	; 0x24
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	48000400 	.word	0x48000400

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1);
 80024e8:	e7fe      	b.n	80024e8 <Error_Handler+0x4>
	...

080024ec <ssd1306_Reset>:
#include "ssd1306.h"


void ssd1306_Reset(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <ssd1306_Reset+0x40>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	2102      	movs	r1, #2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7fe f93c 	bl	8000774 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80024fc:	2390      	movs	r3, #144	; 0x90
 80024fe:	05db      	lsls	r3, r3, #23
 8002500:	2200      	movs	r2, #0
 8002502:	2110      	movs	r1, #16
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe f935 	bl	8000774 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800250a:	200a      	movs	r0, #10
 800250c:	f7fd feec 	bl	80002e8 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002510:	2390      	movs	r3, #144	; 0x90
 8002512:	05db      	lsls	r3, r3, #23
 8002514:	2201      	movs	r2, #1
 8002516:	2110      	movs	r1, #16
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe f92b 	bl	8000774 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800251e:	200a      	movs	r0, #10
 8002520:	f7fd fee2 	bl	80002e8 <HAL_Delay>
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	48000400 	.word	0x48000400

08002530 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	0002      	movs	r2, r0
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <ssd1306_WriteCommand+0x48>)
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	0018      	movs	r0, r3
 8002544:	f7fe f916 	bl	8000774 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002548:	2390      	movs	r3, #144	; 0x90
 800254a:	05db      	lsls	r3, r3, #23
 800254c:	2200      	movs	r2, #0
 800254e:	2108      	movs	r1, #8
 8002550:	0018      	movs	r0, r3
 8002552:	f7fe f90f 	bl	8000774 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002556:	2301      	movs	r3, #1
 8002558:	425b      	negs	r3, r3
 800255a:	1df9      	adds	r1, r7, #7
 800255c:	4807      	ldr	r0, [pc, #28]	; (800257c <ssd1306_WriteCommand+0x4c>)
 800255e:	2201      	movs	r2, #1
 8002560:	f7fe ff16 	bl	8001390 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <ssd1306_WriteCommand+0x48>)
 8002566:	2201      	movs	r2, #1
 8002568:	2102      	movs	r1, #2
 800256a:	0018      	movs	r0, r3
 800256c:	f7fe f902 	bl	8000774 <HAL_GPIO_WritePin>
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	48000400 	.word	0x48000400
 800257c:	200004bc 	.word	0x200004bc

08002580 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <ssd1306_WriteData+0x48>)
 800258c:	2200      	movs	r2, #0
 800258e:	2102      	movs	r1, #2
 8002590:	0018      	movs	r0, r3
 8002592:	f7fe f8ef 	bl	8000774 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	2201      	movs	r2, #1
 800259c:	2108      	movs	r1, #8
 800259e:	0018      	movs	r0, r3
 80025a0:	f7fe f8e8 	bl	8000774 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2301      	movs	r3, #1
 80025aa:	425b      	negs	r3, r3
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <ssd1306_WriteData+0x4c>)
 80025b0:	f7fe feee 	bl	8001390 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <ssd1306_WriteData+0x48>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	2102      	movs	r1, #2
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7fe f8da 	bl	8000774 <HAL_GPIO_WritePin>
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	48000400 	.word	0x48000400
 80025cc:	200004bc 	.word	0x200004bc

080025d0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80025d4:	f7ff ff8a 	bl	80024ec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f7fd fe85 	bl	80002e8 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80025de:	20ae      	movs	r0, #174	; 0xae
 80025e0:	f7ff ffa6 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80025e4:	2020      	movs	r0, #32
 80025e6:	f7ff ffa3 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 80025ea:	2010      	movs	r0, #16
 80025ec:	f7ff ffa0 	bl	8002530 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025f0:	20b0      	movs	r0, #176	; 0xb0
 80025f2:	f7ff ff9d 	bl	8002530 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025f6:	20c8      	movs	r0, #200	; 0xc8
 80025f8:	f7ff ff9a 	bl	8002530 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ff97 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002602:	2010      	movs	r0, #16
 8002604:	f7ff ff94 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002608:	2040      	movs	r0, #64	; 0x40
 800260a:	f7ff ff91 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800260e:	2081      	movs	r0, #129	; 0x81
 8002610:	f7ff ff8e 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002614:	20ff      	movs	r0, #255	; 0xff
 8002616:	f7ff ff8b 	bl	8002530 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800261a:	20a1      	movs	r0, #161	; 0xa1
 800261c:	f7ff ff88 	bl	8002530 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002620:	20a6      	movs	r0, #166	; 0xa6
 8002622:	f7ff ff85 	bl	8002530 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002626:	20a8      	movs	r0, #168	; 0xa8
 8002628:	f7ff ff82 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800262c:	203f      	movs	r0, #63	; 0x3f
 800262e:	f7ff ff7f 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002632:	20a4      	movs	r0, #164	; 0xa4
 8002634:	f7ff ff7c 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002638:	20d3      	movs	r0, #211	; 0xd3
 800263a:	f7ff ff79 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff76 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002644:	20d5      	movs	r0, #213	; 0xd5
 8002646:	f7ff ff73 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800264a:	20f0      	movs	r0, #240	; 0xf0
 800264c:	f7ff ff70 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002650:	20d9      	movs	r0, #217	; 0xd9
 8002652:	f7ff ff6d 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002656:	2022      	movs	r0, #34	; 0x22
 8002658:	f7ff ff6a 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800265c:	20da      	movs	r0, #218	; 0xda
 800265e:	f7ff ff67 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002662:	2012      	movs	r0, #18
 8002664:	f7ff ff64 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002668:	20db      	movs	r0, #219	; 0xdb
 800266a:	f7ff ff61 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800266e:	2020      	movs	r0, #32
 8002670:	f7ff ff5e 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002674:	208d      	movs	r0, #141	; 0x8d
 8002676:	f7ff ff5b 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800267a:	2014      	movs	r0, #20
 800267c:	f7ff ff58 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002680:	20af      	movs	r0, #175	; 0xaf
 8002682:	f7ff ff55 	bl	8002530 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f810 	bl	80026ac <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800268c:	f000 f832 	bl	80026f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <ssd1306_Init+0xd8>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <ssd1306_Init+0xd8>)
 8002698:	2200      	movs	r2, #0
 800269a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <ssd1306_Init+0xd8>)
 800269e:	2201      	movs	r2, #1
 80026a0:	715a      	strb	r2, [r3, #5]
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000430 	.word	0x20000430

080026ac <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	0002      	movs	r2, r0
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e00e      	b.n	80026dc <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <ssd1306_Fill+0x1e>
 80026c6:	2100      	movs	r1, #0
 80026c8:	e000      	b.n	80026cc <ssd1306_Fill+0x20>
 80026ca:	21ff      	movs	r1, #255	; 0xff
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <ssd1306_Fill+0x40>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <ssd1306_Fill+0x44>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d9ec      	bls.n	80026be <ssd1306_Fill+0x12>
    }
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000030 	.word	0x20000030
 80026f0:	000003ff 	.word	0x000003ff

080026f4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e01a      	b.n	8002738 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3b50      	subs	r3, #80	; 0x50
 8002708:	b2db      	uxtb	r3, r3
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff ff10 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff ff0d 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002716:	2010      	movs	r0, #16
 8002718:	f7ff ff0a 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	01da      	lsls	r2, r3, #7
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <ssd1306_UpdateScreen+0x54>)
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff ff29 	bl	8002580 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 800272e:	1dfb      	adds	r3, r7, #7
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	3201      	adds	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b07      	cmp	r3, #7
 800273e:	d9e0      	bls.n	8002702 <ssd1306_UpdateScreen+0xe>
    }
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000030 	.word	0x20000030

0800274c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	0004      	movs	r4, r0
 8002754:	0008      	movs	r0, r1
 8002756:	0011      	movs	r1, r2
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	1c22      	adds	r2, r4, #0
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	1c02      	adds	r2, r0, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	1d7b      	adds	r3, r7, #5
 8002766:	1c0a      	adds	r2, r1, #0
 8002768:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b25b      	sxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	db52      	blt.n	800281a <ssd1306_DrawPixel+0xce>
 8002774:	1dbb      	adds	r3, r7, #6
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b3f      	cmp	r3, #63	; 0x3f
 800277a:	d84e      	bhi.n	800281a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <ssd1306_DrawPixel+0xd8>)
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8002784:	1d7b      	adds	r3, r7, #5
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	425a      	negs	r2, r3
 800278a:	4153      	adcs	r3, r2
 800278c:	b2da      	uxtb	r2, r3
 800278e:	1d7b      	adds	r3, r7, #5
 8002790:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8002792:	1d7b      	adds	r3, r7, #5
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d11e      	bne.n	80027d8 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	b2d8      	uxtb	r0, r3
 80027a6:	0003      	movs	r3, r0
 80027a8:	01db      	lsls	r3, r3, #7
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <ssd1306_DrawPixel+0xdc>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	b25a      	sxtb	r2, r3
 80027b2:	1dbb      	adds	r3, r7, #6
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2107      	movs	r1, #7
 80027b8:	400b      	ands	r3, r1
 80027ba:	2101      	movs	r1, #1
 80027bc:	4099      	lsls	r1, r3
 80027be:	000b      	movs	r3, r1
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b259      	sxtb	r1, r3
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	0003      	movs	r3, r0
 80027cc:	01db      	lsls	r3, r3, #7
 80027ce:	18d3      	adds	r3, r2, r3
 80027d0:	b2c9      	uxtb	r1, r1
 80027d2:	4a15      	ldr	r2, [pc, #84]	; (8002828 <ssd1306_DrawPixel+0xdc>)
 80027d4:	54d1      	strb	r1, [r2, r3]
 80027d6:	e021      	b.n	800281c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	1dbb      	adds	r3, r7, #6
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	0003      	movs	r3, r0
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	18d3      	adds	r3, r2, r3
 80027ea:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <ssd1306_DrawPixel+0xdc>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	1dba      	adds	r2, r7, #6
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	2107      	movs	r1, #7
 80027f6:	400a      	ands	r2, r1
 80027f8:	2101      	movs	r1, #1
 80027fa:	4091      	lsls	r1, r2
 80027fc:	000a      	movs	r2, r1
 80027fe:	b252      	sxtb	r2, r2
 8002800:	43d2      	mvns	r2, r2
 8002802:	b252      	sxtb	r2, r2
 8002804:	4013      	ands	r3, r2
 8002806:	b259      	sxtb	r1, r3
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	0003      	movs	r3, r0
 800280e:	01db      	lsls	r3, r3, #7
 8002810:	18d3      	adds	r3, r2, r3
 8002812:	b2c9      	uxtb	r1, r1
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <ssd1306_DrawPixel+0xdc>)
 8002816:	54d1      	strb	r1, [r2, r3]
 8002818:	e000      	b.n	800281c <ssd1306_DrawPixel+0xd0>
        return;
 800281a:	46c0      	nop			; (mov r8, r8)
    }
}
 800281c:	46bd      	mov	sp, r7
 800281e:	b003      	add	sp, #12
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000430 	.word	0x20000430
 8002828:	20000030 	.word	0x20000030

0800282c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	0004      	movs	r4, r0
 8002834:	1d38      	adds	r0, r7, #4
 8002836:	6001      	str	r1, [r0, #0]
 8002838:	6042      	str	r2, [r0, #4]
 800283a:	0019      	movs	r1, r3
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	1c22      	adds	r2, r4, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	230e      	movs	r3, #14
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	1c0a      	adds	r2, r1, #0
 800284a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800284c:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <ssd1306_WriteChar+0x11c>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	001a      	movs	r2, r3
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	18d3      	adds	r3, r2, r3
 8002858:	2b7f      	cmp	r3, #127	; 0x7f
 800285a:	dc07      	bgt.n	800286c <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <ssd1306_WriteChar+0x11c>)
 800285e:	885b      	ldrh	r3, [r3, #2]
 8002860:	001a      	movs	r2, r3
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002868:	2b3f      	cmp	r3, #63	; 0x3f
 800286a:	dd01      	ble.n	8002870 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 800286c:	2300      	movs	r3, #0
 800286e:	e066      	b.n	800293e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	e051      	b.n	800291a <ssd1306_WriteChar+0xee>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	230f      	movs	r3, #15
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	3b20      	subs	r3, #32
 8002882:	1d39      	adds	r1, r7, #4
 8002884:	7849      	ldrb	r1, [r1, #1]
 8002886:	434b      	muls	r3, r1
 8002888:	0019      	movs	r1, r3
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	18cb      	adds	r3, r1, r3
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e035      	b.n	8002908 <ssd1306_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	409a      	lsls	r2, r3
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	d014      	beq.n	80028d4 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <ssd1306_WriteChar+0x11c>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	18d3      	adds	r3, r2, r3
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <ssd1306_WriteChar+0x11c>)
 80028ba:	885b      	ldrh	r3, [r3, #2]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	18d3      	adds	r3, r2, r3
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	230e      	movs	r3, #14
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	001a      	movs	r2, r3
 80028ce:	f7ff ff3d 	bl	800274c <ssd1306_DrawPixel>
 80028d2:	e016      	b.n	8002902 <ssd1306_WriteChar+0xd6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <ssd1306_WriteChar+0x11c>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	18d3      	adds	r3, r2, r3
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <ssd1306_WriteChar+0x11c>)
 80028e4:	885b      	ldrh	r3, [r3, #2]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	b2d9      	uxtb	r1, r3
 80028f0:	230e      	movs	r3, #14
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	425a      	negs	r2, r3
 80028f8:	4153      	adcs	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	001a      	movs	r2, r3
 80028fe:	f7ff ff25 	bl	800274c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	3301      	adds	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4293      	cmp	r3, r2
 8002912:	d3c3      	bcc.n	800289c <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3301      	adds	r3, #1
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	001a      	movs	r2, r3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4293      	cmp	r3, r2
 8002924:	d3a7      	bcc.n	8002876 <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <ssd1306_WriteChar+0x11c>)
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	18d3      	adds	r3, r2, r3
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <ssd1306_WriteChar+0x11c>)
 8002936:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002938:	230f      	movs	r3, #15
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b009      	add	sp, #36	; 0x24
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000430 	.word	0x20000430

0800294c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	1d38      	adds	r0, r7, #4
 8002956:	6001      	str	r1, [r0, #0]
 8002958:	6042      	str	r2, [r0, #4]
 800295a:	001a      	movs	r2, r3
 800295c:	1cfb      	adds	r3, r7, #3
 800295e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8002960:	e014      	b.n	800298c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	7818      	ldrb	r0, [r3, #0]
 8002966:	1cfb      	adds	r3, r7, #3
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	1d3a      	adds	r2, r7, #4
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	6852      	ldr	r2, [r2, #4]
 8002970:	f7ff ff5c 	bl	800282c <ssd1306_WriteChar>
 8002974:	0003      	movs	r3, r0
 8002976:	001a      	movs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d002      	beq.n	8002986 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	e008      	b.n	8002998 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3301      	adds	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e6      	bne.n	8002962 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	781b      	ldrb	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}

080029a0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	0002      	movs	r2, r0
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	1dbb      	adds	r3, r7, #6
 80029ae:	1c0a      	adds	r2, r1, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <ssd1306_SetCursor+0x30>)
 80029ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <ssd1306_SetCursor+0x30>)
 80029c4:	805a      	strh	r2, [r3, #2]
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000430 	.word	0x20000430

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_MspInit+0x44>)
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_MspInit+0x44>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_MspInit+0x44>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_MspInit+0x44>)
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_MspInit+0x44>)
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	0549      	lsls	r1, r1, #21
 80029fc:	430a      	orrs	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_MspInit+0x44>)
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	055b      	lsls	r3, r3, #21
 8002a08:	4013      	ands	r3, r2
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	2314      	movs	r3, #20
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	0018      	movs	r0, r3
 8002a2a:	2314      	movs	r3, #20
 8002a2c:	001a      	movs	r2, r3
 8002a2e:	2100      	movs	r1, #0
 8002a30:	f000 f93a 	bl	8002ca8 <memset>
  if(hspi->Instance==SPI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_SPI_MspInit+0x90>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d132      	bne.n	8002aa4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	0149      	lsls	r1, r1, #5
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0289      	lsls	r1, r1, #10
 8002a64:	430a      	orrs	r2, r1
 8002a66:	615a      	str	r2, [r3, #20]
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_SPI_MspInit+0x94>)
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = O_SCK_SCL_Pin|O_MOSI_SDA_Pin;
 8002a76:	2114      	movs	r1, #20
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	22a0      	movs	r2, #160	; 0xa0
 8002a7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2202      	movs	r2, #2
 8002a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	187a      	adds	r2, r7, r1
 8002a98:	2390      	movs	r3, #144	; 0x90
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7fd fcf8 	bl	8000494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b00a      	add	sp, #40	; 0x28
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40013000 	.word	0x40013000
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	2314      	movs	r3, #20
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	2314      	movs	r3, #20
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f000 f8ee 	bl	8002ca8 <memset>
  if(huart->Instance==USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_UART_MspInit+0x94>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d133      	bne.n	8002b3e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	01c9      	lsls	r1, r1, #7
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0289      	lsls	r1, r1, #10
 8002afc:	430a      	orrs	r2, r1
 8002afe:	615a      	str	r2, [r3, #20]
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	029b      	lsls	r3, r3, #10
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b0e:	2114      	movs	r1, #20
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	22c0      	movs	r2, #192	; 0xc0
 8002b14:	00d2      	lsls	r2, r2, #3
 8002b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	187b      	adds	r3, r7, r1
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	2203      	movs	r2, #3
 8002b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	187a      	adds	r2, r7, r1
 8002b32:	2390      	movs	r3, #144	; 0x90
 8002b34:	05db      	lsls	r3, r3, #23
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7fd fcab 	bl	8000494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b00a      	add	sp, #40	; 0x28
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40021000 	.word	0x40021000

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5e:	e7fe      	b.n	8002b5e <HardFault_Handler+0x4>

08002b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b78:	f7fd fb9a 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <SystemInit+0x70>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <SystemInit+0x70>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <SystemInit+0x70>)
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <SystemInit+0x70>)
 8002b9a:	4917      	ldr	r1, [pc, #92]	; (8002bf8 <SystemInit+0x74>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <SystemInit+0x70>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <SystemInit+0x70>)
 8002ba6:	4915      	ldr	r1, [pc, #84]	; (8002bfc <SystemInit+0x78>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <SystemInit+0x70>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <SystemInit+0x70>)
 8002bb2:	4913      	ldr	r1, [pc, #76]	; (8002c00 <SystemInit+0x7c>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <SystemInit+0x70>)
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <SystemInit+0x70>)
 8002bbe:	4911      	ldr	r1, [pc, #68]	; (8002c04 <SystemInit+0x80>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <SystemInit+0x70>)
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <SystemInit+0x70>)
 8002bca:	210f      	movs	r1, #15
 8002bcc:	438a      	bics	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <SystemInit+0x70>)
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <SystemInit+0x70>)
 8002bd6:	490c      	ldr	r1, [pc, #48]	; (8002c08 <SystemInit+0x84>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SystemInit+0x70>)
 8002bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SystemInit+0x70>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <SystemInit+0x70>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]

}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08ffb80c 	.word	0x08ffb80c
 8002bfc:	fef6ffff 	.word	0xfef6ffff
 8002c00:	fffbffff 	.word	0xfffbffff
 8002c04:	ffc0ffff 	.word	0xffc0ffff
 8002c08:	fffffeec 	.word	0xfffffeec

08002c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c12:	490e      	ldr	r1, [pc, #56]	; (8002c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <LoopForever+0xe>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c28:	4c0b      	ldr	r4, [pc, #44]	; (8002c58 <LoopForever+0x16>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c36:	f7ff ffa5 	bl	8002b84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c3a:	f000 f811 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c3e:	f7ff fa65 	bl	800210c <main>

08002c42 <LoopForever>:

LoopForever:
    b LoopForever
 8002c42:	e7fe      	b.n	8002c42 <LoopForever>
  ldr   r0, =_estack
 8002c44:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002c50:	08003a90 	.word	0x08003a90
  ldr r2, =_sbss
 8002c54:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002c58:	20000520 	.word	0x20000520

08002c5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c5c:	e7fe      	b.n	8002c5c <ADC1_IRQHandler>
	...

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2600      	movs	r6, #0
 8002c64:	4d0c      	ldr	r5, [pc, #48]	; (8002c98 <__libc_init_array+0x38>)
 8002c66:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c68:	1b64      	subs	r4, r4, r5
 8002c6a:	10a4      	asrs	r4, r4, #2
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	2600      	movs	r6, #0
 8002c72:	f000 f821 	bl	8002cb8 <_init>
 8002c76:	4d0a      	ldr	r5, [pc, #40]	; (8002ca0 <__libc_init_array+0x40>)
 8002c78:	4c0a      	ldr	r4, [pc, #40]	; (8002ca4 <__libc_init_array+0x44>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	00b3      	lsls	r3, r6, #2
 8002c86:	58eb      	ldr	r3, [r5, r3]
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	00b3      	lsls	r3, r6, #2
 8002c90:	58eb      	ldr	r3, [r5, r3]
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08003a88 	.word	0x08003a88
 8002c9c:	08003a88 	.word	0x08003a88
 8002ca0:	08003a88 	.word	0x08003a88
 8002ca4:	08003a8c 	.word	0x08003a8c

08002ca8 <memset>:
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1812      	adds	r2, r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
