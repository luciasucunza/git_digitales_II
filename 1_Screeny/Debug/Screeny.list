
Screeny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e38  08002e38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e38  08002e38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e38  08002e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000000c  08002e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08002e4c  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5d4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001782  00000000  00000000  0002a608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  0002bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e8  00000000  00000000  0002c338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c763  00000000  00000000  0002c820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069fe  00000000  00000000  00038f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003f874  00000000  00000000  0003f981  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007f1f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000124c  00000000  00000000  0007f270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002064 	.word	0x08002064

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002064 	.word	0x08002064

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fdf1 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fee2 	bl	8001018 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e7 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000430 	.word	0x20000430

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000430 	.word	0x20000430

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	230f      	movs	r3, #15
 8000308:	400b      	ands	r3, r1
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0011      	movs	r1, r2
 800031e:	2203      	movs	r2, #3
 8000320:	400a      	ands	r2, r1
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	4091      	lsls	r1, r2
 8000328:	000a      	movs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
 800032e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	019b      	lsls	r3, r3, #6
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	401a      	ands	r2, r3
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	2303      	movs	r3, #3
 8000340:	4003      	ands	r3, r0
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4023      	ands	r3, r4
 8000352:	3b08      	subs	r3, #8
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	3306      	adds	r3, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18c3      	adds	r3, r0, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	33c0      	adds	r3, #192	; 0xc0
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	589b      	ldr	r3, [r3, r2]
 8000374:	1dfa      	adds	r2, r7, #7
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	0011      	movs	r1, r2
 800037a:	2203      	movs	r2, #3
 800037c:	400a      	ands	r2, r1
 800037e:	00d2      	lsls	r2, r2, #3
 8000380:	21ff      	movs	r1, #255	; 0xff
 8000382:	4091      	lsls	r1, r2
 8000384:	000a      	movs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	401a      	ands	r2, r3
 800038a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	019b      	lsls	r3, r3, #6
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	401a      	ands	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	2303      	movs	r3, #3
 800039c:	4003      	ands	r3, r0
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <NVIC_SetPriority+0xd8>)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	501a      	str	r2, [r3, r0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	210f      	movs	r1, #15
 8000418:	187b      	adds	r3, r7, r1
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b25b      	sxtb	r3, r3
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff5d 	bl	80002e8 <NVIC_SetPriority>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffbf 	bl	80003c4 <SysTick_Config>
 8000446:	0003      	movs	r3, r0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	e14f      	b.n	8000708 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	4091      	lsls	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d100      	bne.n	8000480 <HAL_GPIO_Init+0x30>
 800047e:	e140      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d003      	beq.n	8000490 <HAL_GPIO_Init+0x40>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b12      	cmp	r3, #18
 800048e:	d123      	bne.n	80004d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	08da      	lsrs	r2, r3, #3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2207      	movs	r2, #7
 80004a2:	4013      	ands	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	220f      	movs	r2, #15
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	691a      	ldr	r2, [r3, #16]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2107      	movs	r1, #7
 80004bc:	400b      	ands	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	6939      	ldr	r1, [r7, #16]
 80004d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2203      	movs	r2, #3
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2203      	movs	r2, #3
 80004f6:	401a      	ands	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00b      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d007      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	2b11      	cmp	r3, #17
 8000522:	d003      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b12      	cmp	r3, #18
 800052a:	d130      	bne.n	800058e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	43da      	mvns	r2, r3
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000562:	2201      	movs	r2, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
 800056a:	43da      	mvns	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	2201      	movs	r2, #1
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4313      	orrs	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	43da      	mvns	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	4013      	ands	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <HAL_GPIO_Init+0x17c>
 80005ca:	e09a      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005cc:	4b54      	ldr	r3, [pc, #336]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4b53      	ldr	r3, [pc, #332]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	4b51      	ldr	r3, [pc, #324]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e4:	4a4f      	ldr	r2, [pc, #316]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	589b      	ldr	r3, [r3, r2]
 80005f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2203      	movs	r2, #3
 80005f6:	4013      	ands	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	43da      	mvns	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	429a      	cmp	r2, r3
 8000610:	d013      	beq.n	800063a <HAL_GPIO_Init+0x1ea>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <HAL_GPIO_Init+0x2d8>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d00d      	beq.n	8000636 <HAL_GPIO_Init+0x1e6>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a43      	ldr	r2, [pc, #268]	; (800072c <HAL_GPIO_Init+0x2dc>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d007      	beq.n	8000632 <HAL_GPIO_Init+0x1e2>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_GPIO_Init+0x1de>
 800062a:	2303      	movs	r3, #3
 800062c:	e006      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800062e:	2305      	movs	r3, #5
 8000630:	e004      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000632:	2302      	movs	r3, #2
 8000634:	e002      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800063a:	2300      	movs	r3, #0
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	2103      	movs	r1, #3
 8000640:	400a      	ands	r2, r1
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	4093      	lsls	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4313      	orrs	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800064c:	4935      	ldr	r1, [pc, #212]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	3302      	adds	r3, #2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	43da      	mvns	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	4013      	ands	r3, r2
 8000674:	d003      	beq.n	800067e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	43da      	mvns	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	43da      	mvns	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	035b      	lsls	r3, r3, #13
 80006c6:	4013      	ands	r3, r2
 80006c8:	d003      	beq.n	80006d2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	43da      	mvns	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	039b      	lsls	r3, r3, #14
 80006f0:	4013      	ands	r3, r2
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	40da      	lsrs	r2, r3
 8000710:	1e13      	subs	r3, r2, #0
 8000712:	d000      	beq.n	8000716 <HAL_GPIO_Init+0x2c6>
 8000714:	e6a8      	b.n	8000468 <HAL_GPIO_Init+0x18>
  } 
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b006      	add	sp, #24
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800
 8000730:	48000c00 	.word	0x48000c00
 8000734:	40010400 	.word	0x40010400

08000738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	0008      	movs	r0, r1
 8000742:	0011      	movs	r1, r2
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	1c7b      	adds	r3, r7, #1
 800074c:	1c0a      	adds	r2, r1, #0
 800074e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000750:	1c7b      	adds	r3, r7, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000760:	e003      	b.n	800076a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000762:	1cbb      	adds	r3, r7, #2
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	000a      	movs	r2, r1
 800077c:	1cbb      	adds	r3, r7, #2
 800077e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	1cbb      	adds	r3, r7, #2
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	405a      	eors	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	615a      	str	r2, [r3, #20]
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	d100      	bne.n	80007b0 <HAL_RCC_OscConfig+0x18>
 80007ae:	e08d      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b0:	4bc3      	ldr	r3, [pc, #780]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	220c      	movs	r2, #12
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d00e      	beq.n	80007da <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007bc:	4bc0      	ldr	r3, [pc, #768]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	220c      	movs	r2, #12
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d116      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
 80007c8:	4bbd      	ldr	r3, [pc, #756]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	401a      	ands	r2, r3
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	025b      	lsls	r3, r3, #9
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d10d      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007da:	4bb9      	ldr	r3, [pc, #740]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	4013      	ands	r3, r2
 80007e4:	d100      	bne.n	80007e8 <HAL_RCC_OscConfig+0x50>
 80007e6:	e070      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d000      	beq.n	80007f2 <HAL_RCC_OscConfig+0x5a>
 80007f0:	e06b      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e2b6      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d107      	bne.n	800080e <HAL_RCC_OscConfig+0x76>
 80007fe:	4bb0      	ldr	r3, [pc, #704]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4baf      	ldr	r3, [pc, #700]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0249      	lsls	r1, r1, #9
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e02f      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10c      	bne.n	8000830 <HAL_RCC_OscConfig+0x98>
 8000816:	4baa      	ldr	r3, [pc, #680]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4ba9      	ldr	r3, [pc, #676]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800081c:	49a9      	ldr	r1, [pc, #676]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800081e:	400a      	ands	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	4ba7      	ldr	r3, [pc, #668]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4ba6      	ldr	r3, [pc, #664]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000828:	49a7      	ldr	r1, [pc, #668]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800082a:	400a      	ands	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e01e      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d10e      	bne.n	8000856 <HAL_RCC_OscConfig+0xbe>
 8000838:	4ba1      	ldr	r3, [pc, #644]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4ba0      	ldr	r3, [pc, #640]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	02c9      	lsls	r1, r1, #11
 8000842:	430a      	orrs	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b9d      	ldr	r3, [pc, #628]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0249      	lsls	r1, r1, #9
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e00b      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b99      	ldr	r3, [pc, #612]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800085c:	4999      	ldr	r1, [pc, #612]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800085e:	400a      	ands	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000868:	4997      	ldr	r1, [pc, #604]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800086a:	400a      	ands	r2, r1
 800086c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d014      	beq.n	80008a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000876:	f7ff fd0f 	bl	8000298 <HAL_GetTick>
 800087a:	0003      	movs	r3, r0
 800087c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fd0a 	bl	8000298 <HAL_GetTick>
 8000884:	0002      	movs	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e268      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	029b      	lsls	r3, r3, #10
 800089a:	4013      	ands	r3, r2
 800089c:	d0f0      	beq.n	8000880 <HAL_RCC_OscConfig+0xe8>
 800089e:	e015      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcfa 	bl	8000298 <HAL_GetTick>
 80008a4:	0003      	movs	r3, r0
 80008a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a8:	e008      	b.n	80008bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fcf5 	bl	8000298 <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d901      	bls.n	80008bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e253      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008bc:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	029b      	lsls	r3, r3, #10
 80008c4:	4013      	ands	r3, r2
 80008c6:	d1f0      	bne.n	80008aa <HAL_RCC_OscConfig+0x112>
 80008c8:	e000      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	4013      	ands	r3, r2
 80008d4:	d100      	bne.n	80008d8 <HAL_RCC_OscConfig+0x140>
 80008d6:	e069      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008d8:	4b79      	ldr	r3, [pc, #484]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	220c      	movs	r2, #12
 80008de:	4013      	ands	r3, r2
 80008e0:	d00b      	beq.n	80008fa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	220c      	movs	r2, #12
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d11c      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	4013      	ands	r3, r2
 80008f8:	d116      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	d005      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d001      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e229      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000910:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	22f8      	movs	r2, #248	; 0xf8
 8000916:	4393      	bics	r3, r2
 8000918:	0019      	movs	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000926:	e041      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d024      	beq.n	800097a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093c:	f7ff fcac 	bl	8000298 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	e008      	b.n	8000958 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000946:	f7ff fca7 	bl	8000298 <HAL_GetTick>
 800094a:	0002      	movs	r2, r0
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d901      	bls.n	8000958 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e205      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2202      	movs	r2, #2
 800095e:	4013      	ands	r3, r2
 8000960:	d0f1      	beq.n	8000946 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	22f8      	movs	r2, #248	; 0xf8
 8000968:	4393      	bics	r3, r2
 800096a:	0019      	movs	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	00da      	lsls	r2, r3, #3
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e018      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000980:	2101      	movs	r1, #1
 8000982:	438a      	bics	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000986:	f7ff fc87 	bl	8000298 <HAL_GetTick>
 800098a:	0003      	movs	r3, r0
 800098c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc82 	bl	8000298 <HAL_GetTick>
 8000994:	0002      	movs	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e1e0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	d1f1      	bne.n	8000990 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2208      	movs	r2, #8
 80009b2:	4013      	ands	r3, r2
 80009b4:	d036      	beq.n	8000a24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ca:	f7ff fc65 	bl	8000298 <HAL_GetTick>
 80009ce:	0003      	movs	r3, r0
 80009d0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d2:	e008      	b.n	80009e6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d4:	f7ff fc60 	bl	8000298 <HAL_GetTick>
 80009d8:	0002      	movs	r2, r0
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d901      	bls.n	80009e6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e1be      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	d0f1      	beq.n	80009d4 <HAL_RCC_OscConfig+0x23c>
 80009f0:	e018      	b.n	8000a24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	438a      	bics	r2, r1
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fc4b 	bl	8000298 <HAL_GetTick>
 8000a02:	0003      	movs	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fc46 	bl	8000298 <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e1a4      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	d1f1      	bne.n	8000a08 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0x298>
 8000a2e:	e0b5      	b.n	8000b9c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a30:	2317      	movs	r3, #23
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	d111      	bne.n	8000a68 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0549      	lsls	r1, r1, #21
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	d11a      	bne.n	8000aaa <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0049      	lsls	r1, r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fc09 	bl	8000298 <HAL_GetTick>
 8000a86:	0003      	movs	r3, r0
 8000a88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	e008      	b.n	8000a9e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8c:	f7ff fc04 	bl	8000298 <HAL_GetTick>
 8000a90:	0002      	movs	r2, r0
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b64      	cmp	r3, #100	; 0x64
 8000a98:	d901      	bls.n	8000a9e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e162      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d0f0      	beq.n	8000a8c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10e      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x338>
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab4:	6a1a      	ldr	r2, [r3, #32]
 8000ab6:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	e035      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	fffeffff 	.word	0xfffeffff
 8000ac8:	fffbffff 	.word	0xfffbffff
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10c      	bne.n	8000af2 <HAL_RCC_OscConfig+0x35a>
 8000ad8:	4ba4      	ldr	r3, [pc, #656]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	4ba3      	ldr	r3, [pc, #652]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	438a      	bics	r2, r1
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ae6:	6a1a      	ldr	r2, [r3, #32]
 8000ae8:	4ba0      	ldr	r3, [pc, #640]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000aea:	2104      	movs	r1, #4
 8000aec:	438a      	bics	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	e01c      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d10c      	bne.n	8000b14 <HAL_RCC_OscConfig+0x37c>
 8000afa:	4b9c      	ldr	r3, [pc, #624]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4b99      	ldr	r3, [pc, #612]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b08:	6a1a      	ldr	r2, [r3, #32]
 8000b0a:	4b98      	ldr	r3, [pc, #608]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	621a      	str	r2, [r3, #32]
 8000b12:	e00b      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000b14:	4b95      	ldr	r3, [pc, #596]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b16:	6a1a      	ldr	r2, [r3, #32]
 8000b18:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b22:	6a1a      	ldr	r2, [r3, #32]
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b26:	2104      	movs	r1, #4
 8000b28:	438a      	bics	r2, r1
 8000b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b34:	f7ff fbb0 	bl	8000298 <HAL_GetTick>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	e009      	b.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbab 	bl	8000298 <HAL_GetTick>
 8000b42:	0002      	movs	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	4a89      	ldr	r2, [pc, #548]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e108      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	2202      	movs	r2, #2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d0f0      	beq.n	8000b3e <HAL_RCC_OscConfig+0x3a6>
 8000b5c:	e013      	b.n	8000b86 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fb9b 	bl	8000298 <HAL_GetTick>
 8000b62:	0003      	movs	r3, r0
 8000b64:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b66:	e009      	b.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4a7f      	ldr	r2, [pc, #508]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e0f3      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7c:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	2202      	movs	r2, #2
 8000b82:	4013      	ands	r3, r2
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b96:	4977      	ldr	r1, [pc, #476]	; (8000d74 <HAL_RCC_OscConfig+0x5dc>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d063      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12a      	bne.n	8000c04 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb2:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbe:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bd0:	f7ff fb62 	bl	8000298 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e0c0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000be2:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0f1      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	22f8      	movs	r2, #248	; 0xf8
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	e034      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	d111      	bne.n	8000c30 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c12:	2104      	movs	r1, #4
 8000c14:	438a      	bics	r2, r1
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c18:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	22f8      	movs	r2, #248	; 0xf8
 8000c1e:	4393      	bics	r3, r2
 8000c20:	0019      	movs	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	00da      	lsls	r2, r3, #3
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2e:	e01e      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c36:	2104      	movs	r1, #4
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	438a      	bics	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c48:	f7ff fb26 	bl	8000298 <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c52:	f7ff fb21 	bl	8000298 <HAL_GetTick>
 8000c56:	0002      	movs	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e07f      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d1f1      	bne.n	8000c52 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4e0>
 8000c76:	e074      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x4ee>
 8000c84:	e06b      	b.n	8000d5e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d14c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c94:	4938      	ldr	r1, [pc, #224]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fafd 	bl	8000298 <HAL_GetTick>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca4:	f7ff faf8 	bl	8000298 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e056      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	049b      	lsls	r3, r3, #18
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	4393      	bics	r3, r2
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_RCC_OscConfig+0x5e4>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cec:	430a      	orrs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0449      	lsls	r1, r1, #17
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff facb 	bl	8000298 <HAL_GetTick>
 8000d02:	0003      	movs	r3, r0
 8000d04:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d08:	f7ff fac6 	bl	8000298 <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e024      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	049b      	lsls	r3, r3, #18
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x570>
 8000d26:	e01c      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2e:	4912      	ldr	r1, [pc, #72]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fab0 	bl	8000298 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d3e:	f7ff faab 	bl	8000298 <HAL_GetTick>
 8000d42:	0002      	movs	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e009      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	049b      	lsls	r3, r3, #18
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5a6>
 8000d5c:	e001      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	00001388 	.word	0x00001388
 8000d74:	efffffff 	.word	0xefffffff
 8000d78:	feffffff 	.word	0xfeffffff
 8000d7c:	ffc2ffff 	.word	0xffc2ffff

08000d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d8e:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d911      	bls.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9c:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4393      	bics	r3, r2
 8000da4:	0019      	movs	r1, r3
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dae:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0b6      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d009      	beq.n	8000dde <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dca:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	22f0      	movs	r2, #240	; 0xf0
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_ClockConfig+0x6a>
 8000de8:	e067      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d114      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e095      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d107      	bne.n	8000e1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	049b      	lsls	r3, r3, #18
 8000e12:	4013      	ands	r3, r2
 8000e14:	d108      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e089      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1a:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e082      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e3c:	f7ff fa2c 	bl	8000298 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d111      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	e009      	b.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff fa23 	bl	8000298 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4a39      	ldr	r2, [pc, #228]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e065      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	220c      	movs	r2, #12
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d1ef      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xce>
 8000e6e:	e024      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d11b      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e78:	e009      	b.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f7ff fa0d 	bl	8000298 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e04f      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d1ef      	bne.n	8000e7a <HAL_RCC_ClockConfig+0xfa>
 8000e9a:	e00e      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9c:	f7ff f9fc 	bl	8000298 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e03e      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d211      	bcs.n	8000eec <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4393      	bics	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d001      	beq.n	8000eec <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d009      	beq.n	8000f0a <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_RCC_ClockConfig+0x1c4>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f0a:	f000 f821 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8000f0e:	0001      	movs	r1, r0
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	220f      	movs	r2, #15
 8000f18:	4013      	ands	r3, r2
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_RCC_ClockConfig+0x1c8>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	000a      	movs	r2, r1
 8000f20:	40da      	lsrs	r2, r3
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_ClockConfig+0x1cc>)
 8000f24:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff f98e 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00001388 	.word	0x00001388
 8000f44:	fffff8ff 	.word	0xfffff8ff
 8000f48:	08002e28 	.word	0x08002e28
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08f      	sub	sp, #60	; 0x3c
 8000f54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f56:	2314      	movs	r3, #20
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f5e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d002      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0x4a>
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d003      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x50>
 8000f98:	e02d      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f9e:	e02d      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2214      	movs	r2, #20
 8000faa:	18ba      	adds	r2, r7, r2
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d009      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fcc:	f7ff f89c 	bl	8000108 <__udivsi3>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4353      	muls	r3, r2
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fda:	e009      	b.n	8000ff0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fde:	000a      	movs	r2, r1
 8000fe0:	0152      	lsls	r2, r2, #5
 8000fe2:	1a52      	subs	r2, r2, r1
 8000fe4:	0193      	lsls	r3, r2, #6
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	185b      	adds	r3, r3, r1
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ff4:	e002      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ffa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b00f      	add	sp, #60	; 0x3c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	0800207c 	.word	0x0800207c
 800100c:	0800208c 	.word	0x0800208c
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200

08001018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_RCC_GetHCLKFreq+0x10>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e08a      	b.n	8001154 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	225d      	movs	r2, #93	; 0x5d
 8001048:	5c9b      	ldrb	r3, [r3, r2]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	225c      	movs	r2, #92	; 0x5c
 8001054:	2100      	movs	r1, #0
 8001056:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0018      	movs	r0, r3
 800105c:	f000 ff02 	bl	8001e64 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	225d      	movs	r2, #93	; 0x5d
 8001064:	2102      	movs	r1, #2
 8001066:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	438a      	bics	r2, r1
 8001076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	23e0      	movs	r3, #224	; 0xe0
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	429a      	cmp	r2, r3
 8001082:	d902      	bls.n	800108a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e002      	b.n	8001090 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	23f0      	movs	r3, #240	; 0xf0
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	429a      	cmp	r2, r3
 800109a:	d008      	beq.n	80010ae <HAL_SPI_Init+0x82>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	23e0      	movs	r3, #224	; 0xe0
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d002      	beq.n	80010ae <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	23e0      	movs	r3, #224	; 0xe0
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	429a      	cmp	r2, r3
 80010c0:	d903      	bls.n	80010ca <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2202      	movs	r2, #2
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
 80010c8:	e002      	b.n	80010d0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6999      	ldr	r1, [r3, #24]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	400b      	ands	r3, r1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	0011      	movs	r1, r2
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	2204      	movs	r2, #4
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	431a      	orrs	r2, r3
 8001128:	0011      	movs	r1, r2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	430a      	orrs	r2, r1
 8001132:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4907      	ldr	r1, [pc, #28]	; (800115c <HAL_SPI_Init+0x130>)
 8001140:	400a      	ands	r2, r1
 8001142:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	225d      	movs	r2, #93	; 0x5d
 800114e:	2101      	movs	r1, #1
 8001150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b004      	add	sp, #16
 800115a:	bd80      	pop	{r7, pc}
 800115c:	fffff7ff 	.word	0xfffff7ff

08001160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001174:	231f      	movs	r3, #31
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	225c      	movs	r2, #92	; 0x5c
 8001180:	5c9b      	ldrb	r3, [r3, r2]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_SPI_Transmit+0x2a>
 8001186:	2302      	movs	r3, #2
 8001188:	e14f      	b.n	800142a <HAL_SPI_Transmit+0x2ca>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	225c      	movs	r2, #92	; 0x5c
 800118e:	2101      	movs	r1, #1
 8001190:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001192:	f7ff f881 	bl	8000298 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	225d      	movs	r2, #93	; 0x5d
 800119e:	5c9b      	ldrb	r3, [r3, r2]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d004      	beq.n	80011b0 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80011a6:	231f      	movs	r3, #31
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2202      	movs	r2, #2
 80011ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80011ae:	e131      	b.n	8001414 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_SPI_Transmit+0x5e>
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d104      	bne.n	80011c8 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80011be:	231f      	movs	r3, #31
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80011c6:	e125      	b.n	8001414 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	225d      	movs	r2, #93	; 0x5d
 80011cc:	2103      	movs	r1, #3
 80011ce:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1dba      	adds	r2, r7, #6
 80011e0:	8812      	ldrh	r2, [r2, #0]
 80011e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1dba      	adds	r2, r7, #6
 80011e8:	8812      	ldrh	r2, [r2, #0]
 80011ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2244      	movs	r2, #68	; 0x44
 80011f6:	2100      	movs	r1, #0
 80011f8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2246      	movs	r2, #70	; 0x46
 80011fe:	2100      	movs	r1, #0
 8001200:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	429a      	cmp	r2, r3
 8001218:	d108      	bne.n	800122c <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	01c9      	lsls	r1, r1, #7
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	4013      	ands	r3, r2
 8001236:	2b40      	cmp	r3, #64	; 0x40
 8001238:	d007      	beq.n	800124a <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	23e0      	movs	r3, #224	; 0xe0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	429a      	cmp	r2, r3
 8001254:	d948      	bls.n	80012e8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_SPI_Transmit+0x108>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d139      	bne.n	80012dc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3302      	adds	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800127c:	b29b      	uxth	r3, r3
 800127e:	3b01      	subs	r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001286:	e029      	b.n	80012dc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d10f      	bne.n	80012b6 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3302      	adds	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80012b4:	e012      	b.n	80012dc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <HAL_SPI_Transmit+0x172>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	d00c      	beq.n	80012dc <HAL_SPI_Transmit+0x17c>
 80012c2:	f7fe ffe9 	bl	8000298 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d804      	bhi.n	80012dc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80012d2:	231f      	movs	r3, #31
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2203      	movs	r2, #3
 80012d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80012da:	e09b      	b.n	8001414 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1d0      	bne.n	8001288 <HAL_SPI_Transmit+0x128>
 80012e6:	e071      	b.n	80013cc <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_SPI_Transmit+0x19a>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d163      	bne.n	80013c2 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d90f      	bls.n	8001324 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3302      	adds	r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b02      	subs	r3, #2
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001322:	e04e      	b.n	80013c2 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	320c      	adds	r2, #12
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001342:	e03e      	b.n	80013c2 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d124      	bne.n	800139c <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001356:	b29b      	uxth	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d90f      	bls.n	800137c <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	881a      	ldrh	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3302      	adds	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b02      	subs	r3, #2
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800137a:	e022      	b.n	80013c2 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	320c      	adds	r2, #12
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001390:	b29b      	uxth	r3, r3
 8001392:	3b01      	subs	r3, #1
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800139a:	e012      	b.n	80013c2 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <HAL_SPI_Transmit+0x258>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	d00c      	beq.n	80013c2 <HAL_SPI_Transmit+0x262>
 80013a8:	f7fe ff76 	bl	8000298 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d804      	bhi.n	80013c2 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80013b8:	231f      	movs	r3, #31
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2203      	movs	r2, #3
 80013be:	701a      	strb	r2, [r3, #0]
          goto error;
 80013c0:	e028      	b.n	8001414 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1bb      	bne.n	8001344 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 f916 	bl	8001604 <SPI_EndRxTxTransaction>
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d002      	beq.n	80013e2 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2220      	movs	r2, #32
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8001408:	231f      	movs	r3, #31
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e000      	b.n	8001414 <HAL_SPI_Transmit+0x2b4>
  }

error:
 8001412:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	225d      	movs	r2, #93	; 0x5d
 8001418:	2101      	movs	r1, #1
 800141a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	225c      	movs	r2, #92	; 0x5c
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001424:	231f      	movs	r3, #31
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b008      	add	sp, #32
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001442:	e050      	b.n	80014e6 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	d04d      	beq.n	80014e6 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8001450:	f7fe ff22 	bl	8000298 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d842      	bhi.n	80014e6 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	21e0      	movs	r1, #224	; 0xe0
 800146c:	438a      	bics	r2, r1
 800146e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2382      	movs	r3, #130	; 0x82
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	d113      	bne.n	80014a4 <SPI_WaitFlagStateUntilTimeout+0x70>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	429a      	cmp	r2, r3
 8001486:	d005      	beq.n	8001494 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	429a      	cmp	r2, r3
 8001492:	d107      	bne.n	80014a4 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	438a      	bics	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	019b      	lsls	r3, r3, #6
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d110      	bne.n	80014d2 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4914      	ldr	r1, [pc, #80]	; (800150c <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80014bc:	400a      	ands	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0189      	lsls	r1, r1, #6
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	225d      	movs	r2, #93	; 0x5d
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	225c      	movs	r2, #92	; 0x5c
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e00e      	b.n	8001504 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4013      	ands	r3, r2
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d101      	bne.n	80014fa <SPI_WaitFlagStateUntilTimeout+0xc6>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <SPI_WaitFlagStateUntilTimeout+0xc8>
 80014fa:	2300      	movs	r3, #0
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4293      	cmp	r3, r2
 8001500:	d1a0      	bne.n	8001444 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}
 800150c:	ffffdfff 	.word	0xffffdfff

08001510 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800151e:	e062      	b.n	80015e6 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	23c0      	movs	r3, #192	; 0xc0
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	429a      	cmp	r2, r3
 8001528:	d10c      	bne.n	8001544 <SPI_WaitFifoStateUntilTimeout+0x34>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	330c      	adds	r3, #12
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	2117      	movs	r1, #23
 800153c:	187b      	adds	r3, r7, r1
 800153e:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001540:	187b      	adds	r3, r7, r1
 8001542:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	d04d      	beq.n	80015e6 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <SPI_WaitFifoStateUntilTimeout+0x50>
 8001550:	f7fe fea2 	bl	8000298 <HAL_GetTick>
 8001554:	0002      	movs	r2, r0
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d842      	bhi.n	80015e6 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	21e0      	movs	r1, #224	; 0xe0
 800156c:	438a      	bics	r2, r1
 800156e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	2382      	movs	r3, #130	; 0x82
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	429a      	cmp	r2, r3
 800157a:	d113      	bne.n	80015a4 <SPI_WaitFifoStateUntilTimeout+0x94>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	429a      	cmp	r2, r3
 8001586:	d005      	beq.n	8001594 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	438a      	bics	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	019b      	lsls	r3, r3, #6
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d110      	bne.n	80015d2 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4911      	ldr	r1, [pc, #68]	; (8001600 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	0189      	lsls	r1, r1, #6
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	225d      	movs	r2, #93	; 0x5d
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	225c      	movs	r2, #92	; 0x5c
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e008      	b.n	80015f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	4013      	ands	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d194      	bne.n	8001520 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	ffffdfff 	.word	0xffffdfff

08001604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	23c0      	movs	r3, #192	; 0xc0
 8001614:	0159      	lsls	r1, r3, #5
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	0013      	movs	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	f7ff ff76 	bl	8001510 <SPI_WaitFifoStateUntilTimeout>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d007      	beq.n	8001638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162c:	2220      	movs	r2, #32
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e027      	b.n	8001688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	0013      	movs	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	f7ff fef5 	bl	8001434 <SPI_WaitFlagStateUntilTimeout>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d007      	beq.n	800165e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	2220      	movs	r2, #32
 8001654:	431a      	orrs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e014      	b.n	8001688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	00d9      	lsls	r1, r3, #3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	0013      	movs	r3, r2
 800166c:	2200      	movs	r2, #0
 800166e:	f7ff ff4f 	bl	8001510 <SPI_WaitFifoStateUntilTimeout>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d007      	beq.n	8001686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	2220      	movs	r2, #32
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e000      	b.n	8001688 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f7fe fdc4 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f866 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f000 f8e2 	bl	8001864 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016a0:	f000 f8a2 	bl	80017e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80016a4:	f000 f9b8 	bl	8001a18 <ssd1306_Init>
  ssd1306_Fill(Black);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 fa23 	bl	8001af4 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 fb99 	bl	8001de8 <ssd1306_SetCursor>
  ssd1306_WriteString("Hola Lulu", Font_11x18, White);
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <main+0xc4>)
 80016b8:	4827      	ldr	r0, [pc, #156]	; (8001758 <main+0xc8>)
 80016ba:	2301      	movs	r3, #1
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	6852      	ldr	r2, [r2, #4]
 80016c0:	f000 fb68 	bl	8001d94 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 20);
 80016c4:	2114      	movs	r1, #20
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 fb8e 	bl	8001de8 <ssd1306_SetCursor>
  ssd1306_WriteString("OLED 10/10", Font_11x18, White);
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <main+0xc4>)
 80016ce:	4823      	ldr	r0, [pc, #140]	; (800175c <main+0xcc>)
 80016d0:	2301      	movs	r3, #1
 80016d2:	6811      	ldr	r1, [r2, #0]
 80016d4:	6852      	ldr	r2, [r2, #4]
 80016d6:	f000 fb5d 	bl	8001d94 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 40);
 80016da:	2128      	movs	r1, #40	; 0x28
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fb83 	bl	8001de8 <ssd1306_SetCursor>
  ssd1306_WriteString("Hola Pepe", Font_11x18, White);
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <main+0xc4>)
 80016e4:	481e      	ldr	r0, [pc, #120]	; (8001760 <main+0xd0>)
 80016e6:	2301      	movs	r3, #1
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	6852      	ldr	r2, [r2, #4]
 80016ec:	f000 fb52 	bl	8001d94 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80016f0:	f000 fa24 	bl	8001b3c <ssd1306_UpdateScreen>
//	  sprintf(str, "%d", i++);
//	  ssd1306_WriteString(str, Font_11x18, Black);
//	  ssd1306_SetCursor(0, 40);
//	  sprintf(str, "%d", i);
//  	  ssd1306_WriteString(str, Font_11x18, White);
  	  HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 80016f4:	2390      	movs	r3, #144	; 0x90
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	2101      	movs	r1, #1
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff f839 	bl	8000772 <HAL_GPIO_TogglePin>
//  	  ssd1306_UpdateScreen();
  	  HAL_Delay(200);
 8001700:	20c8      	movs	r0, #200	; 0xc8
 8001702:	f7fe fdd3 	bl	80002ac <HAL_Delay>


  	  ssd1306_Fill(Black);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f9f4 	bl	8001af4 <ssd1306_Fill>
  	  ssd1306_SetCursor(0, 0);
 800170c:	2100      	movs	r1, #0
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fb6a 	bl	8001de8 <ssd1306_SetCursor>
  	  ssd1306_WriteString("Hola Lulu", Font_11x18, White);
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <main+0xc4>)
 8001716:	4810      	ldr	r0, [pc, #64]	; (8001758 <main+0xc8>)
 8001718:	2301      	movs	r3, #1
 800171a:	6811      	ldr	r1, [r2, #0]
 800171c:	6852      	ldr	r2, [r2, #4]
 800171e:	f000 fb39 	bl	8001d94 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 20);
 8001722:	2114      	movs	r1, #20
 8001724:	2000      	movs	r0, #0
 8001726:	f000 fb5f 	bl	8001de8 <ssd1306_SetCursor>
  	  ssd1306_WriteString("Me refresco", Font_11x18, White);
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <main+0xc4>)
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <main+0xd4>)
 800172e:	2301      	movs	r3, #1
 8001730:	6811      	ldr	r1, [r2, #0]
 8001732:	6852      	ldr	r2, [r2, #4]
 8001734:	f000 fb2e 	bl	8001d94 <ssd1306_WriteString>
  	  ssd1306_SetCursor(0, 40);
 8001738:	2128      	movs	r1, #40	; 0x28
 800173a:	2000      	movs	r0, #0
 800173c:	f000 fb54 	bl	8001de8 <ssd1306_SetCursor>
  	  ssd1306_WriteString("Hola Pepe", Font_11x18, White);
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <main+0xc4>)
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <main+0xd0>)
 8001744:	2301      	movs	r3, #1
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	f000 fb23 	bl	8001d94 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 800174e:	f000 f9f5 	bl	8001b3c <ssd1306_UpdateScreen>
  	  HAL_GPIO_TogglePin(GPIOA, O_Blinky_Pin);
 8001752:	e7cf      	b.n	80016f4 <main+0x64>
 8001754:	20000000 	.word	0x20000000
 8001758:	0800209c 	.word	0x0800209c
 800175c:	080020a8 	.word	0x080020a8
 8001760:	080020b4 	.word	0x080020b4
 8001764:	080020c0 	.word	0x080020c0

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b091      	sub	sp, #68	; 0x44
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	2410      	movs	r4, #16
 8001770:	193b      	adds	r3, r7, r4
 8001772:	0018      	movs	r0, r3
 8001774:	2330      	movs	r3, #48	; 0x30
 8001776:	001a      	movs	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	f000 fc6b 	bl	8002054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177e:	003b      	movs	r3, r7
 8001780:	0018      	movs	r0, r3
 8001782:	2310      	movs	r3, #16
 8001784:	001a      	movs	r2, r3
 8001786:	2100      	movs	r1, #0
 8001788:	f000 fc64 	bl	8002054 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	0021      	movs	r1, r4
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2201      	movs	r2, #1
 8001798:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2210      	movs	r2, #16
 800179e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7fe fff5 	bl	8000798 <HAL_RCC_OscConfig>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80017b2:	f000 f8b9 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	003b      	movs	r3, r7
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017bc:	003b      	movs	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	003b      	movs	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c8:	003b      	movs	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ce:	003b      	movs	r3, r7
 80017d0:	2100      	movs	r1, #0
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff fad4 	bl	8000d80 <HAL_RCC_ClockConfig>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80017dc:	f000 f8a4 	bl	8001928 <Error_Handler>
  }
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b011      	add	sp, #68	; 0x44
 80017e6:	bd90      	pop	{r4, r7, pc}

080017e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_SPI1_Init+0x74>)
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <MX_SPI1_Init+0x78>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_SPI1_Init+0x74>)
 80017f4:	2282      	movs	r2, #130	; 0x82
 80017f6:	0052      	lsls	r2, r2, #1
 80017f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_SPI1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI1_Init+0x74>)
 8001802:	22e0      	movs	r2, #224	; 0xe0
 8001804:	00d2      	lsls	r2, r2, #3
 8001806:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_SPI1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI1_Init+0x74>)
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI1_Init+0x74>)
 800181e:	2218      	movs	r2, #24
 8001820:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI1_Init+0x74>)
 8001836:	2207      	movs	r2, #7
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI1_Init+0x74>)
 8001842:	2208      	movs	r2, #8
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <MX_SPI1_Init+0x74>)
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fbef 	bl	800102c <HAL_SPI_Init>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 f869 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000434 	.word	0x20000434
 8001860:	40013000 	.word	0x40013000

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	240c      	movs	r4, #12
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2314      	movs	r3, #20
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f000 fbed 	bl	8002054 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_GPIO_Init+0xbc>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_GPIO_Init+0xbc>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0289      	lsls	r1, r1, #10
 8001884:	430a      	orrs	r2, r1
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <MX_GPIO_Init+0xbc>)
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <MX_GPIO_Init+0xbc>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_GPIO_Init+0xbc>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	02c9      	lsls	r1, r1, #11
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_GPIO_Init+0xbc>)
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	02db      	lsls	r3, r3, #11
 80018ac:	4013      	ands	r3, r2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin, GPIO_PIN_RESET);
 80018b2:	2390      	movs	r3, #144	; 0x90
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	2200      	movs	r2, #0
 80018b8:	2119      	movs	r1, #25
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7fe ff3c 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_OLED_CS_GPIO_Port, O_OLED_CS_Pin, GPIO_PIN_RESET);
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_GPIO_Init+0xc0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	2102      	movs	r1, #2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7fe ff36 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : O_Blinky_Pin O_OLED_DC_Pin O_OLED_RES_Pin */
  GPIO_InitStruct.Pin = O_Blinky_Pin|O_OLED_DC_Pin|O_OLED_RES_Pin;
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	2219      	movs	r2, #25
 80018d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	193a      	adds	r2, r7, r4
 80018e6:	2390      	movs	r3, #144	; 0x90
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe fdaf 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : O_OLED_CS_Pin */
  GPIO_InitStruct.Pin = O_OLED_CS_Pin;
 80018f2:	0021      	movs	r1, r4
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2201      	movs	r2, #1
 80018fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(O_OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800190c:	187b      	adds	r3, r7, r1
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <MX_GPIO_Init+0xc0>)
 8001910:	0019      	movs	r1, r3
 8001912:	0010      	movs	r0, r2
 8001914:	f7fe fd9c 	bl	8000450 <HAL_GPIO_Init>

}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b009      	add	sp, #36	; 0x24
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <ssd1306_Reset>:
#include "ssd1306.h"


void ssd1306_Reset(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <ssd1306_Reset+0x40>)
 800193a:	2201      	movs	r2, #1
 800193c:	2102      	movs	r1, #2
 800193e:	0018      	movs	r0, r3
 8001940:	f7fe fefa 	bl	8000738 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001944:	2390      	movs	r3, #144	; 0x90
 8001946:	05db      	lsls	r3, r3, #23
 8001948:	2200      	movs	r2, #0
 800194a:	2110      	movs	r1, #16
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fef3 	bl	8000738 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001952:	200a      	movs	r0, #10
 8001954:	f7fe fcaa 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001958:	2390      	movs	r3, #144	; 0x90
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fee9 	bl	8000738 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f7fe fca0 	bl	80002ac <HAL_Delay>
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	48000400 	.word	0x48000400

08001978 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	0002      	movs	r2, r0
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <ssd1306_WriteCommand+0x48>)
 8001986:	2200      	movs	r2, #0
 8001988:	2102      	movs	r1, #2
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fed4 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001990:	2390      	movs	r3, #144	; 0x90
 8001992:	05db      	lsls	r3, r3, #23
 8001994:	2200      	movs	r2, #0
 8001996:	2108      	movs	r1, #8
 8001998:	0018      	movs	r0, r3
 800199a:	f7fe fecd 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800199e:	2301      	movs	r3, #1
 80019a0:	425b      	negs	r3, r3
 80019a2:	1df9      	adds	r1, r7, #7
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <ssd1306_WriteCommand+0x4c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	f7ff fbda 	bl	8001160 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <ssd1306_WriteCommand+0x48>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	2102      	movs	r1, #2
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7fe fec0 	bl	8000738 <HAL_GPIO_WritePin>
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	48000400 	.word	0x48000400
 80019c4:	20000434 	.word	0x20000434

080019c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <ssd1306_WriteData+0x48>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	2102      	movs	r1, #2
 80019d8:	0018      	movs	r0, r3
 80019da:	f7fe fead 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80019de:	2390      	movs	r3, #144	; 0x90
 80019e0:	05db      	lsls	r3, r3, #23
 80019e2:	2201      	movs	r2, #1
 80019e4:	2108      	movs	r1, #8
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fea6 	bl	8000738 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	425b      	negs	r3, r3
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <ssd1306_WriteData+0x4c>)
 80019f8:	f7ff fbb2 	bl	8001160 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <ssd1306_WriteData+0x48>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	2102      	movs	r1, #2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7fe fe98 	bl	8000738 <HAL_GPIO_WritePin>
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	48000400 	.word	0x48000400
 8001a14:	20000434 	.word	0x20000434

08001a18 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8001a1c:	f7ff ff8a 	bl	8001934 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a20:	2064      	movs	r0, #100	; 0x64
 8001a22:	f7fe fc43 	bl	80002ac <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001a26:	20ae      	movs	r0, #174	; 0xae
 8001a28:	f7ff ffa6 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001a2c:	2020      	movs	r0, #32
 8001a2e:	f7ff ffa3 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8001a32:	2010      	movs	r0, #16
 8001a34:	f7ff ffa0 	bl	8001978 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a38:	20b0      	movs	r0, #176	; 0xb0
 8001a3a:	f7ff ff9d 	bl	8001978 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a3e:	20c8      	movs	r0, #200	; 0xc8
 8001a40:	f7ff ff9a 	bl	8001978 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff ff97 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f7ff ff94 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a50:	2040      	movs	r0, #64	; 0x40
 8001a52:	f7ff ff91 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001a56:	2081      	movs	r0, #129	; 0x81
 8001a58:	f7ff ff8e 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8001a5c:	20ff      	movs	r0, #255	; 0xff
 8001a5e:	f7ff ff8b 	bl	8001978 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a62:	20a1      	movs	r0, #161	; 0xa1
 8001a64:	f7ff ff88 	bl	8001978 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a68:	20a6      	movs	r0, #166	; 0xa6
 8001a6a:	f7ff ff85 	bl	8001978 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a6e:	20a8      	movs	r0, #168	; 0xa8
 8001a70:	f7ff ff82 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001a74:	203f      	movs	r0, #63	; 0x3f
 8001a76:	f7ff ff7f 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a7a:	20a4      	movs	r0, #164	; 0xa4
 8001a7c:	f7ff ff7c 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a80:	20d3      	movs	r0, #211	; 0xd3
 8001a82:	f7ff ff79 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff ff76 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a8c:	20d5      	movs	r0, #213	; 0xd5
 8001a8e:	f7ff ff73 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a92:	20f0      	movs	r0, #240	; 0xf0
 8001a94:	f7ff ff70 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a98:	20d9      	movs	r0, #217	; 0xd9
 8001a9a:	f7ff ff6d 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a9e:	2022      	movs	r0, #34	; 0x22
 8001aa0:	f7ff ff6a 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001aa4:	20da      	movs	r0, #218	; 0xda
 8001aa6:	f7ff ff67 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8001aaa:	2012      	movs	r0, #18
 8001aac:	f7ff ff64 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ab0:	20db      	movs	r0, #219	; 0xdb
 8001ab2:	f7ff ff61 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ab6:	2020      	movs	r0, #32
 8001ab8:	f7ff ff5e 	bl	8001978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001abc:	208d      	movs	r0, #141	; 0x8d
 8001abe:	f7ff ff5b 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ac2:	2014      	movs	r0, #20
 8001ac4:	f7ff ff58 	bl	8001978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001ac8:	20af      	movs	r0, #175	; 0xaf
 8001aca:	f7ff ff55 	bl	8001978 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f810 	bl	8001af4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ad4:	f000 f832 	bl	8001b3c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <ssd1306_Init+0xd8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <ssd1306_Init+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <ssd1306_Init+0xd8>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	715a      	strb	r2, [r3, #5]
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000428 	.word	0x20000428

08001af4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e00e      	b.n	8001b24 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <ssd1306_Fill+0x1e>
 8001b0e:	2100      	movs	r1, #0
 8001b10:	e000      	b.n	8001b14 <ssd1306_Fill+0x20>
 8001b12:	21ff      	movs	r1, #255	; 0xff
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <ssd1306_Fill+0x40>)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	1c0a      	adds	r2, r1, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <ssd1306_Fill+0x44>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d9ec      	bls.n	8001b06 <ssd1306_Fill+0x12>
    }
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000028 	.word	0x20000028
 8001b38:	000003ff 	.word	0x000003ff

08001b3c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e01a      	b.n	8001b80 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3b50      	subs	r3, #80	; 0x50
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7ff ff10 	bl	8001978 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff ff0d 	bl	8001978 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001b5e:	2010      	movs	r0, #16
 8001b60:	f7ff ff0a 	bl	8001978 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	01da      	lsls	r2, r3, #7
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <ssd1306_UpdateScreen+0x54>)
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff ff29 	bl	80019c8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	3201      	adds	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d9e0      	bls.n	8001b4a <ssd1306_UpdateScreen+0xe>
    }
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000028 	.word	0x20000028

08001b94 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	0004      	movs	r4, r0
 8001b9c:	0008      	movs	r0, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	1c22      	adds	r2, r4, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	1c02      	adds	r2, r0, #0
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	1d7b      	adds	r3, r7, #5
 8001bae:	1c0a      	adds	r2, r1, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db52      	blt.n	8001c62 <ssd1306_DrawPixel+0xce>
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc2:	d84e      	bhi.n	8001c62 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <ssd1306_DrawPixel+0xd8>)
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8001bcc:	1d7b      	adds	r3, r7, #5
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	425a      	negs	r2, r3
 8001bd2:	4153      	adcs	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	1d7b      	adds	r3, r7, #5
 8001bd8:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8001bda:	1d7b      	adds	r3, r7, #5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d11e      	bne.n	8001c20 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	1dbb      	adds	r3, r7, #6
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	0003      	movs	r3, r0
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <ssd1306_DrawPixel+0xdc>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	b25a      	sxtb	r2, r3
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2107      	movs	r1, #7
 8001c00:	400b      	ands	r3, r1
 8001c02:	2101      	movs	r1, #1
 8001c04:	4099      	lsls	r1, r3
 8001c06:	000b      	movs	r3, r1
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b259      	sxtb	r1, r3
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	0003      	movs	r3, r0
 8001c14:	01db      	lsls	r3, r3, #7
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	b2c9      	uxtb	r1, r1
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <ssd1306_DrawPixel+0xdc>)
 8001c1c:	54d1      	strb	r1, [r2, r3]
 8001c1e:	e021      	b.n	8001c64 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	1dbb      	adds	r3, r7, #6
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	b2d8      	uxtb	r0, r3
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <ssd1306_DrawPixel+0xdc>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	1dba      	adds	r2, r7, #6
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	400a      	ands	r2, r1
 8001c40:	2101      	movs	r1, #1
 8001c42:	4091      	lsls	r1, r2
 8001c44:	000a      	movs	r2, r1
 8001c46:	b252      	sxtb	r2, r2
 8001c48:	43d2      	mvns	r2, r2
 8001c4a:	b252      	sxtb	r2, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	b259      	sxtb	r1, r3
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	0003      	movs	r3, r0
 8001c56:	01db      	lsls	r3, r3, #7
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	b2c9      	uxtb	r1, r1
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <ssd1306_DrawPixel+0xdc>)
 8001c5e:	54d1      	strb	r1, [r2, r3]
 8001c60:	e000      	b.n	8001c64 <ssd1306_DrawPixel+0xd0>
        return;
 8001c62:	46c0      	nop			; (mov r8, r8)
    }
}
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b003      	add	sp, #12
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	20000428 	.word	0x20000428
 8001c70:	20000028 	.word	0x20000028

08001c74 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	0004      	movs	r4, r0
 8001c7c:	1d38      	adds	r0, r7, #4
 8001c7e:	6001      	str	r1, [r0, #0]
 8001c80:	6042      	str	r2, [r0, #4]
 8001c82:	0019      	movs	r1, r3
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	1c22      	adds	r2, r4, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	230e      	movs	r3, #14
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	1c0a      	adds	r2, r1, #0
 8001c92:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	18d3      	adds	r3, r2, r3
 8001ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca2:	dc07      	bgt.n	8001cb4 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001ca6:	885b      	ldrh	r3, [r3, #2]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb2:	dd01      	ble.n	8001cb8 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e066      	b.n	8001d86 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e051      	b.n	8001d62 <ssd1306_WriteChar+0xee>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b20      	subs	r3, #32
 8001cca:	1d39      	adds	r1, r7, #4
 8001ccc:	7849      	ldrb	r1, [r1, #1]
 8001cce:	434b      	muls	r3, r1
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	18cb      	adds	r3, r1, r3
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	e035      	b.n	8001d50 <ssd1306_WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d014      	beq.n	8001d1c <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	18d3      	adds	r3, r2, r3
 8001cfe:	b2d8      	uxtb	r0, r3
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	18d3      	adds	r3, r2, r3
 8001d0c:	b2d9      	uxtb	r1, r3
 8001d0e:	230e      	movs	r3, #14
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	001a      	movs	r2, r3
 8001d16:	f7ff ff3d 	bl	8001b94 <ssd1306_DrawPixel>
 8001d1a:	e016      	b.n	8001d4a <ssd1306_WriteChar+0xd6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001d2c:	885b      	ldrh	r3, [r3, #2]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	b2d9      	uxtb	r1, r3
 8001d38:	230e      	movs	r3, #14
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	425a      	negs	r2, r3
 8001d40:	4153      	adcs	r3, r2
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	001a      	movs	r2, r3
 8001d46:	f7ff ff25 	bl	8001b94 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	001a      	movs	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d3c3      	bcc.n	8001ce4 <ssd1306_WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	001a      	movs	r2, r3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d3a7      	bcc.n	8001cbe <ssd1306_WriteChar+0x4a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	18d3      	adds	r3, r2, r3
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <ssd1306_WriteChar+0x11c>)
 8001d7e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d80:	230f      	movs	r3, #15
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b009      	add	sp, #36	; 0x24
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000428 	.word	0x20000428

08001d94 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	1d38      	adds	r0, r7, #4
 8001d9e:	6001      	str	r1, [r0, #0]
 8001da0:	6042      	str	r2, [r0, #4]
 8001da2:	001a      	movs	r2, r3
 8001da4:	1cfb      	adds	r3, r7, #3
 8001da6:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8001da8:	e014      	b.n	8001dd4 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	7818      	ldrb	r0, [r3, #0]
 8001dae:	1cfb      	adds	r3, r7, #3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	1d3a      	adds	r2, r7, #4
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	6852      	ldr	r2, [r2, #4]
 8001db8:	f7ff ff5c 	bl	8001c74 <ssd1306_WriteChar>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d002      	beq.n	8001dce <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	e008      	b.n	8001de0 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e6      	bne.n	8001daa <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	781b      	ldrb	r3, [r3, #0]
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	0002      	movs	r2, r0
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	1c0a      	adds	r2, r1, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <ssd1306_SetCursor+0x30>)
 8001e02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <ssd1306_SetCursor+0x30>)
 8001e0c:	805a      	strh	r2, [r3, #2]
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000428 	.word	0x20000428

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x44>)
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_MspInit+0x44>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	619a      	str	r2, [r3, #24]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x44>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_MspInit+0x44>)
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_MspInit+0x44>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0549      	lsls	r1, r1, #21
 8001e44:	430a      	orrs	r2, r1
 8001e46:	61da      	str	r2, [r3, #28]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_MspInit+0x44>)
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	4013      	ands	r3, r2
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	0018      	movs	r0, r3
 8001e72:	2314      	movs	r3, #20
 8001e74:	001a      	movs	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	f000 f8ec 	bl	8002054 <memset>
  if(hspi->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_SPI_MspInit+0x90>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d132      	bne.n	8001eec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	0149      	lsls	r1, r1, #5
 8001e90:	430a      	orrs	r2, r1
 8001e92:	619a      	str	r2, [r3, #24]
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	015b      	lsls	r3, r3, #5
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0289      	lsls	r1, r1, #10
 8001eac:	430a      	orrs	r2, r1
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_SPI_MspInit+0x94>)
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = O_SCK_SCL_Pin|O_MOSI_SDA_Pin;
 8001ebe:	2114      	movs	r1, #20
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	22a0      	movs	r2, #160	; 0xa0
 8001ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	2202      	movs	r2, #2
 8001eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	187a      	adds	r2, r7, r1
 8001ee0:	2390      	movs	r3, #144	; 0x90
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	0011      	movs	r1, r2
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7fe fab2 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b00a      	add	sp, #40	; 0x28
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40021000 	.word	0x40021000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f7fe f9ac 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <SystemInit+0x70>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <SystemInit+0x70>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <SystemInit+0x70>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <SystemInit+0x70>)
 8001f46:	4917      	ldr	r1, [pc, #92]	; (8001fa4 <SystemInit+0x74>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <SystemInit+0x70>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <SystemInit+0x70>)
 8001f52:	4915      	ldr	r1, [pc, #84]	; (8001fa8 <SystemInit+0x78>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <SystemInit+0x70>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <SystemInit+0x70>)
 8001f5e:	4913      	ldr	r1, [pc, #76]	; (8001fac <SystemInit+0x7c>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <SystemInit+0x70>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <SystemInit+0x70>)
 8001f6a:	4911      	ldr	r1, [pc, #68]	; (8001fb0 <SystemInit+0x80>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <SystemInit+0x70>)
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SystemInit+0x70>)
 8001f76:	210f      	movs	r1, #15
 8001f78:	438a      	bics	r2, r1
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <SystemInit+0x70>)
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <SystemInit+0x70>)
 8001f82:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <SystemInit+0x84>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SystemInit+0x70>)
 8001f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SystemInit+0x70>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	438a      	bics	r2, r1
 8001f92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <SystemInit+0x70>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]

}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08ffb80c 	.word	0x08ffb80c
 8001fa8:	fef6ffff 	.word	0xfef6ffff
 8001fac:	fffbffff 	.word	0xfffbffff
 8001fb0:	ffc0ffff 	.word	0xffc0ffff
 8001fb4:	fffffeec 	.word	0xfffffeec

08001fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fbe:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <LoopForever+0xe>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd4:	4c0b      	ldr	r4, [pc, #44]	; (8002004 <LoopForever+0x16>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fe2:	f7ff ffa5 	bl	8001f30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001fe6:	f000 f811 	bl	800200c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fea:	f7ff fb51 	bl	8001690 <main>

08001fee <LoopForever>:

LoopForever:
    b LoopForever
 8001fee:	e7fe      	b.n	8001fee <LoopForever>
  ldr   r0, =_estack
 8001ff0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ffc:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 8002000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002004:	20000498 	.word	0x20000498

08002008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_IRQHandler>
	...

0800200c <__libc_init_array>:
 800200c:	b570      	push	{r4, r5, r6, lr}
 800200e:	2600      	movs	r6, #0
 8002010:	4d0c      	ldr	r5, [pc, #48]	; (8002044 <__libc_init_array+0x38>)
 8002012:	4c0d      	ldr	r4, [pc, #52]	; (8002048 <__libc_init_array+0x3c>)
 8002014:	1b64      	subs	r4, r4, r5
 8002016:	10a4      	asrs	r4, r4, #2
 8002018:	42a6      	cmp	r6, r4
 800201a:	d109      	bne.n	8002030 <__libc_init_array+0x24>
 800201c:	2600      	movs	r6, #0
 800201e:	f000 f821 	bl	8002064 <_init>
 8002022:	4d0a      	ldr	r5, [pc, #40]	; (800204c <__libc_init_array+0x40>)
 8002024:	4c0a      	ldr	r4, [pc, #40]	; (8002050 <__libc_init_array+0x44>)
 8002026:	1b64      	subs	r4, r4, r5
 8002028:	10a4      	asrs	r4, r4, #2
 800202a:	42a6      	cmp	r6, r4
 800202c:	d105      	bne.n	800203a <__libc_init_array+0x2e>
 800202e:	bd70      	pop	{r4, r5, r6, pc}
 8002030:	00b3      	lsls	r3, r6, #2
 8002032:	58eb      	ldr	r3, [r5, r3]
 8002034:	4798      	blx	r3
 8002036:	3601      	adds	r6, #1
 8002038:	e7ee      	b.n	8002018 <__libc_init_array+0xc>
 800203a:	00b3      	lsls	r3, r6, #2
 800203c:	58eb      	ldr	r3, [r5, r3]
 800203e:	4798      	blx	r3
 8002040:	3601      	adds	r6, #1
 8002042:	e7f2      	b.n	800202a <__libc_init_array+0x1e>
 8002044:	08002e38 	.word	0x08002e38
 8002048:	08002e38 	.word	0x08002e38
 800204c:	08002e38 	.word	0x08002e38
 8002050:	08002e3c 	.word	0x08002e3c

08002054 <memset>:
 8002054:	0003      	movs	r3, r0
 8002056:	1812      	adds	r2, r2, r0
 8002058:	4293      	cmp	r3, r2
 800205a:	d100      	bne.n	800205e <memset+0xa>
 800205c:	4770      	bx	lr
 800205e:	7019      	strb	r1, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	e7f9      	b.n	8002058 <memset+0x4>

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
