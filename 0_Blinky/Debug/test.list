
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001254  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001314  08001314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001344  08001344  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001344  08001344  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001344  08001344  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001348  08001348  00011348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800134c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001350  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001350  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000650e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001172  00000000  00000000  0002653a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000338  00000000  00000000  000276b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b0  00000000  00000000  000279e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ba73  00000000  00000000  00027c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000047a3  00000000  00000000  0003370b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003d1dc  00000000  00000000  00037eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007508a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000998  00000000  00000000  00075108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080012fc 	.word	0x080012fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080012fc 	.word	0x080012fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f000 ff89 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 fee2 	bl	8001018 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e7 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	230f      	movs	r3, #15
 8000308:	400b      	ands	r3, r1
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0011      	movs	r1, r2
 800031e:	2203      	movs	r2, #3
 8000320:	400a      	ands	r2, r1
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	4091      	lsls	r1, r2
 8000328:	000a      	movs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
 800032e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	019b      	lsls	r3, r3, #6
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	401a      	ands	r2, r3
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	2303      	movs	r3, #3
 8000340:	4003      	ands	r3, r0
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4023      	ands	r3, r4
 8000352:	3b08      	subs	r3, #8
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	3306      	adds	r3, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18c3      	adds	r3, r0, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	33c0      	adds	r3, #192	; 0xc0
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	589b      	ldr	r3, [r3, r2]
 8000374:	1dfa      	adds	r2, r7, #7
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	0011      	movs	r1, r2
 800037a:	2203      	movs	r2, #3
 800037c:	400a      	ands	r2, r1
 800037e:	00d2      	lsls	r2, r2, #3
 8000380:	21ff      	movs	r1, #255	; 0xff
 8000382:	4091      	lsls	r1, r2
 8000384:	000a      	movs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	401a      	ands	r2, r3
 800038a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	019b      	lsls	r3, r3, #6
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	401a      	ands	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	2303      	movs	r3, #3
 800039c:	4003      	ands	r3, r0
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <NVIC_SetPriority+0xd8>)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	501a      	str	r2, [r3, r0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	210f      	movs	r1, #15
 8000418:	187b      	adds	r3, r7, r1
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b25b      	sxtb	r3, r3
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff5d 	bl	80002e8 <NVIC_SetPriority>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffbf 	bl	80003c4 <SysTick_Config>
 8000446:	0003      	movs	r3, r0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	e14f      	b.n	8000708 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	4091      	lsls	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d100      	bne.n	8000480 <HAL_GPIO_Init+0x30>
 800047e:	e140      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d003      	beq.n	8000490 <HAL_GPIO_Init+0x40>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b12      	cmp	r3, #18
 800048e:	d123      	bne.n	80004d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	08da      	lsrs	r2, r3, #3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2207      	movs	r2, #7
 80004a2:	4013      	ands	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	220f      	movs	r2, #15
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	691a      	ldr	r2, [r3, #16]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2107      	movs	r1, #7
 80004bc:	400b      	ands	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	6939      	ldr	r1, [r7, #16]
 80004d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2203      	movs	r2, #3
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2203      	movs	r2, #3
 80004f6:	401a      	ands	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00b      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d007      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	2b11      	cmp	r3, #17
 8000522:	d003      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b12      	cmp	r3, #18
 800052a:	d130      	bne.n	800058e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	43da      	mvns	r2, r3
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000562:	2201      	movs	r2, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
 800056a:	43da      	mvns	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	2201      	movs	r2, #1
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4313      	orrs	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	43da      	mvns	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	4013      	ands	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <HAL_GPIO_Init+0x17c>
 80005ca:	e09a      	b.n	8000702 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005cc:	4b54      	ldr	r3, [pc, #336]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4b53      	ldr	r3, [pc, #332]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	4b51      	ldr	r3, [pc, #324]	; (8000720 <HAL_GPIO_Init+0x2d0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e4:	4a4f      	ldr	r2, [pc, #316]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	589b      	ldr	r3, [r3, r2]
 80005f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2203      	movs	r2, #3
 80005f6:	4013      	ands	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	43da      	mvns	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	429a      	cmp	r2, r3
 8000610:	d013      	beq.n	800063a <HAL_GPIO_Init+0x1ea>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <HAL_GPIO_Init+0x2d8>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d00d      	beq.n	8000636 <HAL_GPIO_Init+0x1e6>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a43      	ldr	r2, [pc, #268]	; (800072c <HAL_GPIO_Init+0x2dc>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d007      	beq.n	8000632 <HAL_GPIO_Init+0x1e2>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_GPIO_Init+0x1de>
 800062a:	2303      	movs	r3, #3
 800062c:	e006      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800062e:	2305      	movs	r3, #5
 8000630:	e004      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000632:	2302      	movs	r3, #2
 8000634:	e002      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <HAL_GPIO_Init+0x1ec>
 800063a:	2300      	movs	r3, #0
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	2103      	movs	r1, #3
 8000640:	400a      	ands	r2, r1
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	4093      	lsls	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4313      	orrs	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800064c:	4935      	ldr	r1, [pc, #212]	; (8000724 <HAL_GPIO_Init+0x2d4>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	3302      	adds	r3, #2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	43da      	mvns	r2, r3
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	025b      	lsls	r3, r3, #9
 8000672:	4013      	ands	r3, r2
 8000674:	d003      	beq.n	800067e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	43da      	mvns	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	43da      	mvns	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	035b      	lsls	r3, r3, #13
 80006c6:	4013      	ands	r3, r2
 80006c8:	d003      	beq.n	80006d2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	43da      	mvns	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	039b      	lsls	r3, r3, #14
 80006f0:	4013      	ands	r3, r2
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	40da      	lsrs	r2, r3
 8000710:	1e13      	subs	r3, r2, #0
 8000712:	d000      	beq.n	8000716 <HAL_GPIO_Init+0x2c6>
 8000714:	e6a8      	b.n	8000468 <HAL_GPIO_Init+0x18>
  } 
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b006      	add	sp, #24
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800
 8000730:	48000c00 	.word	0x48000c00
 8000734:	40010400 	.word	0x40010400

08000738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	0008      	movs	r0, r1
 8000742:	0011      	movs	r1, r2
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	1c7b      	adds	r3, r7, #1
 800074c:	1c0a      	adds	r2, r1, #0
 800074e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000750:	1c7b      	adds	r3, r7, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000760:	e003      	b.n	800076a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000762:	1cbb      	adds	r3, r7, #2
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	000a      	movs	r2, r1
 800077c:	1cbb      	adds	r3, r7, #2
 800077e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	1cbb      	adds	r3, r7, #2
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	405a      	eors	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	615a      	str	r2, [r3, #20]
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	d100      	bne.n	80007b0 <HAL_RCC_OscConfig+0x18>
 80007ae:	e08d      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b0:	4bc3      	ldr	r3, [pc, #780]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	220c      	movs	r2, #12
 80007b6:	4013      	ands	r3, r2
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d00e      	beq.n	80007da <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007bc:	4bc0      	ldr	r3, [pc, #768]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	220c      	movs	r2, #12
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d116      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
 80007c8:	4bbd      	ldr	r3, [pc, #756]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	401a      	ands	r2, r3
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	025b      	lsls	r3, r3, #9
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d10d      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007da:	4bb9      	ldr	r3, [pc, #740]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	029b      	lsls	r3, r3, #10
 80007e2:	4013      	ands	r3, r2
 80007e4:	d100      	bne.n	80007e8 <HAL_RCC_OscConfig+0x50>
 80007e6:	e070      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d000      	beq.n	80007f2 <HAL_RCC_OscConfig+0x5a>
 80007f0:	e06b      	b.n	80008ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e2b6      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d107      	bne.n	800080e <HAL_RCC_OscConfig+0x76>
 80007fe:	4bb0      	ldr	r3, [pc, #704]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4baf      	ldr	r3, [pc, #700]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0249      	lsls	r1, r1, #9
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e02f      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10c      	bne.n	8000830 <HAL_RCC_OscConfig+0x98>
 8000816:	4baa      	ldr	r3, [pc, #680]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4ba9      	ldr	r3, [pc, #676]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800081c:	49a9      	ldr	r1, [pc, #676]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800081e:	400a      	ands	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	4ba7      	ldr	r3, [pc, #668]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4ba6      	ldr	r3, [pc, #664]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000828:	49a7      	ldr	r1, [pc, #668]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800082a:	400a      	ands	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e01e      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d10e      	bne.n	8000856 <HAL_RCC_OscConfig+0xbe>
 8000838:	4ba1      	ldr	r3, [pc, #644]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4ba0      	ldr	r3, [pc, #640]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	02c9      	lsls	r1, r1, #11
 8000842:	430a      	orrs	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b9d      	ldr	r3, [pc, #628]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0249      	lsls	r1, r1, #9
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e00b      	b.n	800086e <HAL_RCC_OscConfig+0xd6>
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b99      	ldr	r3, [pc, #612]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800085c:	4999      	ldr	r1, [pc, #612]	; (8000ac4 <HAL_RCC_OscConfig+0x32c>)
 800085e:	400a      	ands	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000868:	4997      	ldr	r1, [pc, #604]	; (8000ac8 <HAL_RCC_OscConfig+0x330>)
 800086a:	400a      	ands	r2, r1
 800086c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d014      	beq.n	80008a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000876:	f7ff fd0f 	bl	8000298 <HAL_GetTick>
 800087a:	0003      	movs	r3, r0
 800087c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fd0a 	bl	8000298 <HAL_GetTick>
 8000884:	0002      	movs	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e268      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	029b      	lsls	r3, r3, #10
 800089a:	4013      	ands	r3, r2
 800089c:	d0f0      	beq.n	8000880 <HAL_RCC_OscConfig+0xe8>
 800089e:	e015      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcfa 	bl	8000298 <HAL_GetTick>
 80008a4:	0003      	movs	r3, r0
 80008a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a8:	e008      	b.n	80008bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fcf5 	bl	8000298 <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d901      	bls.n	80008bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e253      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008bc:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	029b      	lsls	r3, r3, #10
 80008c4:	4013      	ands	r3, r2
 80008c6:	d1f0      	bne.n	80008aa <HAL_RCC_OscConfig+0x112>
 80008c8:	e000      	b.n	80008cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	4013      	ands	r3, r2
 80008d4:	d100      	bne.n	80008d8 <HAL_RCC_OscConfig+0x140>
 80008d6:	e069      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008d8:	4b79      	ldr	r3, [pc, #484]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	220c      	movs	r2, #12
 80008de:	4013      	ands	r3, r2
 80008e0:	d00b      	beq.n	80008fa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	220c      	movs	r2, #12
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d11c      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	025b      	lsls	r3, r3, #9
 80008f6:	4013      	ands	r3, r2
 80008f8:	d116      	bne.n	8000928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	d005      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d001      	beq.n	8000910 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e229      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000910:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	22f8      	movs	r2, #248	; 0xf8
 8000916:	4393      	bics	r3, r2
 8000918:	0019      	movs	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000926:	e041      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d024      	beq.n	800097a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093c:	f7ff fcac 	bl	8000298 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	e008      	b.n	8000958 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000946:	f7ff fca7 	bl	8000298 <HAL_GetTick>
 800094a:	0002      	movs	r2, r0
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d901      	bls.n	8000958 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000954:	2303      	movs	r3, #3
 8000956:	e205      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2202      	movs	r2, #2
 800095e:	4013      	ands	r3, r2
 8000960:	d0f1      	beq.n	8000946 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	22f8      	movs	r2, #248	; 0xf8
 8000968:	4393      	bics	r3, r2
 800096a:	0019      	movs	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	00da      	lsls	r2, r3, #3
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e018      	b.n	80009ac <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000980:	2101      	movs	r1, #1
 8000982:	438a      	bics	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000986:	f7ff fc87 	bl	8000298 <HAL_GetTick>
 800098a:	0003      	movs	r3, r0
 800098c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc82 	bl	8000298 <HAL_GetTick>
 8000994:	0002      	movs	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e1e0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	d1f1      	bne.n	8000990 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2208      	movs	r2, #8
 80009b2:	4013      	ands	r3, r2
 80009b4:	d036      	beq.n	8000a24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ca:	f7ff fc65 	bl	8000298 <HAL_GetTick>
 80009ce:	0003      	movs	r3, r0
 80009d0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d2:	e008      	b.n	80009e6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d4:	f7ff fc60 	bl	8000298 <HAL_GetTick>
 80009d8:	0002      	movs	r2, r0
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d901      	bls.n	80009e6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e1be      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	d0f1      	beq.n	80009d4 <HAL_RCC_OscConfig+0x23c>
 80009f0:	e018      	b.n	8000a24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	438a      	bics	r2, r1
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fc4b 	bl	8000298 <HAL_GetTick>
 8000a02:	0003      	movs	r3, r0
 8000a04:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a06:	e008      	b.n	8000a1a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fc46 	bl	8000298 <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d901      	bls.n	8000a1a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e1a4      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	d1f1      	bne.n	8000a08 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0x298>
 8000a2e:	e0b5      	b.n	8000b9c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a30:	2317      	movs	r3, #23
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	d111      	bne.n	8000a68 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0549      	lsls	r1, r1, #21
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	d11a      	bne.n	8000aaa <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0049      	lsls	r1, r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fc09 	bl	8000298 <HAL_GetTick>
 8000a86:	0003      	movs	r3, r0
 8000a88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	e008      	b.n	8000a9e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8c:	f7ff fc04 	bl	8000298 <HAL_GetTick>
 8000a90:	0002      	movs	r2, r0
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b64      	cmp	r3, #100	; 0x64
 8000a98:	d901      	bls.n	8000a9e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e162      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_RCC_OscConfig+0x334>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d0f0      	beq.n	8000a8c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10e      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x338>
 8000ab2:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab4:	6a1a      	ldr	r2, [r3, #32]
 8000ab6:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_RCC_OscConfig+0x328>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	430a      	orrs	r2, r1
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	e035      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	fffeffff 	.word	0xfffeffff
 8000ac8:	fffbffff 	.word	0xfffbffff
 8000acc:	40007000 	.word	0x40007000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10c      	bne.n	8000af2 <HAL_RCC_OscConfig+0x35a>
 8000ad8:	4ba4      	ldr	r3, [pc, #656]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	4ba3      	ldr	r3, [pc, #652]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	438a      	bics	r2, r1
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000ae6:	6a1a      	ldr	r2, [r3, #32]
 8000ae8:	4ba0      	ldr	r3, [pc, #640]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000aea:	2104      	movs	r1, #4
 8000aec:	438a      	bics	r2, r1
 8000aee:	621a      	str	r2, [r3, #32]
 8000af0:	e01c      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d10c      	bne.n	8000b14 <HAL_RCC_OscConfig+0x37c>
 8000afa:	4b9c      	ldr	r3, [pc, #624]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4b99      	ldr	r3, [pc, #612]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b08:	6a1a      	ldr	r2, [r3, #32]
 8000b0a:	4b98      	ldr	r3, [pc, #608]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	621a      	str	r2, [r3, #32]
 8000b12:	e00b      	b.n	8000b2c <HAL_RCC_OscConfig+0x394>
 8000b14:	4b95      	ldr	r3, [pc, #596]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b16:	6a1a      	ldr	r2, [r3, #32]
 8000b18:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b22:	6a1a      	ldr	r2, [r3, #32]
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b26:	2104      	movs	r1, #4
 8000b28:	438a      	bics	r2, r1
 8000b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b34:	f7ff fbb0 	bl	8000298 <HAL_GetTick>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	e009      	b.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbab 	bl	8000298 <HAL_GetTick>
 8000b42:	0002      	movs	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	4a89      	ldr	r2, [pc, #548]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e108      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	2202      	movs	r2, #2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d0f0      	beq.n	8000b3e <HAL_RCC_OscConfig+0x3a6>
 8000b5c:	e013      	b.n	8000b86 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fb9b 	bl	8000298 <HAL_GetTick>
 8000b62:	0003      	movs	r3, r0
 8000b64:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b66:	e009      	b.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4a7f      	ldr	r2, [pc, #508]	; (8000d70 <HAL_RCC_OscConfig+0x5d8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e0f3      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7c:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	2202      	movs	r2, #2
 8000b82:	4013      	ands	r3, r2
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000b96:	4977      	ldr	r1, [pc, #476]	; (8000d74 <HAL_RCC_OscConfig+0x5dc>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d063      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12a      	bne.n	8000c04 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb2:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbe:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bd0:	f7ff fb62 	bl	8000298 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e0c0      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000be2:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0f1      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	22f8      	movs	r2, #248	; 0xf8
 8000bf2:	4393      	bics	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	00da      	lsls	r2, r3, #3
 8000bfc:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	e034      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	d111      	bne.n	8000c30 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c12:	2104      	movs	r1, #4
 8000c14:	438a      	bics	r2, r1
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c18:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	22f8      	movs	r2, #248	; 0xf8
 8000c1e:	4393      	bics	r3, r2
 8000c20:	0019      	movs	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	00da      	lsls	r2, r3, #3
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2e:	e01e      	b.n	8000c6e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c36:	2104      	movs	r1, #4
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	438a      	bics	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c48:	f7ff fb26 	bl	8000298 <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c52:	f7ff fb21 	bl	8000298 <HAL_GetTick>
 8000c56:	0002      	movs	r2, r0
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e07f      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d1f1      	bne.n	8000c52 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4e0>
 8000c76:	e074      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d100      	bne.n	8000c86 <HAL_RCC_OscConfig+0x4ee>
 8000c84:	e06b      	b.n	8000d5e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d14c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000c94:	4938      	ldr	r1, [pc, #224]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fafd 	bl	8000298 <HAL_GetTick>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca4:	f7ff faf8 	bl	8000298 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e056      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	049b      	lsls	r3, r3, #18
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	4393      	bics	r3, r2
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <HAL_RCC_OscConfig+0x5e4>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cec:	430a      	orrs	r2, r1
 8000cee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0449      	lsls	r1, r1, #17
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff facb 	bl	8000298 <HAL_GetTick>
 8000d02:	0003      	movs	r3, r0
 8000d04:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d08:	f7ff fac6 	bl	8000298 <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e024      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	049b      	lsls	r3, r3, #18
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x570>
 8000d26:	e01c      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d2e:	4912      	ldr	r1, [pc, #72]	; (8000d78 <HAL_RCC_OscConfig+0x5e0>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fab0 	bl	8000298 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d3e:	f7ff faab 	bl	8000298 <HAL_GetTick>
 8000d42:	0002      	movs	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e009      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_RCC_OscConfig+0x5d4>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	049b      	lsls	r3, r3, #18
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5a6>
 8000d5c:	e001      	b.n	8000d62 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	00001388 	.word	0x00001388
 8000d74:	efffffff 	.word	0xefffffff
 8000d78:	feffffff 	.word	0xfeffffff
 8000d7c:	ffc2ffff 	.word	0xffc2ffff

08000d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d8e:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d911      	bls.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9c:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4393      	bics	r3, r2
 8000da4:	0019      	movs	r1, r3
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dae:	4b62      	ldr	r3, [pc, #392]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0b6      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d009      	beq.n	8000dde <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dca:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	22f0      	movs	r2, #240	; 0xf0
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_ClockConfig+0x6a>
 8000de8:	e067      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d114      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e095      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d107      	bne.n	8000e1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	049b      	lsls	r3, r3, #18
 8000e12:	4013      	ands	r3, r2
 8000e14:	d108      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e089      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1a:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e082      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e3c:	f7ff fa2c 	bl	8000298 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d111      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	e009      	b.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff fa23 	bl	8000298 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4a39      	ldr	r2, [pc, #228]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e065      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	220c      	movs	r2, #12
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d1ef      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xce>
 8000e6e:	e024      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d11b      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e78:	e009      	b.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f7ff fa0d 	bl	8000298 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e04f      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d1ef      	bne.n	8000e7a <HAL_RCC_ClockConfig+0xfa>
 8000e9a:	e00e      	b.n	8000eba <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9c:	f7ff f9fc 	bl	8000298 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_RCC_ClockConfig+0x1c0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e03e      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d211      	bcs.n	8000eec <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4393      	bics	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_RCC_ClockConfig+0x1b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d001      	beq.n	8000eec <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d009      	beq.n	8000f0a <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_RCC_ClockConfig+0x1c4>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f0a:	f000 f821 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8000f0e:	0001      	movs	r1, r0
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCC_ClockConfig+0x1bc>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	220f      	movs	r2, #15
 8000f18:	4013      	ands	r3, r2
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_RCC_ClockConfig+0x1c8>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	000a      	movs	r2, r1
 8000f20:	40da      	lsrs	r2, r3
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_ClockConfig+0x1cc>)
 8000f24:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff f98e 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00001388 	.word	0x00001388
 8000f44:	fffff8ff 	.word	0xfffff8ff
 8000f48:	08001334 	.word	0x08001334
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08f      	sub	sp, #60	; 0x3c
 8000f54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f56:	2314      	movs	r3, #20
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f5e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d002      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0x4a>
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d003      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x50>
 8000f98:	e02d      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f9e:	e02d      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2214      	movs	r2, #20
 8000faa:	18ba      	adds	r2, r7, r2
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d009      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fcc:	f7ff f89c 	bl	8000108 <__udivsi3>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4353      	muls	r3, r2
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fda:	e009      	b.n	8000ff0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fde:	000a      	movs	r2, r1
 8000fe0:	0152      	lsls	r2, r2, #5
 8000fe2:	1a52      	subs	r2, r2, r1
 8000fe4:	0193      	lsls	r3, r2, #6
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	185b      	adds	r3, r3, r1
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ff4:	e002      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ffa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b00f      	add	sp, #60	; 0x3c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	08001314 	.word	0x08001314
 800100c:	08001324 	.word	0x08001324
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200

08001018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_RCC_GetHCLKFreq+0x10>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	20000000 	.word	0x20000000

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f7ff f8f6 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f80c 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f84a 	bl	80010d0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800103c:	2390      	movs	r3, #144	; 0x90
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2110      	movs	r1, #16
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff fb95 	bl	8000772 <HAL_GPIO_TogglePin>
  	  HAL_Delay(200);
 8001048:	20c8      	movs	r0, #200	; 0xc8
 800104a:	f7ff f92f 	bl	80002ac <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800104e:	e7f5      	b.n	800103c <main+0x10>

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b091      	sub	sp, #68	; 0x44
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	2410      	movs	r4, #16
 8001058:	193b      	adds	r3, r7, r4
 800105a:	0018      	movs	r0, r3
 800105c:	2330      	movs	r3, #48	; 0x30
 800105e:	001a      	movs	r2, r3
 8001060:	2100      	movs	r1, #0
 8001062:	f000 f943 	bl	80012ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001066:	003b      	movs	r3, r7
 8001068:	0018      	movs	r0, r3
 800106a:	2310      	movs	r3, #16
 800106c:	001a      	movs	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f000 f93c 	bl	80012ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	0021      	movs	r1, r4
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2201      	movs	r2, #1
 8001080:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2210      	movs	r2, #16
 8001086:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	187b      	adds	r3, r7, r1
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fb81 	bl	8000798 <HAL_RCC_OscConfig>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800109a:	f000 f851 	bl	8001140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	003b      	movs	r3, r7
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a4:	003b      	movs	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	003b      	movs	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b0:	003b      	movs	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b6:	003b      	movs	r3, r7
 80010b8:	2100      	movs	r1, #0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fe60 	bl	8000d80 <HAL_RCC_ClockConfig>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010c4:	f000 f83c 	bl	8001140 <Error_Handler>
  }
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b011      	add	sp, #68	; 0x44
 80010ce:	bd90      	pop	{r4, r7, pc}

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	0018      	movs	r0, r3
 80010da:	2314      	movs	r3, #20
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f000 f904 	bl	80012ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_GPIO_Init+0x6c>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_GPIO_Init+0x6c>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0289      	lsls	r1, r1, #10
 80010ee:	430a      	orrs	r2, r1
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_GPIO_Init+0x6c>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	029b      	lsls	r3, r3, #10
 80010fa:	4013      	ands	r3, r2
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001100:	2390      	movs	r3, #144	; 0x90
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	2200      	movs	r2, #0
 8001106:	2110      	movs	r1, #16
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fb15 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2210      	movs	r2, #16
 8001112:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2201      	movs	r2, #1
 8001118:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	1d3a      	adds	r2, r7, #4
 8001128:	2390      	movs	r3, #144	; 0x90
 800112a:	05db      	lsls	r3, r3, #23
 800112c:	0011      	movs	r1, r2
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff f98e 	bl	8000450 <HAL_GPIO_Init>

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b006      	add	sp, #24
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x44>)
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_MspInit+0x44>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x44>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x44>)
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_MspInit+0x44>)
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	0549      	lsls	r1, r1, #21
 8001174:	430a      	orrs	r2, r1
 8001176:	61da      	str	r2, [r3, #28]
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_MspInit+0x44>)
 800117a:	69da      	ldr	r2, [r3, #28]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	055b      	lsls	r3, r3, #21
 8001180:	4013      	ands	r3, r2
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	40021000 	.word	0x40021000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f7ff f860 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <SystemInit+0x70>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <SystemInit+0x70>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <SystemInit+0x70>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <SystemInit+0x70>)
 80011de:	4917      	ldr	r1, [pc, #92]	; (800123c <SystemInit+0x74>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <SystemInit+0x70>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <SystemInit+0x70>)
 80011ea:	4915      	ldr	r1, [pc, #84]	; (8001240 <SystemInit+0x78>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemInit+0x70>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <SystemInit+0x70>)
 80011f6:	4913      	ldr	r1, [pc, #76]	; (8001244 <SystemInit+0x7c>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <SystemInit+0x70>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <SystemInit+0x70>)
 8001202:	4911      	ldr	r1, [pc, #68]	; (8001248 <SystemInit+0x80>)
 8001204:	400a      	ands	r2, r1
 8001206:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <SystemInit+0x70>)
 800120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <SystemInit+0x70>)
 800120e:	210f      	movs	r1, #15
 8001210:	438a      	bics	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SystemInit+0x70>)
 8001216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <SystemInit+0x70>)
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <SystemInit+0x84>)
 800121c:	400a      	ands	r2, r1
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SystemInit+0x70>)
 8001222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SystemInit+0x70>)
 8001226:	2101      	movs	r1, #1
 8001228:	438a      	bics	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <SystemInit+0x70>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]

}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	08ffb80c 	.word	0x08ffb80c
 8001240:	fef6ffff 	.word	0xfef6ffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	ffc0ffff 	.word	0xffc0ffff
 800124c:	fffffeec 	.word	0xfffffeec

08001250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800127a:	f7ff ffa5 	bl	80011c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800127e:	f000 f811 	bl	80012a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff fed3 	bl	800102c <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001294:	0800134c 	.word	0x0800134c
  ldr r2, =_sbss
 8001298:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800129c:	20000024 	.word	0x20000024

080012a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_IRQHandler>
	...

080012a4 <__libc_init_array>:
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	2600      	movs	r6, #0
 80012a8:	4d0c      	ldr	r5, [pc, #48]	; (80012dc <__libc_init_array+0x38>)
 80012aa:	4c0d      	ldr	r4, [pc, #52]	; (80012e0 <__libc_init_array+0x3c>)
 80012ac:	1b64      	subs	r4, r4, r5
 80012ae:	10a4      	asrs	r4, r4, #2
 80012b0:	42a6      	cmp	r6, r4
 80012b2:	d109      	bne.n	80012c8 <__libc_init_array+0x24>
 80012b4:	2600      	movs	r6, #0
 80012b6:	f000 f821 	bl	80012fc <_init>
 80012ba:	4d0a      	ldr	r5, [pc, #40]	; (80012e4 <__libc_init_array+0x40>)
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <__libc_init_array+0x44>)
 80012be:	1b64      	subs	r4, r4, r5
 80012c0:	10a4      	asrs	r4, r4, #2
 80012c2:	42a6      	cmp	r6, r4
 80012c4:	d105      	bne.n	80012d2 <__libc_init_array+0x2e>
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	00b3      	lsls	r3, r6, #2
 80012ca:	58eb      	ldr	r3, [r5, r3]
 80012cc:	4798      	blx	r3
 80012ce:	3601      	adds	r6, #1
 80012d0:	e7ee      	b.n	80012b0 <__libc_init_array+0xc>
 80012d2:	00b3      	lsls	r3, r6, #2
 80012d4:	58eb      	ldr	r3, [r5, r3]
 80012d6:	4798      	blx	r3
 80012d8:	3601      	adds	r6, #1
 80012da:	e7f2      	b.n	80012c2 <__libc_init_array+0x1e>
 80012dc:	08001344 	.word	0x08001344
 80012e0:	08001344 	.word	0x08001344
 80012e4:	08001344 	.word	0x08001344
 80012e8:	08001348 	.word	0x08001348

080012ec <memset>:
 80012ec:	0003      	movs	r3, r0
 80012ee:	1812      	adds	r2, r2, r0
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d100      	bne.n	80012f6 <memset+0xa>
 80012f4:	4770      	bx	lr
 80012f6:	7019      	strb	r1, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	e7f9      	b.n	80012f0 <memset+0x4>

080012fc <_init>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr

08001308 <_fini>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr
